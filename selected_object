src/add_bullet_hole.c:		env->object_sprites[sector->floor_sprites
src/add_bullet_hole.c:		env->object_sprites[sector->floor_sprites
src/add_bullet_hole.c:	if (!(env->floor_bullet_holes_events
src/add_bullet_hole.c:				= (t_event*)ft_realloc(env->floor_bullet_holes_events,
src/add_bullet_hole.c:					sizeof(t_event) * env->nb_floor_bullet_holes_events,
src/add_bullet_hole.c:					sizeof(t_event) * (env->nb_floor_bullet_holes_events + 1))))
src/add_bullet_hole.c:	env->floor_bullet_holes_events[env->nb_floor_bullet_holes_events]
src/add_bullet_hole.c:	env->floor_bullet_holes_events[env->nb_floor_bullet_holes_events].max_uses
src/add_bullet_hole.c:	env->floor_bullet_holes_events[env->nb_floor_bullet_holes_events].delay
src/add_bullet_hole.c:	env->nb_floor_bullet_holes_events++;
src/add_bullet_hole.c:		env->object_sprites[sector->ceiling_sprites
src/add_bullet_hole.c:		env->object_sprites[sector->ceiling_sprites
src/add_bullet_hole.c:	if (!(env->ceiling_bullet_holes_events
src/add_bullet_hole.c:				= (t_event*)ft_realloc(env->ceiling_bullet_holes_events,
src/add_bullet_hole.c:					sizeof(t_event) * env->nb_ceiling_bullet_holes_events,
src/add_bullet_hole.c:					sizeof(t_event) * (env->nb_ceiling_bullet_holes_events + 1))))
src/add_bullet_hole.c:	env->ceiling_bullet_holes_events[env->nb_ceiling_bullet_holes_events]
src/add_bullet_hole.c:	env->ceiling_bullet_holes_events[env->nb_ceiling_bullet_holes_events]
src/add_bullet_hole.c:	env->ceiling_bullet_holes_events[env->nb_ceiling_bullet_holes_events].delay
src/add_bullet_hole.c:	env->nb_ceiling_bullet_holes_events++;
src/add_bullet_hole.c:	if (set_camera_sprites_array(&env->player.camera, sector->num,
src/add_bullet_hole.c:	if (!(env->wall_bullet_holes_events
src/add_bullet_hole.c:				= (t_event*)ft_realloc(env->wall_bullet_holes_events,
src/add_bullet_hole.c:					sizeof(t_event) * env->nb_wall_bullet_holes_events,
src/add_bullet_hole.c:					sizeof(t_event) * (env->nb_wall_bullet_holes_events + 1))))
src/add_bullet_hole.c:	env->wall_bullet_holes_events[env->nb_wall_bullet_holes_events]
src/add_bullet_hole.c:	env->wall_bullet_holes_events[env->nb_wall_bullet_holes_events].max_uses
src/add_bullet_hole.c:	env->wall_bullet_holes_events[env->nb_wall_bullet_holes_events].delay
src/add_bullet_hole.c:	env->nb_wall_bullet_holes_events++;*/
src/add_bullet_hole.c:	if (!(env->wall_bullet_holes_events
src/add_bullet_hole.c:				= (t_event*)ft_realloc(env->wall_bullet_holes_events,
src/add_bullet_hole.c:					sizeof(t_event) * env->nb_wall_bullet_holes_events,
src/add_bullet_hole.c:					sizeof(t_event) * (env->nb_wall_bullet_holes_events + 1))))
src/add_bullet_hole.c:	env->wall_bullet_holes_events[env->nb_wall_bullet_holes_events]
src/add_bullet_hole.c:	env->wall_bullet_holes_events[env->nb_wall_bullet_holes_events].max_uses
src/add_bullet_hole.c:	env->wall_bullet_holes_events[env->nb_wall_bullet_holes_events].delay
src/add_bullet_hole.c:	env->nb_wall_bullet_holes_events++;
src/add_enemy.c:	enemy.num = env->nb_enemies;
src/add_enemy.c:	enemy.pos.x = (env->sdl.mx - env->editor.center.x) / env->editor.scale;
src/add_enemy.c:	enemy.pos.y = (env->sdl.my - env->editor.center.y) / env->editor.scale;
src/add_enemy.c:	enemy.sprite = env->editor.current_enemy;
src/add_enemy.c:		enemy.light_color = env->sectors[enemy.sector].light_color;
src/add_enemy.c:		enemy.brightness = env->sectors[enemy.sector].brightness;
src/add_enemy.c:		enemy.intensity = env->sectors[enemy.sector].intensity;
src/add_enemy.c:		enemy.pos.z = get_floor_at_pos(env->sectors[enemy.sector],
src/add_enemy.c:	if (!(env->enemies = (t_enemies*)ft_realloc(env->enemies, sizeof(t_enemies) * env->nb_enemies, sizeof(t_enemies) * (env->nb_enemies + 1))))
src/add_enemy.c:	env->enemies[env->nb_enemies] = enemy;
src/add_enemy.c:	env->editor.create_enemy = 0;
src/add_enemy.c:	env->nb_enemies++;
src/add_enemy.c:	env->editor.add_enemy.state = UP;
src/add_object.c:	object.num = env->nb_objects;
src/add_object.c:	object.pos.x = (env->sdl.mx - env->editor.center.x) / env->editor.scale;
src/add_object.c:	object.pos.y = (env->sdl.my - env->editor.center.y) / env->editor.scale;
src/add_object.c:		object.light_color = env->sectors[object.sector].light_color;
src/add_object.c:		object.brightness = env->sectors[object.sector].brightness;
src/add_object.c:		object.intensity = env->sectors[object.sector].intensity;
src/add_object.c:		object.pos.z = get_floor_at_pos(env->sectors[object.sector],
src/add_object.c:	if (!(env->objects = (t_object*)ft_realloc(env->objects, sizeof(t_object) * env->nb_objects, sizeof(t_object) * (env->nb_objects + 1))))
src/add_object.c:	env->objects[env->nb_objects] = object;
src/add_object.c:	env->editor.create_object = 0;
src/add_object.c:	env->editor.add_object.state = UP;
src/add_object.c:	env->nb_objects++;
src/add_player.c:	sector = env->sectors[0];
src/add_player.c:		pos.x += (env->vertices[sector.vertices[i]].x - env->player.pos.x);
src/add_player.c:		pos.y += (env->vertices[sector.vertices[i]].y - env->player.pos.y);
src/add_player.c:	env->player.pos.x = pos.x;
src/add_player.c:	env->player.pos.y = pos.y;
src/add_player.c:	sector = get_sector_no_z(env, env->player.pos);
src/add_player.c:	env->player.sector = sector;
src/add_player.c:	env->player.pos.x = (env->sdl.mx - env->editor.center.x) / env->editor.scale;
src/add_player.c:	env->player.pos.y = (env->sdl.my - env->editor.center.y) / env->editor.scale;
src/add_player.c:	env->player.camera.angle = 0;
src/add_player.c:	env->player.camera.angle_z = 0;
src/add_player.c:	env->player.camera.pos = env->player.pos;
src/add_player.c:	env->player.camera.pos.z = 6;
src/add_player.c:	env->player.eyesight = 6.0;
src/add_player.c:	env->player.highest_sect = env->player.sector;
src/add_player.c:	/*ft_printf("player_z: %f | sector_height: %f\n", env->player.eyesight,
src/add_player.c:	env->sectors[env->player.sector].ceiling - env->sectors[env->player.sector].floor);*/
src/add_player.c:	if ((env->sectors[env->player.sector].ceiling
src/add_player.c:	- env->sectors[env->player.sector].floor) < env->player.eyesight)
src/add_player.c:		env->player.pos.x = 0;
src/add_player.c:		env->player.pos.y = 0;
src/add_player.c:		env->player.sector = -1;
src/add_player.c:		env->player.camera.angle = 0;
src/add_player.c:		env->player.camera.angle_z = 0;
src/add_player.c:		env->player.camera.pos.z = 0;
src/add_player.c:		env->player.eyesight = 0;
src/add_player.c:	if (!env->editor.player_exist)
src/add_player.c:		env->editor.player_exist = 1;
src/add_player.c:		env->player.pos.x = (env->sdl.mx - env->editor.center.x) / env->editor.scale;
src/add_player.c:		env->player.pos.y = (env->sdl.my - env->editor.center.y) / env->editor.scale;
src/add_player.c:	env->player.camera.angle = 0;
src/add_player.c:	env->player.camera.angle_z = 0;
src/add_player.c:	env->player.camera.pos = env->player.pos;
src/add_player.c:	env->player.camera.pos.z = 6;
src/add_player.c:	env->player.eyesight = 6;
src/add_player.c:	env->player.speed = 0.1;
src/add_player.c:	env->player.camera.angle_cos = cos(env->player.camera.angle);
src/add_player.c:	env->player.camera.angle_sin = sin(env->player.camera.angle);
src/add_player.c:	env->player.camera.perp_cos = cos(env->player.camera.angle - M_PI / 2);
src/add_player.c:	env->player.camera.perp_sin = sin(env->player.camera.angle - M_PI / 2);
src/add_player.c:	env->player.sector = get_sector_no_z(env,
src/add_player.c:			env->player.pos);
src/add_player.c:	env->player.highest_sect = env->player.sector;
src/add_player.c:	if (env->player.sector != -1)
src/add_player.c:	env->player.head_z = env->player.pos.z + env->player.eyesight;
src/add_player.c:	env->player.camera.pos = env->player.pos;
src/add_player.c:	env->player.camera.pos.z = env->player.head_z;
src/add_player.c:	update_camera_position(&env->player.camera);
src/add_sector.c:	sector = env->sectors[env->nb_sectors - 1];
src/add_sector.c:				sector.floor = env->sectors[sector.neighbors[i]].floor;
src/add_sector.c:				sector.ceiling = env->sectors[sector.neighbors[i]].ceiling;
src/add_sector.c:			if (sector.floor > env->sectors[sector.neighbors[i]].floor)
src/add_sector.c:				sector.floor = env->sectors[sector.neighbors[i]].floor;
src/add_sector.c:			if (sector.ceiling < env->sectors[sector.neighbors[i]].ceiling)
src/add_sector.c:				sector.ceiling = env->sectors[sector.neighbors[i]].ceiling;
src/add_sector.c:	env->sectors[env->nb_sectors - 1].floor = sector.floor;
src/add_sector.c:	env->sectors[env->nb_sectors - 1].ceiling = sector.ceiling;
src/add_sector.c:	tmp = env->editor.current_vertices;
src/add_sector.c:	sector.floor_texture = env->editor.current_texture;
src/add_sector.c:	sector.ceiling_texture = env->editor.current_texture;
src/add_sector.c:	//sector.floor_scale.x = env->wall_textures[sector.floor_texture].surface->w / 10;
src/add_sector.c:	//sector.floor_scale.y = env->wall_textures[sector.floor_texture].surface->h / 10;
src/add_sector.c:	sector.num = env->nb_sectors;
src/add_sector.c:		env->wall_textures[sector.floor_texture],
src/add_sector.c:		env->wall_textures[sector.ceiling_texture],
src/add_sector.c:	if (!(env->sectors = (t_sector*)ft_realloc(env->sectors,
src/add_sector.c:					sizeof(t_sector) * env->nb_sectors,
src/add_sector.c:					sizeof(t_sector) * (env->nb_sectors + 1))))
src/add_sector.c:	env->sectors[env->nb_sectors] = sector;
src/add_sector.c:	env->nb_sectors++;
src/add_vertex.c:	if (!env->editor.current_vertices)
src/add_vertex.c:	if (!env->editor.current_vertices->next)
src/add_vertex.c:		v = (t_vertex*)env->editor.current_vertices->content;
src/add_vertex.c:		free(env->editor.current_vertices->content);
src/add_vertex.c:		free(env->editor.current_vertices);
src/add_vertex.c:		env->editor.current_vertices = NULL;
src/add_vertex.c:		env->editor.start_vertex = -1;
src/add_vertex.c:	tmp = env->editor.current_vertices;
src/add_vertex.c:	while (env->editor.current_vertices)
src/add_vertex.c:		tmp = env->editor.current_vertices;
src/add_vertex.c:		env->editor.current_vertices = env->editor.current_vertices->next;
src/add_vertex.c:	if (!(new = ft_lstnew(&env->vertices[num], sizeof(t_vertex))))
src/add_vertex.c:	ft_lstpushback(&env->editor.current_vertices, new);
src/add_vertex.c:	vertex.num = env->nb_vertices;
src/add_vertex.c:	vertex.x = round((env->sdl.mx - env->editor.center.x) / env->editor.scale);
src/add_vertex.c:	vertex.y = round((env->sdl.my - env->editor.center.y) / env->editor.scale);
src/add_vertex.c:	if (!(env->vertices = (t_vertex*)ft_realloc(env->vertices, sizeof(t_vertex) * env->nb_vertices, sizeof(t_vertex) * (env->nb_vertices + 1))))
src/add_vertex.c:	env->vertices[env->nb_vertices] = vertex;
src/add_vertex.c:	env->nb_vertices++;
src/add_vertex_in_sector.c:	while (i < env->nb_sectors)
src/add_vertex_in_sector.c:		while (j < env->sectors[i].nb_vertices)
src/add_vertex_in_sector.c:			if (((j > 0 && env->sectors[i].vertices[j] == v1 && (env->sectors[i].vertices[j - 1] == v2
src/add_vertex_in_sector.c:			|| env->sectors[i].vertices[j + 1] == v2)))
src/add_vertex_in_sector.c:			|| (env->sectors[i].vertices[j] == v1 && j == 0
src/add_vertex_in_sector.c:			&& (env->sectors[i].vertices[env->sectors[i].nb_vertices - 1] == v2
src/add_vertex_in_sector.c:			|| env->sectors[i].vertices[j + 1] == v2)))
src/add_vertex_in_sector.c:	while (i < env->nb_sectors)
src/add_vertex_in_sector.c:		while (j < env->sectors[i].nb_vertices)
src/add_vertex_in_sector.c:			v1 = new_v2(env->vertices[env->sectors[i].vertices[j]].x, env->vertices[env->sectors[i].vertices[j]].y);
src/add_vertex_in_sector.c:			v2 = new_v2(env->vertices[env->sectors[i].vertices[j + 1]].x, env->vertices[env->sectors[i].vertices[j + 1]].y);
src/add_vertex_in_sector.c:			mouse = new_v2(round((env->sdl.mx - env->editor.center.x) / env->editor.scale),
src/add_vertex_in_sector.c:			round((env->sdl.my - env->editor.center.y) / env->editor.scale));
src/add_vertex_in_sector.c:					env->editor.add.v1 = env->sectors[i].vertices[j];
src/add_vertex_in_sector.c:					env->editor.add.v2 = env->sectors[i].vertices[j + 1];
src/add_vertex_in_sector.c:/*	ft_printf("nb_vertices: %d| i: %d\n", env->sectors[i].nb_vertices, i);
src/add_vertex_in_sector.c:	v1 = new_v2(env->vertices[env->sectors[i].vertices[j]].x, env->vertices[env->sectors[i].vertices[j]].y);
src/add_vertex_in_sector.c:	v2 = new_v2(env->vertices[env->sectors[i].vertices[j]].x, env->vertices[env->sectors[i].vertices[j]].y);
src/add_vertex_in_sector.c:	mouse = new_v2(round((env->sdl.mx - env->editor.center.x) / env->editor.scale),
src/add_vertex_in_sector.c:	round((env->sdl.my - env->editor.center.y) / env->editor.scale));
src/add_vertex_in_sector.c:	/*if (env->editor.select_vertex_on_going)
src/add_vertex_in_sector.c:		if (env->editor.add.v1 == -1)
src/add_vertex_in_sector.c:	        env->editor.add.v1 = env->editor.selected_vertex;
src/add_vertex_in_sector.c:		else if(env->editor.selected_vertex != env->editor.add.v1 && env->editor.add.v2 == -1)
src/add_vertex_in_sector.c:	        env->editor.add.v2 = env->editor.selected_vertex;
src/add_vertex_in_sector.c:			env->editor.select_vertex_on_going = 0;
src/add_vertex_in_sector.c:	if (env->editor.add.v1 != -1 && env->editor.add.v2 != -1)
src/add_vertex_in_sector.c:	if (!(env->sectors[sector].vertices = (int *)ft_realloc(env->sectors[sector].vertices, sizeof(int)
src/add_vertex_in_sector.c:	* (env->sectors[sector].nb_vertices + 1), sizeof(int) * (env->sectors[sector].nb_vertices + 2))))
src/add_vertex_in_sector.c:	env->sectors[sector].nb_vertices++;
src/add_vertex_in_sector.c:	i = env->sectors[sector].nb_vertices;
src/add_vertex_in_sector.c:		env->sectors[sector].vertices[i] = 	env->sectors[sector].vertices[i - 1];
src/add_vertex_in_sector.c:	env->sectors[sector].vertices[i] = env->vertices[env->nb_vertices - 1].num;
src/add_vertex_in_sector.c:	env->sectors[sector].vertices[env->sectors[sector].nb_vertices] = env->sectors[sector].vertices[0];
src/add_vertex_in_sector.c:	if (!(env->sectors[sector].textures = (int *)ft_realloc(env->sectors[sector].textures, sizeof(int)
src/add_vertex_in_sector.c:	* env->sectors[sector].nb_vertices, sizeof(int) * (env->sectors[sector].nb_vertices + 1))))
src/add_vertex_in_sector.c:	i = env->sectors[sector].nb_vertices;
src/add_vertex_in_sector.c:		env->sectors[sector].textures[i] = env->sectors[sector].textures[i - 1];
src/add_vertex_in_sector.c:	env->sectors[sector].textures[i] = env->sectors[sector].textures[i - 1];
src/add_vertex_in_sector.c:	* env->sectors[sector].nb_vertices, sizeof(double) * (env->sectors[sector].nb_vertices + 1))))
src/add_vertex_in_sector.c:	i = env->sectors[sector].nb_vertices;
src/add_vertex_in_sector.c:	* env->sectors[sector].nb_vertices, sizeof(int) * (env->sectors[sector].nb_vertices + 1))))
src/add_vertex_in_sector.c:	i = env->sectors[sector].nb_vertices;
src/add_vertex_in_sector.c:	* env->sectors[sector].nb_vertices, sizeof(t_v2) * (env->sectors[sector].nb_vertices + 1))))
src/add_vertex_in_sector.c:	i = env->sectors[sector].nb_vertices;
src/add_vertex_in_sector.c:	* env->sectors[sector].nb_vertices, sizeof(t_wall_sprites) * (env->sectors[sector].nb_vertices + 1))))
src/add_vertex_in_sector.c:	i = env->sectors[sector].nb_vertices;
src/add_vertex_in_sector.c:	* env->sectors[sector].nb_vertices, sizeof(t_list*) * (env->sectors[sector].nb_vertices + 1))))
src/add_vertex_in_sector.c:	i = env->sectors[sector].nb_vertices;
src/add_vertex_in_sector.c:	while (j < env->sectors[sector].nb_vertices - 1)
src/add_vertex_in_sector.c:		if (env->sectors[sector].walls_map_lvl[j])
src/add_vertex_in_sector.c:			ft_memdel((void**)&env->sectors[sector].walls_map_lvl[j]);
src/add_vertex_in_sector.c:	ft_memdel((void**)&env->sectors[sector].walls_map_lvl);
src/add_vertex_in_sector.c:	if (!(env->sectors[sector].walls_map_lvl = (double **)ft_realloc(env->sectors[sector].walls_map_lvl, sizeof(double*)
src/add_vertex_in_sector.c:	* env->sectors[sector].nb_vertices, sizeof(double*) * (env->sectors[sector].nb_vertices + 1))))
src/add_vertex_in_sector.c:	while(j < env->sectors[sector].nb_vertices)
src/add_vertex_in_sector.c:		set_sector_wall_map_array(&env->sectors[sector], env->wall_textures[env->sectors[sector].textures[j]], j, env);
src/add_vertex_in_sector.c:	if (!(env->sectors[sector].neighbors = (int *)ft_realloc(env->sectors[sector].neighbors, sizeof(int)
src/add_vertex_in_sector.c:	* env->sectors[sector].nb_vertices, sizeof(int) * (env->sectors[sector].nb_vertices + 1))))
src/add_vertex_in_sector.c:	i = env->sectors[sector].nb_vertices;
src/add_vertex_in_sector.c:		env->sectors[sector].neighbors[i] = env->sectors[sector].neighbors[i - 1];
src/add_vertex_in_sector.c:	env->sectors[sector].neighbors[i] = env->sectors[sector].neighbors[i - 1];
src/add_vertex_in_sector.c:    while (j < env->sectors[sector].nb_vertices)
src/add_vertex_in_sector.c:        if (env->sectors[sector].vertices[j] == env->editor.add.v1 || env->sectors[sector].vertices[j] == env->editor.add.v2)
src/add_vertex_in_sector.c:			if ((env->editor.add.v1 == env->sectors[sector].vertices[0]
src/add_vertex_in_sector.c:			&& env->editor.add.v2 == env->sectors[sector].vertices[env->sectors[sector].nb_vertices - 1])
src/add_vertex_in_sector.c:			|| (env->editor.add.v2 == env->sectors[sector].vertices[0]
src/add_vertex_in_sector.c:			&& env->editor.add.v1 == env->sectors[sector].vertices[env->sectors[sector].nb_vertices - 1]))
src/add_vertex_in_sector.c:				j = env->sectors[sector].nb_vertices - 1;
src/add_vertex_in_sector.c:			/*if (modify_int_tab_in_sector(env, j, sector, &env->sectors[sector].nb_sprites))
src/add_vertex_in_sector.c:			if (modify_int_tab_in_sector(env, j, sector, &env->sectors[sector].selected))
src/add_vertex_in_sector.c:			if (modify_double_tab_in_sector(env, j, sector, &env->sectors[sector].floors))
src/add_vertex_in_sector.c:			if (modify_double_tab_in_sector(env, j, sector, &env->sectors[sector].ceilings))
src/add_vertex_in_sector.c:			if (modify_double_tab_in_sector(env, j, sector, &env->sectors[sector].clipped_floors1))
src/add_vertex_in_sector.c:			if (modify_double_tab_in_sector(env, j, sector, &env->sectors[sector].clipped_ceilings1))
src/add_vertex_in_sector.c:			if (modify_double_tab_in_sector(env, j, sector, &env->sectors[sector].clipped_ceilings2))
src/add_vertex_in_sector.c:			if (modify_double_tab_in_sector(env, j, sector, &env->sectors[sector].clipped_floors2))
src/add_vertex_in_sector.c:			if (modify_double_tab_in_sector(env, j, sector, &env->sectors[sector].wall_width))
src/add_vertex_in_sector.c:			if (modify_t_v2_tab_in_sector(env, j, sector, &env->sectors[sector].scale))
src/add_vertex_in_sector.c:			if (modify_t_v2_tab_in_sector(env, j, sector, &env->sectors[sector].align))
src/add_vertex_in_sector.c:			if (modify_t_wall_sprites_tab_in_sector(env, j, sector, &env->sectors[sector].wall_sprites))
src/add_vertex_in_sector.c:			if (modify_t_list_tab_in_sector(env, j, sector, &env->sectors[sector].wall_bullet_holes))
src/add_vertex_in_sector.c:	if (!(env->vertices = (t_vertex *)ft_realloc(env->vertices, sizeof(t_vertex)
src/add_vertex_in_sector.c:			* env->nb_vertices, sizeof(t_vertex) * (env->nb_vertices + 1))))
src/add_vertex_in_sector.c:	env->nb_vertices++;
src/add_vertex_in_sector.c:/*	min = env->vertices[env->editor.add.v1].x < env->vertices[env->editor.add.v2].x ?
src/add_vertex_in_sector.c:	env->vertices[env->editor.add.v1].x : env->vertices[env->editor.add.v2].x;
src/add_vertex_in_sector.c:	max = env->vertices[env->editor.add.v1].x > env->vertices[env->editor.add.v2].x ?
src/add_vertex_in_sector.c:	env->vertices[env->editor.add.v1].x : env->vertices[env->editor.add.v2].x;
src/add_vertex_in_sector.c:	env->vertices[env->nb_vertices - 1].x =	round(min + ((max - min) / 2));
src/add_vertex_in_sector.c:	min = env->vertices[env->editor.add.v1].y < env->vertices[env->editor.add.v2].y ?
src/add_vertex_in_sector.c:	env->vertices[env->editor.add.v1].y : env->vertices[env->editor.add.v2].y;
src/add_vertex_in_sector.c:	max = env->vertices[env->editor.add.v1].y > env->vertices[env->editor.add.v2].y ?
src/add_vertex_in_sector.c:	env->vertices[env->editor.add.v1].y : env->vertices[env->editor.add.v2].y;
src/add_vertex_in_sector.c:	env->vertices[env->nb_vertices - 1].y = round(min + ((max - min) / 2));*/
src/add_vertex_in_sector.c:	env->vertices[env->nb_vertices - 1].x = round((env->sdl.mx - env->editor.center.x) / env->editor.scale);
src/add_vertex_in_sector.c:	env->vertices[env->nb_vertices - 1].y = round((env->sdl.my - env->editor.center.y) / env->editor.scale);
src/add_vertex_in_sector.c:	env->vertices[env->nb_vertices - 1].num = env->nb_vertices - 1;
src/add_vertex_in_sector.c:    if (!(env->editor.add.sector_list = get_sectors_list(env, env->editor.add.v1, env->editor.add.v2)))
src/add_vertex_in_sector.c:	while (i <= env->editor.add.sector_list[0])
src/add_vertex_in_sector.c:    	if (modify_sector(env, env->editor.add.sector_list[i]))
src/add_vertex_in_sector.c:	env->editor.add.v1 = -1;
src/add_vertex_in_sector.c:	env->editor.add.v2 = -1;
src/animations.c:	if (!env->player_hurt.start)
src/animations.c:		env->player_hurt.start = SDL_GetTicks();
src/animations.c:	if (env->time.milli_s > env->player_hurt.start + 160)
src/animations.c:		env->player_hurt.start = 0;
src/animations.c:		env->player.hit = 0;
src/animations.c:	time_spent = env->time.milli_s - env->player_hurt.start;
src/animations.c:	while (j < env->w * env->h)
src/animations.c:		env->sdl.texture_pixels[j] = blend_alpha(env->sdl.texture_pixels[j], 0xFFFF0000, color);
src/animations.c:	if (!env->enemies[i].hurt.start)
src/animations.c:		env->enemies[i].hurt.start = SDL_GetTicks();
src/animations.c:	if (env->time.milli_s > env->enemies[i].hurt.start + 160)
src/animations.c:		env->enemies[i].hurt.start = 0;
src/animations.c:		env->enemies[i].hit = 0;
src/animations.c:	time_spent = env->time.milli_s - env->player_hurt.start;
src/animations.c:	if (env->objects[i].rest.start == 0)
src/animations.c:		env->objects[i].rest.start = SDL_GetTicks();
src/animations.c:	start = env->objects[i].rest.start;
src/animations.c:	time_spent = env->time.milli_s - start;
src/animations.c:	tick = env->objects[i].nb_rest_state * 340;
src/animations.c:		env->objects[i].rest.start = 0;
src/animations.c:		env->objects[i].sprite = env->object_sprites[env->objects[i].sprite].rest_sprite;
src/animations.c:	time_spent = env->time.milli_s - start;
src/animations.c:	if (env->objects[i].death.start == 0)
src/animations.c:		env->objects[i].death.start = SDL_GetTicks();
src/animations.c:	start = env->objects[i].death.start;
src/animations.c:	time_spent = env->time.milli_s - start;
src/animations.c:	env->objects[i].solid = 0;
src/animations.c:		env->objects[i].death.start = 0;
src/animations.c:		if (env->objects[i].explodes == 1)
src/animations.c:			env->objects[i].exists = 0;
src/animations.c:	if (env->enemies[i].rest.start == 0)
src/animations.c:		env->enemies[i].rest.start = SDL_GetTicks();
src/animations.c:	start = env->enemies[i].rest.start;
src/animations.c:	time_spent = env->time.milli_s - start;
src/animations.c:	tick = env->enemies[i].nb_rest_state * 340;
src/animations.c:		env->enemies[i].rest.start = 0;
src/animations.c:		env->enemies[i].sprite = env->enemy_sprites[env->enemies[i].sprite].rest_sprite;
src/animations.c:	if (env->enemies[i].pursue.start == 0)
src/animations.c:		env->enemies[i].pursue.start = SDL_GetTicks();
src/animations.c:	start = env->enemies[i].pursue.start;
src/animations.c:	time_spent = env->time.milli_s - start;
src/animations.c:	tick = 340 * env->enemies[i].nb_pursuit_state;
src/animations.c:		env->enemies[i].pursue.start = 0;
src/animations.c:		env->enemies[i].sprite = env->enemy_sprites[env->enemies[i].sprite].pursuit_sprite;
src/animations.c:	if (env->enemies[i].death.start == 0)
src/animations.c:		env->enemies[i].death.start = SDL_GetTicks();
src/animations.c:	start = env->enemies[i].death.start;
src/animations.c:	time_spent = env->time.milli_s - start;
src/animations.c:		env->enemies[i].death.start = 0;
src/animations.c:		env->enemies[i].exists = 0;
src/animations.c:	if (env->enemies[i].rand_dir.start == 0)
src/animations.c:		env->enemies[i].rand_dir.start = SDL_GetTicks();
src/animations.c:	start = env->enemies[i].rand_dir.start;
src/animations.c:	time_spent = env->time.milli_s - start;
src/animations.c:		env->enemies[i].rand_dir.start = 0;
src/animations.c:		return ((int)env->time.milli_s % 2 == 0);
src/animations.c:	return (env->enemies[i].dir);
src/animations.c:	if (env->enemies[i].fire.start == 0)
src/animations.c:		env->enemies[i].fire.start = SDL_GetTicks();
src/animations.c:	start = env->enemies[i].fire.start;
src/animations.c:	time_spent = env->time.milli_s - start;
src/animations.c:	tick = 200 * env->enemies[i].nb_firing_state;
src/animations.c:		env->enemies[i].fire.start = 0;
src/animations.c:		env->enemies[i].sprite = env->enemy_sprites[env->enemies[i].sprite].firing_sprite;
src/animations.c:		env->enemies[i].shot = (env->enemies[i].sprite == env->enemies[i].firing_sprite) ? 1 : 0;
src/apply_texture.c:					env->wall_textures[sector->textures[i]], i, env))
src/apply_texture.c:				if (env->editor.in_game
src/apply_texture.c:					&& set_camera_map_array(&env->player.camera,
src/apply_texture.c:			env->wall_textures[sector->floor_texture], env))
src/apply_texture.c:			env->wall_textures[sector->ceiling_texture], env))
src/are_condition_selection_buttons_visible.c:	event = env->editor.selected_event;
src/are_condition_selection_buttons_visible.c:	events = env->editor.selected_events;
src/are_condition_selection_buttons_visible.c:	if ((env->selected_wall_sprite_wall != -1
src/are_condition_selection_buttons_visible.c:		&& ((events == 0 && env->sectors[sector].wall_sprites[wall].
src/are_condition_selection_buttons_visible.c:		nb_press_events[sprite] > 0 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		nb_launch_conditions > 1) || (events == 1 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		wall_sprites[wall].nb_shoot_events[sprite] > 0 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		1))) || (sector != -1 && ((events == 0 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		nb_stand_events > 0 && env->sectors[sector].stand_events[event].
src/are_condition_selection_buttons_visible.c:		nb_launch_conditions > 1) || (events == 1 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		nb_walk_in_events > 0 && env->sectors[sector].walk_in_events[event].
src/are_condition_selection_buttons_visible.c:		nb_launch_conditions > 1) || (events == 2 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		nb_walk_out_events > 0 && env->sectors[sector].walk_out_events[event].
src/are_condition_selection_buttons_visible.c:		nb_launch_conditions > 1))) || (sector == -1 && env->selected_floor ==
src/are_condition_selection_buttons_visible.c:		-1 && env->nb_global_events > 0 && env->global_events[event].
src/are_condition_selection_buttons_visible.c:	sector = env->editor.selected_sector;
src/are_condition_selection_buttons_visible.c:	wall = env->selected_wall_sprite_wall;
src/are_condition_selection_buttons_visible.c:	sprite = env->selected_wall_sprite_sprite;
src/are_condition_selection_buttons_visible.c:	event = env->editor.selected_event;
src/are_condition_selection_buttons_visible.c:	events = env->editor.selected_events;
src/are_condition_selection_buttons_visible.c:	if ((env->selected_wall_sprite_wall != -1
src/are_condition_selection_buttons_visible.c:		&& ((events == 0 && env->sectors[sector].wall_sprites[wall].
src/are_condition_selection_buttons_visible.c:		nb_press_events[sprite] > 0 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		nb_exec_conditions > 1) || (events == 1 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		wall_sprites[wall].nb_shoot_events[sprite] > 0 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		1))) || (sector != -1 && ((events == 0 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		nb_stand_events > 0 && env->sectors[sector].stand_events[event].
src/are_condition_selection_buttons_visible.c:		nb_exec_conditions > 1) || (events == 1 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		nb_walk_in_events > 0 && env->sectors[sector].walk_in_events[event].
src/are_condition_selection_buttons_visible.c:		nb_exec_conditions > 1) || (events == 2 && env->sectors[sector].
src/are_condition_selection_buttons_visible.c:		nb_walk_out_events > 0 && env->sectors[sector].walk_out_events[event].
src/are_condition_selection_buttons_visible.c:		nb_exec_conditions > 1))) || (sector == -1 && env->selected_floor ==
src/are_condition_selection_buttons_visible.c:		-1 && env->nb_global_events > 0 && env->global_events[event].
src/are_condition_selection_buttons_visible.c:	sector = env->editor.selected_sector;
src/are_condition_selection_buttons_visible.c:	wall = env->selected_wall_sprite_wall;
src/are_condition_selection_buttons_visible.c:	sprite = env->selected_wall_sprite_sprite;
src/benchmark.c:	ft_dprintf(fd, "Average fps = %f\n", (env->avrg_fps + old.average) / 2);
src/benchmark.c:	ft_dprintf(fd, "Min fps = %f\n", (env->min_fps + old.min) / 2);
src/benchmark.c:	ft_dprintf(fd, "Min fps = %f\n", (env->max_fps + old.max) / 2);
src/benchmark.c:	ft_dprintf(fd, "Average fps = %f\n", (env->avrg_fps2 + new.average) / 2);
src/benchmark.c:	ft_dprintf(fd, "Min fps = %f\n", (env->min_fps2 + new.min) / 2);
src/benchmark.c:	ft_dprintf(fd, "Max fps = %f\n", (env->max_fps2 + new.max) / 2);
src/benchmark.c:		env->avrg_fps, env->min_fps, env->max_fps);
src/benchmark.c:		env->avrg_fps2, env->min_fps2, env->max_fps2);
src/benchmark.c:	if (!env->avrg_fps)
src/benchmark.c:		old.average = env->avrg_fps;
src/benchmark.c:		old.min = env->min_fps;
src/benchmark.c:		old.max = env->max_fps;
src/benchmark.c:		new.average = env->avrg_fps2;
src/benchmark.c:		new.min = env->min_fps2;
src/benchmark.c:		new.max = env->max_fps2;
src/bmp_parse_pixel_data.c:			env->sprite_textures[index].str[x + y * parser->w] = get_pixel(byte, str, parser); 
src/bmp_parse_pixel_data.c:			env->wall_textures[index].str[x + y * parser->w] = get_pixel(byte, str, parser); 
src/bmp_parse_pixel_data.c:			env->skyboxes[num_sky].textures[index].str[x + y * parser->w] = get_pixel(byte, str, parser); 
src/bmp_parse_pixel_data.c:			env->ui_textures[index].str[x + y * parser->w] = get_pixel(byte,
src/bmp_parse_pixel_data.c:			env->mini_enemies_textures[index].str[x + y * parser->w] = get_pixel(byte,
src/bmp_parse_pixel_data.c:			env->mini_objects_textures[index].str[x + y * parser->w] = get_pixel(byte,
src/bmp_parse_pixel_data.c:			env->mini_skyboxes[index].str[x + y * parser->w] = get_pixel(byte,
src/bmp_parser.c:	if (!(env->sprite_textures[index].surface = SDL_CreateRGBSurfaceWithFormat(
src/bmp_parser.c:	env->sprite_textures[index].str = env->sprite_textures[index].surface->pixels;
src/bmp_parser.c:	env->sprite_textures[index].scale = 1;
src/bmp_parser.c:	env->sprite_textures[index].xpadding = 0;
src/bmp_parser.c:	env->sprite_textures[index].ypadding = 0;
src/bmp_parser_skybox.c:	if (!(env->skyboxes[num_sky].textures[index].surface = SDL_CreateRGBSurfaceWithFormat(
src/bmp_parser_skybox.c:	env->skyboxes[num_sky].textures[index].str = env->skyboxes[num_sky].textures[index].surface->pixels;
src/bmp_parser_skybox.c:	env->skyboxes[num_sky].textures[index].scale = 1;
src/bmp_parser_skybox.c:	env->skyboxes[num_sky].textures[index].xpadding = 0;
src/bmp_parser_skybox.c:	env->skyboxes[num_sky].textures[index].ypadding = 0;
src/bmp_parser_ui.c:	if (!(env->ui_textures[index].surface = SDL_CreateRGBSurfaceWithFormat(
src/bmp_parser_ui.c:	env->ui_textures[index].str = env->ui_textures[index].surface->pixels;
src/bmp_parser_ui.c:	env->ui_textures[index].scale = 1;
src/bmp_parser_ui.c:	env->ui_textures[index].xpadding = 0;
src/bmp_parser_ui.c:	env->ui_textures[index].ypadding = 0;
src/bmp_parser_ui_enemies.c:	if (!(env->mini_enemies_textures[index].surface = SDL_CreateRGBSurfaceWithFormat(
src/bmp_parser_ui_enemies.c:	env->mini_enemies_textures[index].str = env->mini_enemies_textures[index].surface->pixels;
src/bmp_parser_ui_enemies.c:	env->mini_enemies_textures[index].scale = 1;
src/bmp_parser_ui_enemies.c:	env->mini_enemies_textures[index].xpadding = 0;
src/bmp_parser_ui_enemies.c:	env->mini_enemies_textures[index].ypadding = 0;
src/bmp_parser_ui_objects.c:	if (!(env->mini_objects_textures[index].surface = SDL_CreateRGBSurfaceWithFormat(
src/bmp_parser_ui_objects.c:	env->mini_objects_textures[index].str = env->mini_objects_textures[index].surface->pixels;
src/bmp_parser_ui_objects.c:	env->mini_objects_textures[index].scale = 1;
src/bmp_parser_ui_objects.c:	env->mini_objects_textures[index].xpadding = 0;
src/bmp_parser_ui_objects.c:	env->mini_objects_textures[index].ypadding = 0;
src/bmp_parser_ui_skyboxes.c:	if (!(env->mini_skyboxes[index].surface = SDL_CreateRGBSurfaceWithFormat(
src/bmp_parser_ui_skyboxes.c:	env->mini_skyboxes[index].str = env->mini_skyboxes[index].surface->pixels;
src/bmp_parser_ui_skyboxes.c:	env->mini_skyboxes[index].scale = 1;
src/bmp_parser_ui_skyboxes.c:	env->mini_skyboxes[index].xpadding = 0;
src/bmp_parser_ui_skyboxes.c:	env->mini_skyboxes[index].ypadding = 0;
src/bmp_parser_wall.c:	if (!(env->wall_textures[index].surface = SDL_CreateRGBSurfaceWithFormat(
src/bmp_parser_wall.c:	env->wall_textures[index].str = env->wall_textures[index].surface->pixels;
src/bmp_parser_wall.c:	env->wall_textures[index].scale = 1;
src/bmp_parser_wall.c:	env->wall_textures[index].xpadding = 0;
src/bmp_parser_wall.c:	env->wall_textures[index].ypadding = 0;
src/button.c:	new.pos = new_point(env->h_w - 111, env->h_h - 23);
src/button.c:	if (!env->sdl.fonts.lato20)
src/button.c:	new.font = env->sdl.fonts.lato20;
src/button.c:	if (!env->ui_textures[0].surface || !env->ui_textures[1].surface
src/button.c:		|| !env->ui_textures[2].surface)
src/button.c:	new.img_up = env->ui_textures[0].surface;
src/button.c:	new.img_pressed = env->ui_textures[1].surface;
src/button.c:	new.img_down = env->ui_textures[1].surface;
src/button.c:	new.img_hover = env->ui_textures[2].surface;
src/button.c:	if (!env->ui_textures[3].surface || !env->ui_textures[5].surface
src/button.c:		|| !env->ui_textures[5].surface)
src/button.c:	new.img_up = env->ui_textures[3].surface;
src/button.c:	new.img_pressed = env->ui_textures[4].surface;
src/button.c:	new.img_down = env->ui_textures[4].surface;
src/button.c:	new.img_hover = env->ui_textures[5].surface;
src/button.c:	if (!env->ui_textures[6].surface || !env->ui_textures[7].surface
src/button.c:		|| !env->ui_textures[8].surface)
src/button.c:	new.img_up = env->ui_textures[6].surface;
src/button.c:	new.img_pressed = env->ui_textures[7].surface;
src/button.c:	new.img_down = env->ui_textures[7].surface;
src/button.c:	new.img_hover = env->ui_textures[8].surface;
src/button.c:	if (!env->ui_textures[9].surface || !env->ui_textures[10].surface
src/button.c:		|| !env->ui_textures[11].surface)
src/button.c:	new.img_up = env->ui_textures[9].surface;
src/button.c:	new.img_pressed = env->ui_textures[10].surface;
src/button.c:	new.img_down = env->ui_textures[10].surface;
src/button.c:	new.img_hover = env->ui_textures[11].surface;
src/button.c:	if (!env->ui_textures[9].surface || !env->ui_textures[10].surface
src/button.c:		|| !env->ui_textures[11].surface)
src/button.c:	new.img_up = env->ui_textures[9].surface;
src/button.c:	new.img_pressed = env->ui_textures[10].surface;
src/button.c:	new.img_down = env->ui_textures[10].surface;
src/button.c:	new.img_hover = env->ui_textures[11].surface;
src/button.c:	if (!env->ui_textures[18].surface || !env->ui_textures[19].surface
src/button.c:		|| !env->ui_textures[20].surface)
src/button.c:	new.img_up = env->ui_textures[15].surface;
src/button.c:	new.img_pressed = env->ui_textures[16].surface;
src/button.c:	new.img_down = env->ui_textures[16].surface;
src/button.c:	new.img_hover = env->ui_textures[17].surface;
src/button.c:	if (!env->ui_textures[15].surface || !env->ui_textures[16].surface
src/button.c:		|| !env->ui_textures[17].surface)
src/button.c:	new.img_up = env->ui_textures[18].surface;
src/button.c:	new.img_pressed = env->ui_textures[19].surface;
src/button.c:	new.img_down = env->ui_textures[19].surface;
src/button.c:	new.img_hover = env->ui_textures[20].surface;
src/button_event.c:	if ((!is_mouse_on_button(*b, new_point(env->sdl.mx, env->sdl.my))
src/button_event.c:	if (!is_mouse_on_button(*b, new_point(env->sdl.mx, env->sdl.my)))
src/button_event.c:	if (env->inputs.left_click)
src/camera.c:	camera->hscale = env->h_w / camera->x2;
src/camera.c:	camera->vscale = env->h_h / camera->y2;
src/camera.c:		* env->sectors[i].wall_sprites[j].nb_sprites)))
src/camera.c:	if (!(camera->v[i][j].texture_scale = (t_v2*)ft_memalloc(sizeof(t_v2) * env->wall_textures[env->sectors[i].textures[j]].nb_maps)))
src/camera.c:	if (!(camera->v[i][j].texture_align = (t_v2*)ft_memalloc(sizeof(t_v2) * env->wall_textures[env->sectors[i].textures[j]].nb_maps)))
src/camera.c:	camera->size = env->nb_sectors;
src/camera.c:	if (!(camera->screen_pos = (int*)ft_memalloc(sizeof(int) * (env->w))))
src/camera.c:				malloc(sizeof(t_render_vertex*) * env->nb_sectors)))
src/camera.c:	if (!(camera->sector_computed = (int*)ft_memalloc(sizeof(int) * (env->nb_sectors))))
src/camera.c:	if (!(camera->sectors_size = (int*)ft_memalloc(sizeof(int) * (env->nb_sectors))))
src/camera.c:	if (!(camera->feet_y = (double*)ft_memalloc(sizeof(double) * (env->nb_sectors))))
src/camera.c:	if (!(camera->head_y = (double*)ft_memalloc(sizeof(double) * (env->nb_sectors))))
src/camera.c:	if (!(camera->xmin = (int*)ft_memalloc(sizeof(int) * (env->screen_sectors_size))))
src/camera.c:	if (!(camera->xmax = (int*)ft_memalloc(sizeof(int) * (env->screen_sectors_size))))
src/camera.c:	if (!(camera->screen_sectors = (int*)ft_memalloc(sizeof(int) * (env->screen_sectors_size))))
src/camera.c:	if (!(camera->rendered_sectors = (int*)ft_memalloc(sizeof(int) * (env->screen_sectors_size))))
src/camera.c:	while (i < env->nb_sectors)
src/camera.c:			* (env->sectors[i].nb_vertices + 1))))
src/camera.c:		camera->sectors_size[i] = env->sectors[i].nb_vertices;
src/camera.c:		while (j < env->sectors[i].nb_vertices)
src/ceiling_sprite_parser.c:		|| eparser->current_sector >= env->nb_sectors)
src/ceiling_sprite_parser.c:		env->sectors[eparser->current_sector].ceiling_sprites.nb_sprites)
src/change_editor_mode.c:	env->editor.selected_vertex = -1;
src/change_editor_mode.c:    env->editor.selected_sector = -1;
src/change_editor_mode.c:    env->editor.selected_player = -1;
src/change_editor_mode.c:    env->editor.selected_object = -1;
src/change_editor_mode.c:    env->selected_enemy = -1;
src/change_editor_mode.c:    env->editor.in_game = 1;
src/change_editor_mode.c:    env->screen_sectors_size = ft_min(env->nb_sectors, env->w);
src/change_editor_mode.c:    free_camera(&env->player.camera, env);
src/change_editor_mode.c:	init_camera_arrays(&env->player.camera, env);
src/change_editor_mode.c:	if (env->sector_list)
src/change_editor_mode.c:		ft_memdel((void**)&env->sector_list);
src/change_editor_mode.c:	env->sector_list = (int*)ft_memalloc(sizeof(int) * env->nb_sectors);
src/change_editor_mode.c:    update_camera_position(&env->player.camera);
src/change_editor_mode.c:    ft_bzero(&env->inputs, sizeof(env->inputs));
src/change_editor_mode.c:    env->options.mouse = 1;
src/change_editor_mode.c:	if (!env->editor.tab)
src/change_editor_mode.c:		SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/change_editor_mode.c:		SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/change_editor_mode.c:	env->editor.in_game = 0;
src/change_editor_mode.c:	env->selected_floor = -1;
src/change_editor_mode.c:	env->selected_ceiling = -1;
src/change_editor_mode.c:	env->selected_object = -1;
src/change_editor_mode.c:	env->selected_enemy = -1;
src/change_editor_mode.c:	env->selected_wall1 = -1;
src/change_editor_mode.c:	env->selected_wall2 = -1;
src/change_editor_mode.c:	env->inputs.enter = 0;
src/change_sprite_buttons.c:		if (env->selected_ceiling_sprite > 0)
src/change_sprite_buttons.c:			env->selected_ceiling_sprite--;
src/change_sprite_buttons.c:		env->editor.previous_sprite.state = UP;
src/change_sprite_buttons.c:		env->editor.previous_sprite.anim_state = REST;
src/change_sprite_buttons.c:		if (env->selected_ceiling_sprite <
src/change_sprite_buttons.c:		env->sectors[env->selected_ceiling].ceiling_sprites.nb_sprites - 1)
src/change_sprite_buttons.c:			env->selected_ceiling_sprite++;
src/change_sprite_buttons.c:		env->editor.next_sprite.state = UP;
src/change_sprite_buttons.c:		env->editor.next_sprite.anim_state = REST;
src/change_sprite_buttons.c:		if (env->selected_floor_sprite > 0)
src/change_sprite_buttons.c:			env->selected_floor_sprite--;
src/change_sprite_buttons.c:		env->editor.previous_sprite.state = UP;
src/change_sprite_buttons.c:		env->editor.previous_sprite.anim_state = REST;
src/change_sprite_buttons.c:		if (env->selected_floor_sprite <
src/change_sprite_buttons.c:		env->sectors[env->selected_floor].floor_sprites.nb_sprites - 1)
src/change_sprite_buttons.c:			env->selected_floor_sprite++;
src/change_sprite_buttons.c:		env->editor.next_sprite.state = UP;
src/change_sprite_buttons.c:		env->editor.next_sprite.anim_state = REST;
src/change_sprite_buttons.c:		if (env->selected_wall_sprite_sprite > 0)
src/change_sprite_buttons.c:			env->selected_wall_sprite_sprite--;
src/change_sprite_buttons.c:		env->editor.previous_sprite.state = UP;
src/change_sprite_buttons.c:		env->editor.previous_sprite.anim_state = REST;
src/change_sprite_buttons.c:		if (env->selected_wall_sprite_sprite <
src/change_sprite_buttons.c:		env->sectors[env->editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall].nb_sprites - 1)
src/change_sprite_buttons.c:			env->selected_wall_sprite_sprite++;
src/change_sprite_buttons.c:		env->editor.next_sprite.state = UP;
src/change_sprite_buttons.c:		env->editor.next_sprite.anim_state = REST;
src/change_sprite_buttons.c:	if (env->editor.next_sprite.state == DOWN)
src/change_sprite_buttons.c:		button = &env->editor.next_sprite_env;
src/change_sprite_buttons.c:	else if (env->editor.previous_sprite.state == DOWN)
src/change_sprite_buttons.c:		button = &env->editor.previous_sprite_env;
src/check_parsing.c:	ft_printf("{yellow}Vertex %d\n", env->nb_vertices);
src/check_parsing.c:	while (i < env->nb_vertices)
src/check_parsing.c:		ft_printf("vertex	%f %f\n", env->vertices[i].y, env->vertices[i].x);
src/check_parsing.c:	ft_printf("\nSector %d\n", env->nb_sectors);
src/check_parsing.c:	while (i < env->nb_sectors)
src/check_parsing.c:		ft_printf("sector	%f %f	", env->sectors[i].floor,
src/check_parsing.c:				env->sectors[i].ceiling);
src/check_parsing.c:		while (j < env->sectors[i].nb_vertices)
src/check_parsing.c:			ft_printf("%d ", env->sectors[i].vertices[j]);
src/check_parsing.c:		while (j < env->sectors[i].nb_vertices)
src/check_parsing.c:			ft_printf("%d ", env->sectors[i].neighbors[j]);
src/check_parsing.c:	ft_printf("\nplayer	%f %f	%f %d\n{reset}", env->player.pos.y,
src/check_parsing.c:			env->player.pos.x, env->player.camera.angle, env->player.sector);
src/check_vertex_event.c:		p[0] = new_v2(env->vertices[sector.vertices[i]].x,
src/check_vertex_event.c:		env->vertices[sector.vertices[i]].y);
src/check_vertex_event.c:		p[1] = new_v2(env->vertices[sector.vertices[i + 1]].x,
src/check_vertex_event.c:		env->vertices[sector.vertices[i + 1]].y);
src/check_vertex_event.c:		p[2] = new_v2(env->vertices[sector.vertices[i + 2]].x,
src/check_vertex_event.c:		env->vertices[sector.vertices[i + 2]].y);
src/check_vertex_event.c:	p[0] = new_v2(env->vertices[sector.vertices[i]].x,
src/check_vertex_event.c:	env->vertices[sector.vertices[i]].y);
src/check_vertex_event.c:	p[1] = new_v2(env->vertices[sector.vertices[0]].x,
src/check_vertex_event.c:	env->vertices[sector.vertices[0]].y);
src/check_vertex_event.c:	p[2] = new_v2(env->vertices[sector.vertices[1]].x,
src/check_vertex_event.c:	env->vertices[sector.vertices[1]].y);
src/check_vertex_event.c:	while (i < env->nb_sectors)
src/check_vertex_event.c:		while (j < env->sectors[i].nb_vertices)
src/check_vertex_event.c:			if (env->sectors[i].vertices[j] == vertex)
src/check_vertex_event.c:				update_sector_slope(env, &env->sectors[i]);
src/check_vertex_event.c:	prec = env->vertices[event->check_param.vertex].x;
src/check_vertex_event.c:	env->vertices[event->check_param.vertex].x = event->start_value
src/check_vertex_event.c:		env->vertices[event->check_param.vertex].x = event->goal;
src/check_vertex_event.c:	while (i < env->nb_sectors)
src/check_vertex_event.c:		while (j < env->sectors[i].nb_vertices)
src/check_vertex_event.c:			if (env->sectors[i].vertices[j] == event->check_param.vertex)
src/check_vertex_event.c:				if (!is_sector_convex(env, env->sectors[i])
src/check_vertex_event.c:					env->vertices[event->check_param.vertex].x = prec;
src/check_vertex_event.c:				if (intersects_with_wall(&env->sectors[i], env->player.pos, j,
src/check_vertex_event.c:					env->vertices[event->check_param.vertex].x = prec;
src/check_vertex_event.c:	env->vertices[event->check_param.vertex].x = prec;
src/check_vertex_event.c:	prec = env->vertices[event->check_param.vertex].y;
src/check_vertex_event.c:	env->vertices[event->check_param.vertex].y = event->start_value
src/check_vertex_event.c:		env->vertices[event->check_param.vertex].y = event->goal;
src/check_vertex_event.c:	while (i < env->nb_sectors)
src/check_vertex_event.c:		while (j < env->sectors[i].nb_vertices)
src/check_vertex_event.c:			if (env->sectors[i].vertices[j] == event->check_param.vertex)
src/check_vertex_event.c:				if (!is_sector_convex(env, env->sectors[i])
src/check_vertex_event.c:					env->vertices[event->check_param.vertex].y = prec;
src/check_vertex_event.c:				if (intersects_with_wall(&env->sectors[i], env->player.pos, j,
src/check_vertex_event.c:					env->vertices[event->check_param.vertex].y = prec;
src/check_vertex_event.c:	env->vertices[event->check_param.vertex].y = prec;
src/clear_image.c:	max = env->w * env->h;
src/clear_image.c:	pixels = env->sdl.texture_pixels;
src/clear_image.c:	zbuffer = env->zbuffer;
src/confirmation_box.c:	if (env->sdl.event.key.keysym.sym == SDLK_RETURN
src/confirmation_box.c:		env->editor.enter_locked = 1;
src/confirmation_box.c:	if (env->sdl.event.key.keysym.sym == SDLK_BACKSPACE
src/confirmation_box.c:	if (env->sdl.event.type == SDL_MOUSEBUTTONUP
src/confirmation_box.c:		&& env->sdl.event.button.button == SDL_BUTTON_LEFT)
src/confirmation_box.c:	if (env->inputs.enter
src/confirmation_box.c:	if (env->inputs.backspace
src/confirmation_box.c:		box->no.pos.x = env->w / 2 - box->size.x / 2;
src/confirmation_box.c:		box->no.pos.y = env->h / 2 + box->size.y / 2 - height - 5;
src/confirmation_box.c:		box->yes.pos.x = env->w / 2;
src/confirmation_box.c:		box->yes.pos.y = env->h / 2 + box->size.y / 2 - height - 5;
src/confirmation_box.c:		box->yes.pos.x = env->w / 2 - box->yes.size_up.x / 2;
src/confirmation_box.c:		box->yes.pos.y = env->h / 2 + box->size.y / 2 - height - 15;
src/confirmation_box.c:			new_point(env->w / 2 - box->size.x / 2,
src/confirmation_box.c:			env->h / 2 - box->size.y / 2),
src/confirmation_box.c:	print_text(new_point(env->h / 2 - box->size.y / 3,
src/confirmation_box.c:				env->w / 2 - text_size.x / 2),
src/create_portals.c:	while (i < env->nb_sectors)
src/create_portals.c:		while (j < env->sectors[i].nb_vertices)
src/create_portals.c:			env->sectors[i].neighbors[j] = -1;
src/create_portals.c:	while (i < env->sectors[sector.num].nb_vertices)
src/create_portals.c:				env->sectors[sector.num].neighbors[i - 1] = data.father;
src/create_portals.c:				env->sectors[data.father].neighbors[data.index] = sector.num;
src/create_portals.c:				env->sectors[sector.num].neighbors[sector.nb_vertices - 1] = data.father;
src/create_portals.c:				env->sectors[data.father].neighbors[data.index] = sector.num;
src/create_portals.c:				env->sectors[sector.num].neighbors[i] = data.father;
src/create_portals.c:				env->sectors[data.father].neighbors[data.index] = sector.num;
src/create_portals.c:	while (i < env->nb_sectors)
src/create_portals.c:			find_common_wall(env, env->sectors[i], data);
src/death.c:	while (i < env->nb_enemies)
src/death.c:		env->enemies[i].pos = env->enemies[i].enemies_init_data.pos;
src/death.c:		env->enemies[i].health = env->enemies[i].enemies_init_data.health;
src/death.c:		env->enemies[i].sector = env->enemies[i].enemies_init_data.sector;
src/death.c:		env->enemies[i].angle = env->enemies[i].enemies_init_data.angle;
src/death.c:		env->enemies[i].sprite = env->enemies[i].main_sprite;
src/death.c:		env->enemies[i].saw_player = 0;
src/death.c:	while (i < env->nb_objects)
src/death.c:		env->objects[i].sprite = env->objects[i].main_sprite;
src/death.c:		env->objects[i].pos = env->objects[i].object_init_data.pos;
src/death.c:		env->objects[i].sector = env->objects[i].object_init_data.sector;
src/death.c:		env->objects[i].angle = env->objects[i].object_init_data.angle;
src/death.c:	env->player.pos = env->player.player_init_data.pos;
src/death.c:	env->player.killed = 0;
src/death.c:	env->player.touched = 0;
src/death.c:	env->player.nb_shots = 0;
src/death.c:	env->player.accuracy = 0;
src/death.c:	env->player.health = env->player.player_init_data.health;
src/death.c:	env->player.sector = env->player.player_init_data.sector;
src/death.c:	env->player.camera = env->player.player_init_data.camera;
src/death.c:	env->player.highest_sect = find_highest_sector(env, new_movement(env->player.sector, env->player.size_2d, env->player.eyesight, env->player.pos));
src/death.c:	SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/death.c:	if (env->player.nb_shots > 0)
src/death.c:		env->player.accuracy = (int)((env->player.touched / env->player.nb_shots) * 100);
src/death.c:	if (!env->confirmation_box.state)
src/death.c:		while (++i < env->nb_enemies)
src/death.c:			env->enemies[i].state = RESTING;
src/death.c:		if (update_confirmation_box(&env->confirmation_box,
src/death.c:		env->confirmation_box.yes_action = respawn;
src/death.c:		env->confirmation_box.yes_target = env;
src/death.c:		env->confirmation_box.no_action = stop_game;
src/death.c:		env->confirmation_box.no_target = env;
src/delete_action.c:	delete_sector(env, env->editor.selected_sector);
src/delete_action.c:	env->editor.selected_sector = -1;
src/delete_action.c:	while (i < env->nb_sectors)
src/delete_action.c:		create_portals(env, env->sectors[i]);
src/delete_action.c:	env->player.sector = get_sector_global(env, env->player.pos);
src/delete_action.c:	if (env->editor.selected_vertex != -1
src/delete_action.c:			&& !current_vertices_contains(env, env->editor.selected_vertex))
src/delete_action.c:		delete_vertex(env, env->editor.selected_vertex);
src/delete_action.c:		env->editor.selected_vertex = -1;
src/delete_action.c:		while (i < env->nb_sectors)
src/delete_action.c:			create_portals(env, env->sectors[i]);
src/delete_action.c:	if (env->editor.selected_sector != -1 && !env->confirmation_box.state)
src/delete_action.c:		if (update_confirmation_box(&env->confirmation_box,
src/delete_action.c:		env->confirmation_box.yes_action = delete_selected_sector;
src/delete_action.c:		env->confirmation_box.yes_target = env;
src/delete_action.c:	if (env->editor.selected_object != -1)
src/delete_action.c:		delete_object(env, env->editor.selected_object);
src/delete_action.c:		env->editor.selected_object = -1;
src/delete_action.c:	env->inputs.del = 0;
src/delete_bullet_hole.c:	env->sectors[param->sector].ceiling_sprites.sprite = ft_delindex(
src/delete_bullet_hole.c:	env->sectors[param->sector].ceiling_sprites.sprite, sizeof(int)
src/delete_bullet_hole.c:	* env->sectors[param->sector].ceiling_sprites.nb_sprites,
src/delete_bullet_hole.c:	env->sectors[param->sector].ceiling_sprites.scale = ft_delindex(
src/delete_bullet_hole.c:	env->sectors[param->sector].ceiling_sprites.scale, sizeof(t_v2)
src/delete_bullet_hole.c:	* env->sectors[param->sector].ceiling_sprites.nb_sprites,
src/delete_bullet_hole.c:	env->sectors[param->sector].ceiling_sprites.pos = ft_delindex(
src/delete_bullet_hole.c:	env->sectors[param->sector].ceiling_sprites.pos, sizeof(t_v2)
src/delete_bullet_hole.c:	* env->sectors[param->sector].ceiling_sprites.nb_sprites,
src/delete_bullet_hole.c:	env->sectors[param->sector].ceiling_sprites.nb_sprites--;
src/delete_bullet_hole.c:	env->sectors[param->sector].floor_sprites.sprite = ft_delindex(
src/delete_bullet_hole.c:	env->sectors[param->sector].floor_sprites.sprite, sizeof(int)
src/delete_bullet_hole.c:	* env->sectors[param->sector].floor_sprites.nb_sprites,
src/delete_bullet_hole.c:	env->sectors[param->sector].floor_sprites.scale = ft_delindex(
src/delete_bullet_hole.c:	env->sectors[param->sector].floor_sprites.scale, sizeof(t_v2)
src/delete_bullet_hole.c:	* env->sectors[param->sector].floor_sprites.nb_sprites,
src/delete_bullet_hole.c:	env->sectors[param->sector].floor_sprites.pos = ft_delindex(
src/delete_bullet_hole.c:	env->sectors[param->sector].floor_sprites.pos, sizeof(t_v2)
src/delete_bullet_hole.c:	* env->sectors[param->sector].floor_sprites.nb_sprites,
src/delete_bullet_hole.c:	env->sectors[param->sector].floor_sprites.nb_sprites--;
src/delete_bullet_hole.c:	ft_lstpopfront(&env->sectors[param->sector].wall_bullet_holes[param->wall]);
src/delete_enemy.c:	env->enemies = ft_delindex(env->enemies,
src/delete_enemy.c:			sizeof(t_enemies) * env->nb_enemies,
src/delete_enemy.c:	env->nb_enemies--;
src/delete_enemy.c:	env->selected_enemy = -1;
src/delete_object.c:	env->objects = ft_delindex(env->objects,
src/delete_object.c:			sizeof(t_object) * env->nb_objects,
src/delete_object.c:	env->nb_objects--;
src/delete_object.c:	env->editor.selected_object = -1;
src/delete_sector.c:	while (i < env->nb_sectors)
src/delete_sector.c:		while (j < env->sectors[i].nb_vertices)
src/delete_sector.c:			if (env->sectors[i].neighbors[j] >= sector)
src/delete_sector.c:				env->sectors[i].neighbors[j]--;
src/delete_sector.c:	free_sector(&env->sectors[sector]);
src/delete_sector.c:	env->sectors = ft_delindex(env->sectors,
src/delete_sector.c:			 sizeof(t_sector) * env->nb_sectors,
src/delete_sector.c:	env->nb_sectors--;
src/delete_sector.c:	while (i < env->nb_sectors)
src/delete_sector.c:		env->sectors[i].num--;
src/delete_sector.c:	while (i < env->nb_sectors)
src/delete_sector.c:		if (env->sectors[i].nb_vertices < 3)
src/delete_vertex.c:	while (i < env->nb_sectors)
src/delete_vertex.c:		while (j < env->sectors[i].nb_vertices)
src/delete_vertex.c:			if (env->sectors[i].vertices[j] == vertex)
src/delete_vertex.c:					env->sectors[i].vertices = ft_delindex(env->sectors[i].vertices,
src/delete_vertex.c:							sizeof(int) * (env->sectors[i].nb_vertices + 1),
src/delete_vertex.c:					env->sectors[i].nb_vertices--;
src/delete_vertex.c:			if (env->sectors[i].vertices[j] > vertex)
src/delete_vertex.c:				env->sectors[i].vertices[j]--;
src/delete_vertex.c:		env->sectors[i].vertices[env->sectors[i].nb_vertices] = env->sectors[i].vertices[0];
src/delete_vertex.c:	env->vertices = ft_delindex(env->vertices,
src/delete_vertex.c:			sizeof(t_vertex) * env->nb_vertices,
src/delete_vertex.c:	env->nb_vertices--;
src/delete_vertex.c:	while (i < env->nb_vertices)
src/delete_vertex.c:		env->vertices[i].num--;
src/delete_vertex.c:	if (env->nb_sectors)
src/delete_vertex.c:	env->editor.selected_vertex = -1;
src/delete_vertex.c:	while (i < env->nb_vertices)
src/doom.c:	if (env->player.sector != -1
src/doom.c:			&& env->sectors[env->player.sector].stand_events
src/doom.c:			&& env->sectors[env->player.sector].nb_stand_events
src/doom.c:			&& !env->player.state.jump)
src/doom.c:		if (start_event(&env->sectors[env->player.sector].stand_events,
src/doom.c:					&env->sectors[env->player.sector].nb_stand_events, env))
src/doom.c:	if (env->global_events && env->nb_global_events && env->global_events)
src/doom.c:		if (start_event(&env->global_events,
src/doom.c:					&env->nb_global_events, env))
src/doom.c:	if (env->wall_bullet_holes_events && env->nb_wall_bullet_holes_events
src/doom.c:			&& env->wall_bullet_holes_events)
src/doom.c:		if (start_event(&env->wall_bullet_holes_events,
src/doom.c:					&env->nb_wall_bullet_holes_events, env))
src/doom.c:	if (env->floor_bullet_holes_events && env->floor_bullet_holes_events
src/doom.c:			&& env->nb_floor_bullet_holes_events)
src/doom.c:		if (start_event(&env->floor_bullet_holes_events,
src/doom.c:					&env->nb_floor_bullet_holes_events, env))
src/doom.c:	if (env->ceiling_bullet_holes_events && env->ceiling_bullet_holes_events
src/doom.c:			&& env->nb_ceiling_bullet_holes_events)
src/doom.c:		if (start_event(&env->ceiling_bullet_holes_events,
src/doom.c:					&env->nb_ceiling_bullet_holes_events, env))
src/doom.c:	if (env->player.changed_sector)
src/doom.c:		if (env->player.sector != -1 && env->sectors[env->player.sector].nb_walk_in_events > 0)
src/doom.c:			start_event(&env->sectors[env->player.sector].walk_in_events, &env->sectors[env->player.sector].nb_walk_in_events, env);
src/doom.c:		if (env->player.old_sector != -1
src/doom.c:				&& env->sectors[env->player.old_sector].nb_walk_out_events > 0)
src/doom.c:			start_event(&env->sectors[env->player.old_sector].walk_out_events,
src/doom.c:					&env->sectors[env->player.old_sector].nb_walk_out_events, env);
src/doom.c:		env->player.changed_sector = 0;
src/doom.c:		env->player.old_sector = -1;
src/doom.c:	while (env->running)
src/doom.c:		//env->player.health = 100;
src/doom.c:		SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/doom.c:		SDL_GetMouseState(&env->sdl.mx, &env->sdl.my);
src/doom.c:		if (env->first_frame)
src/doom.c:			while (SDL_PollEvent(&env->sdl.event))
src/doom.c:				if (env->sdl.event.type == SDL_QUIT || (env->sdl.event.type == SDL_KEYUP && env->sdl.event.key.keysym.sym == SDLK_ESCAPE))
src/doom.c:					env->running = 0;
src/doom.c:				else if (env->sdl.event.type == SDL_KEYDOWN
src/doom.c:						|| env->sdl.event.type == SDL_KEYUP || env->sdl.event.type == SDL_MOUSEBUTTONDOWN
src/doom.c:						|| env->sdl.event.type == SDL_MOUSEBUTTONUP || env->sdl.event.type == SDL_MOUSEWHEEL)
src/doom.c:				if (env->sdl.event.type == SDL_KEYUP
src/doom.c:					|| env->sdl.event.type == SDL_MOUSEBUTTONUP)
src/doom.c:				if (env->sdl.event.type == SDL_MOUSEWHEEL && !env->weapon_change.on_going &&
src/doom.c:					!env->shot.on_going && env->player.health > 0)
src/doom.c:			if (env->player.health > 0)
src/doom.c:				objects_collision(env, env->player.pos);
src/doom.c:			if (env->events)
src/doom.c:			if (env->player.health <= 0)
src/doom.c:			if (env->confirmation_box.state)
src/doom.c:				if (confirmation_box_keys(&env->confirmation_box, env))
src/doom.c:		if (env->menu_start)
src/doom.c:			if (env->option)
src/doom.c:		FMOD_System_Update(env->sound.system);
src/draw_ceiling.c:	pixels = env->sdl.texture_pixels;
src/draw_ceiling.c:	zbuffer = env->zbuffer;
src/draw_ceiling.c:		coord = vline.x + env->w * vline.start;
src/draw_ceiling.c:		if (env->editor.select && vline.x == env->h_w && vline.start == env->h_h)
src/draw_ceiling.c:			env->selected_wall1 = -1;
src/draw_ceiling.c:			env->selected_wall2 = -1;
src/draw_ceiling.c:			env->selected_ceiling = render.sector;
src/draw_ceiling.c:			env->selected_floor = -1;
src/draw_ceiling.c:			env->selected_object = -1;
src/draw_ceiling.c:			env->selected_enemy = -1;
src/draw_ceiling.c:			env->editor.selected_wall = -1;
src/draw_ceiling.c:		if (env->editor.in_game && !env->editor.select && env->selected_floor == render.sector)
src/draw_ceiling.c:	vline.start = env->ymin[vline.x];
src/draw_ceiling.c:	vline.end = ft_min(render.current_ceiling, env->ymax[vline.x]);
src/draw_ceiling.c:		if (!env->options.lighting || (!sector.brightness && !sector.intensity))
src/draw_ceiling_sprites.c:	if (!env->options.lighting || (!sector.brightness && !sector.intensity))
src/draw_ceiling_sprites_both.c:	i = env->ymin[render.x];
src/draw_ceiling_sprites_both.c:	end = ft_min(render.current_ceiling, env->ymax[render.x]);
src/draw_ceiling_sprites_both.c:	pixels = env->sdl.texture_pixels;
src/draw_ceiling_sprites_both.c:		coord = render.x + env->w * i;
src/draw_ceiling_sprites_both.c:		if (z >= env->zbuffer[coord])
src/draw_ceiling_sprites_both.c:			sprite = env->object_sprites[sector.ceiling_sprites.sprite[j]];
src/draw_ceiling_sprites_both.c:			sprite_pixels = (Uint32*)env->sprite_textures[sprite.texture].str;
src/draw_ceiling_sprites_both.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_ceiling_sprites_both.c:				if (env->editor.select && render.x == env->h_w && i == env->h_h)
src/draw_ceiling_sprites_both.c:					env->selected_ceiling = sector.num;
src/draw_ceiling_sprites_both.c:					env->selected_ceiling_sprite = j;
src/draw_ceiling_sprites_both.c:					env->editor.sprite_tab.state = DOWN;
src/draw_ceiling_sprites_both.c:					env->editor.sprite_tab.anim_state = PRESSED;
src/draw_ceiling_sprites_both.c:				env->sprite_textures[sprite.texture].surface->w
src/draw_ceiling_sprites_both.c:				if (!env->editor.select && env->selected_ceiling == sector.num
src/draw_ceiling_sprites_both.c:					&& env->selected_ceiling_sprite == j)
src/draw_ceiling_sprites_both.c:				env->zbuffer[coord] = z;
src/draw_ceiling_sprites_brightness.c:	i = env->ymin[render.x];
src/draw_ceiling_sprites_brightness.c:	end = ft_min(render.current_ceiling, env->ymax[render.x]);
src/draw_ceiling_sprites_brightness.c:	pixels = env->sdl.texture_pixels;
src/draw_ceiling_sprites_brightness.c:		coord = render.x + env->w * i;
src/draw_ceiling_sprites_brightness.c:		if (z >= env->zbuffer[coord])
src/draw_ceiling_sprites_brightness.c:			sprite = env->object_sprites[sector.ceiling_sprites.sprite[j]];
src/draw_ceiling_sprites_brightness.c:			sprite_pixels = (Uint32*)env->sprite_textures[sprite.texture].str;
src/draw_ceiling_sprites_brightness.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_ceiling_sprites_brightness.c:				if (env->editor.select && render.x == env->h_w && i == env->h_h)
src/draw_ceiling_sprites_brightness.c:					env->selected_ceiling = sector.num;
src/draw_ceiling_sprites_brightness.c:					env->selected_ceiling_sprite = j;
src/draw_ceiling_sprites_brightness.c:					env->editor.sprite_tab.state = DOWN;
src/draw_ceiling_sprites_brightness.c:					env->editor.sprite_tab.anim_state = PRESSED;
src/draw_ceiling_sprites_brightness.c:				+ env->sprite_textures[sprite.texture].surface->w 
src/draw_ceiling_sprites_brightness.c:				if (!env->editor.select && env->selected_ceiling == sector.num
src/draw_ceiling_sprites_brightness.c:					&& env->selected_ceiling_sprite == j)
src/draw_ceiling_sprites_brightness.c:				env->zbuffer[coord] = z;
src/draw_ceiling_sprites_color.c:	i = env->ymin[render.x];
src/draw_ceiling_sprites_color.c:	end = ft_min(render.current_ceiling, env->ymax[render.x]);
src/draw_ceiling_sprites_color.c:	pixels = env->sdl.texture_pixels;
src/draw_ceiling_sprites_color.c:		coord = render.x + env->w * i;
src/draw_ceiling_sprites_color.c:		if (z >= env->zbuffer[coord])
src/draw_ceiling_sprites_color.c:			sprite = env->object_sprites[sector.ceiling_sprites.sprite[j]];
src/draw_ceiling_sprites_color.c:			sprite_pixels = (Uint32*)env->sprite_textures[sprite.texture].str;
src/draw_ceiling_sprites_color.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_ceiling_sprites_color.c:				if (env->editor.select && render.x == env->h_w && i == env->h_h)
src/draw_ceiling_sprites_color.c:					env->selected_ceiling = sector.num;
src/draw_ceiling_sprites_color.c:					env->selected_ceiling_sprite = j;
src/draw_ceiling_sprites_color.c:					env->editor.sprite_tab.state = DOWN;
src/draw_ceiling_sprites_color.c:					env->editor.sprite_tab.anim_state = PRESSED;
src/draw_ceiling_sprites_color.c:				+ env->sprite_textures[sprite.texture].surface->w
src/draw_ceiling_sprites_color.c:				if (!env->editor.select && env->selected_ceiling == sector.num
src/draw_ceiling_sprites_color.c:					&& env->selected_ceiling_sprite == j)
src/draw_ceiling_sprites_color.c:				env->zbuffer[coord] = z;
src/draw_ceiling_sprites_no_light.c:	i = env->ymin[render.x];
src/draw_ceiling_sprites_no_light.c:	end = ft_min(render.current_ceiling, env->ymax[render.x]);
src/draw_ceiling_sprites_no_light.c:	pixels = env->sdl.texture_pixels;
src/draw_ceiling_sprites_no_light.c:		coord = render.x + env->w * i;
src/draw_ceiling_sprites_no_light.c:		if (z >= env->zbuffer[coord])
src/draw_ceiling_sprites_no_light.c:			sprite = env->object_sprites[sector.ceiling_sprites.sprite[j]];
src/draw_ceiling_sprites_no_light.c:			sprite_pixels = (Uint32*)env->sprite_textures[sprite.texture].str;
src/draw_ceiling_sprites_no_light.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_ceiling_sprites_no_light.c:				if (env->editor.select && render.x == env->h_w && i == env->h_h)
src/draw_ceiling_sprites_no_light.c:					env->selected_ceiling = sector.num;
src/draw_ceiling_sprites_no_light.c:					env->selected_ceiling_sprite = j;
src/draw_ceiling_sprites_no_light.c:					env->editor.sprite_tab.state = DOWN;
src/draw_ceiling_sprites_no_light.c:					env->editor.sprite_tab.anim_state = PRESSED;
src/draw_ceiling_sprites_no_light.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_ceiling_sprites_no_light.c:				if (!env->editor.select && env->selected_ceiling == sector.num
src/draw_ceiling_sprites_no_light.c:					&& env->selected_ceiling_sprite == j)
src/draw_ceiling_sprites_no_light.c:				env->zbuffer[coord] = z;
src/draw_circle.c:		if (p1.x >= 400 && p1.x < env->w && p1.y >= 0 && p1.y < env->h)
src/draw_circle.c:		env->sdl.texture_pixels[p1.x + p1.y * env->w] = color;
src/draw_circle.c:		if (p1.x >= 400 && p1.x < env->w && p1.y >= 0 && p1.y < env->h)
src/draw_circle.c:			env->sdl.texture_pixels[p1.x + p1.y * env->w] = color;
src/draw_circle.c:		if (circle.center.x + x >= 400 && circle.center.x + x < env->w
src/draw_circle.c:				&& circle.center.y + y >= 0 && circle.center.y + y < env->h)
src/draw_circle.c:		env->sdl.texture_pixels[circle.center.x + x + env->w * (circle.center.y + y)] = circle.line_color;
src/draw_circle.c:		if (circle.center.x - x >= 400 && circle.center.x - x < env->w
src/draw_circle.c:				&& circle.center.y + y >= 0 && circle.center.y + y < env->h)
src/draw_circle.c:		env->sdl.texture_pixels[circle.center.x - x + env->w * (circle.center.y + y)] = circle.line_color;
src/draw_circle.c:		if (circle.center.x + x >= 400 && circle.center.x + x < env->w
src/draw_circle.c:				&& circle.center.y - y >= 0 && circle.center.y - y < env->h)
src/draw_circle.c:		env->sdl.texture_pixels[circle.center.x + x + env->w * (circle.center.y - y)] = circle.line_color;
src/draw_circle.c:		if (circle.center.x - x >= 400 && circle.center.x - x < env->w
src/draw_circle.c:				&& circle.center.y - y >= 0 && circle.center.y - y < env->h)
src/draw_circle.c:		env->sdl.texture_pixels[circle.center.x - x + env->w * (circle.center.y - y)] = circle.line_color;
src/draw_circle.c:		if (circle.center.x + y >= 400 && circle.center.x + y < env->w
src/draw_circle.c:				&& circle.center.y + x >= 0 && circle.center.y + x < env->h)
src/draw_circle.c:		env->sdl.texture_pixels[circle.center.x + y + env->w * (circle.center.y + x)] = circle.line_color;
src/draw_circle.c:		if (circle.center.x - y >= 400 && circle.center.x - y < env->w
src/draw_circle.c:				&& circle.center.y + x >= 0 && circle.center.y + x < env->h)
src/draw_circle.c:		env->sdl.texture_pixels[circle.center.x - y + env->w * (circle.center.y + x)] = circle.line_color;
src/draw_circle.c:		if (circle.center.x + y >= 400 && circle.center.x + y < env->w
src/draw_circle.c:				&& circle.center.y - x >= 0 && circle.center.y - x < env->h)
src/draw_circle.c:		env->sdl.texture_pixels[circle.center.x + y + env->w * (circle.center.y - x)] = circle.line_color;
src/draw_circle.c:		if (circle.center.x - y >= 400 && circle.center.x - y < env->w
src/draw_circle.c:				&& circle.center.y - x >= 0 && circle.center.y - x < env->h)
src/draw_circle.c:		env->sdl.texture_pixels[circle.center.x - y + env->w * (circle.center.y - x)] = circle.line_color;
src/draw_circle_free.c:		if (p1.x >= 0 && p1.x < env->w && p1.y >= 0 && p1.y < env->h)
src/draw_circle_free.c:		env->sdl.texture_pixels[p1.x + p1.y * env->w] = color;
src/draw_circle_free.c:		if (p1.x >= 0 && p1.x < env->w && p1.y >= 0 && p1.y < env->h)
src/draw_circle_free.c:			env->sdl.texture_pixels[p1.x + p1.y * env->w] = color;
src/draw_circle_free.c:		if (circle.center.x + x >= 0 && circle.center.x + x < env->w
src/draw_circle_free.c:				&& circle.center.y + y >= 0 && circle.center.y + y < env->h)
src/draw_circle_free.c:		env->sdl.texture_pixels[circle.center.x + x + env->w * (circle.center.y + y)] = circle.line_color;
src/draw_circle_free.c:		if (circle.center.x - x >= 0 && circle.center.x - x < env->w
src/draw_circle_free.c:				&& circle.center.y + y >= 0 && circle.center.y + y < env->h)
src/draw_circle_free.c:		env->sdl.texture_pixels[circle.center.x - x + env->w * (circle.center.y + y)] = circle.line_color;
src/draw_circle_free.c:		if (circle.center.x + x >= 0 && circle.center.x + x < env->w
src/draw_circle_free.c:				&& circle.center.y - y >= 0 && circle.center.y - y < env->h)
src/draw_circle_free.c:		env->sdl.texture_pixels[circle.center.x + x + env->w * (circle.center.y - y)] = circle.line_color;
src/draw_circle_free.c:		if (circle.center.x - x >= 0 && circle.center.x - x < env->w
src/draw_circle_free.c:				&& circle.center.y - y >= 0 && circle.center.y - y < env->h)
src/draw_circle_free.c:		env->sdl.texture_pixels[circle.center.x - x + env->w * (circle.center.y - y)] = circle.line_color;
src/draw_circle_free.c:		if (circle.center.x + y >= 0 && circle.center.x + y < env->w
src/draw_circle_free.c:				&& circle.center.y + x >= 0 && circle.center.y + x < env->h)
src/draw_circle_free.c:		env->sdl.texture_pixels[circle.center.x + y + env->w * (circle.center.y + x)] = circle.line_color;
src/draw_circle_free.c:		if (circle.center.x - y >= 0 && circle.center.x - y < env->w
src/draw_circle_free.c:				&& circle.center.y + x >= 0 && circle.center.y + x < env->h)
src/draw_circle_free.c:		env->sdl.texture_pixels[circle.center.x - y + env->w * (circle.center.y + x)] = circle.line_color;
src/draw_circle_free.c:		if (circle.center.x + y >= 0 && circle.center.x + y < env->w
src/draw_circle_free.c:				&& circle.center.y - x >= 0 && circle.center.y - x < env->h)
src/draw_circle_free.c:		env->sdl.texture_pixels[circle.center.x + y + env->w * (circle.center.y - x)] = circle.line_color;
src/draw_circle_free.c:		if (circle.center.x - y >= 0 && circle.center.x - y < env->w
src/draw_circle_free.c:				&& circle.center.y - x >= 0 && circle.center.y - x < env->h)
src/draw_circle_free.c:		env->sdl.texture_pixels[circle.center.x - y + env->w * (circle.center.y - x)] = circle.line_color;
src/draw_editor_tabs.c:	if (env->selected_wall_sprite_wall == -1
src/draw_editor_tabs.c:		&& (env->selected_floor != -1 || env->editor.selected_sector != -1))
src/draw_editor_tabs.c:	else if (env->selected_wall_sprite_wall != -1)
src/draw_editor_tabs.c:	else if (env->selected_floor == -1 && env->editor.selected_sector == -1)
src/draw_editor_tabs.c:	if (env->selected_wall_sprite_wall != -1)
src/draw_editor_tabs.c:	else if (env->selected_ceiling_sprite != -1)
src/draw_editor_tabs.c:	else if (env->selected_floor_sprite != -1)
src/draw_editor_tabs.c:	if (env->selected_floor_sprite != -1 || env->selected_wall_sprite_sprite != -1
src/draw_editor_tabs.c:	|| env->selected_ceiling_sprite != -1)
src/draw_editor_tabs.c:		draw_button(env, env->editor.next_sprite);
src/draw_editor_tabs.c:		draw_button(env, env->editor.previous_sprite);
src/draw_editor_tabs.c:		draw_button(env, env->editor.sprite_background);
src/draw_editor_tabs.c:		draw_button(env, env->editor.current_sprite_selection);
src/draw_editor_tabs.c:	if (env->editor.selected_vertex != -1)
src/draw_editor_tabs.c:	if (env->editor.selected_object != -1 || env->selected_object != -1)
src/draw_editor_tabs.c:	else if (env->selected_enemy != -1)
src/draw_editor_tabs.c:	else if (env->editor.selected_player != -1)
src/draw_editor_tabs.c:	else if (env->selected_ceiling != -1)
src/draw_editor_tabs.c:	else if (env->selected_floor != -1)
src/draw_editor_tabs.c:	else if (env->editor.selected_wall != -1
src/draw_editor_tabs.c:	&& env->editor.selected_sector != -1)
src/draw_editor_tabs.c:	else if(env->selected_wall_sprite_sprite != -1)
src/draw_editor_tabs.c:	/*if (env->editor.selected_vertex != -1)
src/draw_editor_tabs.c:	if (env->editor.selected_object != -1 || env->selected_object != -1)
src/draw_editor_tabs.c:	else if (env->editor.selected_sector != -1 && !env->editor.in_game)
src/draw_editor_tabs.c:	else if (env->selected_ceiling != -1)
src/draw_editor_tabs.c:	else if (env->selected_floor != -1)
src/draw_editor_tabs.c:	else if (env->editor.selected_player != -1)
src/draw_editor_tabs.c:	else if (env->editor.selected_wall != -1 && env->editor.selected_sector != -1)
src/draw_editor_tabs.c:	else if (env->selected_enemy != -1)
src/draw_editor_tabs.c:				env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/draw_editor_tabs.c:	print_text(new_point(450, 280), new_printable_text(ft_sitoa(env->editor.selected_vertex),
src/draw_editor_tabs.c:				env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/draw_editor_tabs.c:	print_text(new_point(490, 50), new_printable_text("Coordonates:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/draw_editor_tabs.c:	print_text(new_point(540, 80), new_printable_text("X:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/draw_editor_tabs.c:	print_text(new_point(540, 230), new_printable_text(ft_sitoa(env->vertices[env->editor.selected_vertex].x), env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/draw_editor_tabs.c:	print_text(new_point(580, 80), new_printable_text("Y:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/draw_editor_tabs.c:	print_text(new_point(580, 230), new_printable_text(ft_sitoa(env->vertices[env->editor.selected_vertex].y), env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/draw_editor_tabs.c:	if ((env->editor.in_game && (env->selected_ceiling_sprite == -1
src/draw_editor_tabs.c:	&& env->selected_floor_sprite == -1 && env->selected_wall_sprite_sprite == -1)
src/draw_editor_tabs.c:	&& (env->editor.selected_object != - 1 || env->editor.selected_wall != - 1 ||
src/draw_editor_tabs.c:	env->selected_floor != -1 || env->selected_enemy != -1 || env->selected_ceiling != -1 ))
src/draw_editor_tabs.c:	|| (!env->editor.in_game && (env->editor.selected_sector != -1 || env->editor.selected_player != -1
src/draw_editor_tabs.c:	|| env->editor.selected_object != -1 || env->selected_enemy != -1)))
src/draw_editor_tabs.c:		draw_button(env, env->editor.general_tab);
src/draw_editor_tabs.c:	if ((!env->editor.in_game && (env->editor.selected_player != -1 || env->selected_enemy != -1
src/draw_editor_tabs.c:	|| env->editor.selected_object != -1)) || (env->editor.in_game
src/draw_editor_tabs.c:	&& (env->editor.selected_object != - 1 || env->editor.selected_wall != - 1 ||
src/draw_editor_tabs.c:	env->editor.selected_wall_sprite != -1 || env->selected_floor_sprite != -1 ||
src/draw_editor_tabs.c:	env->selected_floor != -1 || env->selected_enemy != -1
src/draw_editor_tabs.c:	|| env->selected_ceiling != -1 || env->selected_wall_sprite_sprite != -1 
src/draw_editor_tabs.c:	|| env->selected_ceiling != -1)))
src/draw_editor_tabs.c:		draw_button(env, env->editor.sector_tab);
src/draw_editor_tabs.c:		draw_button(env, env->editor.events_tab);
src/draw_editor_tabs.c:	if (env->editor.in_game && env->editor.tab &&
src/draw_editor_tabs.c:	(env->selected_ceiling_sprite != -1 || env->selected_floor_sprite != -1
src/draw_editor_tabs.c:	|| env->selected_wall_sprite_sprite != -1))
src/draw_editor_tabs.c:		draw_button(env, env->editor.sprite_tab);
src/draw_editor_tabs.c:	if (env->editor.sector_tab.state == DOWN)
src/draw_editor_tabs.c:	else if (env->editor.sprite_tab.state == DOWN)
src/draw_editor_tabs.c:	else if (env->editor.general_tab.state == DOWN)
src/draw_editor_tabs.c:		if (env->editor.events_tab.state == DOWN)
src/draw_editor_tabs.c:	if (env->editor.draw_selection_tab)
src/draw_enemies.c:	while (i < env->nb_enemies)
src/draw_enemies.c:		if (env->enemies[i].sector == env->sectors[env->selected_floor].num)
src/draw_enemies.c:			env->enemies[i].pos.z = get_floor_at_pos(env->sectors[env->selected_floor], new_v3(env->enemies[i].pos.x, env->enemies[i].pos.y, 0), env);
src/draw_enemies.c:	sprite = env->enemy_sprites[enemy.sprite];
src/draw_enemies.c:	texture = env->sprite_textures[sprite.texture];
src/draw_enemies.c:	pixels = env->sdl.texture_pixels;
src/draw_enemies.c:	zbuffer = env->zbuffer;
src/draw_enemies.c:	sector = env->sectors[enemy.sector];
src/draw_enemies.c:			if ((enemy.rotated_pos.z < zbuffer[x + y * env->w]
src/draw_enemies.c:				env->enemies[enemy.num].seen = 1;
src/draw_enemies.c:				if (env->editor.select && x == env->h_w && y == env->h_h)
src/draw_enemies.c:					env->selected_enemy = enemy.num;
src/draw_enemies.c:				if (!env->options.lighting
src/draw_enemies.c:					pixels[x + y * env->w] = texture_pixels[textx
src/draw_enemies.c:					pixels[x + y * env->w] = apply_light_color(
src/draw_enemies.c:					pixels[x + y * env->w] = apply_light_brightness(
src/draw_enemies.c:					pixels[x + y * env->w] = apply_light_both(
src/draw_enemies.c:				if (env->enemies[enemy.num].hit)
src/draw_enemies.c:					pixels[x + y * env->w] = blend_alpha(pixels[x + y * env->w], 0xFFFF0000, enemy_hurt(env, enemy.num));
src/draw_enemies.c:				if (!env->editor.select && env->selected_enemy == enemy.num)
src/draw_enemies.c:					pixels[x + y * env->w] = blend_alpha(pixels[x + y * env->w], 0x1abc9c, 128);
src/draw_enemies.c:				zbuffer[x + y * env->w] = enemy.rotated_pos.z;
src/draw_enemies.c:		enemy->sprite = env->enemy_sprites[enemy->sprite].death_counterpart;
src/draw_enemies.c:	sprite = env->enemy_sprites[enemy->sprite];	
src/draw_enemies.c:	size.x = env->w * enemy->scale / enemy->rotated_pos.z;
src/draw_enemies.c:	orender.xstart = ft_clamp(orender.x1, 0, env->w - 1);
src/draw_enemies.c:	orender.ystart = ft_clamp(orender.y1 + 1, 0, env->h - 1);
src/draw_enemies.c:	orender.xend = ft_clamp(orender.x2, 0, env->w - 1);
src/draw_enemies.c:	orender.yend = ft_clamp(orender.y2, 0, env->h - 1);
src/draw_enemies.c:		enemies_threads[i].xstart = env->nb_enemies / (double)THREADS * i;
src/draw_enemies.c:		enemies_threads[i].xend = env->nb_enemies / (double)THREADS * (i + 1);
src/draw_enemies.c:	while (i < env->nb_enemies)
src/draw_enemies.c:		if (env->enemies[i].state == FIRING)
src/draw_enemies.c:		if (env->enemies[i].rotated_pos.z > 1 && env->enemies[i].exists)
src/draw_enemies.c:			env->enemies[i].seen = 0;
src/draw_enemies.c:			if (!env->editor.in_game)
src/draw_enemies.c:				if (env->enemies[i].health <= 0)
src/draw_enemies.c:					env->enemy_sprites[env->enemies[i].sprite].nb_death_sprites);
src/draw_enemies.c:				if (env->enemies[i].state == RESTING)
src/draw_enemies.c:				else if (env->enemies[i].state == PURSUING)
src/draw_enemies.c:			if (env->enemies[i].exists)
src/draw_enemies.c:				if (draw_enemy(camera, &env->enemies[i], env, dying_sprite))
src/draw_explosion.c:	sprite = env->object_sprites[explosion.sprite];
src/draw_explosion.c:	texture = env->sprite_textures[sprite.texture];
src/draw_explosion.c:	pixels = env->sdl.texture_pixels;
src/draw_explosion.c:	zbuffer = env->zbuffer;
src/draw_explosion.c:				pixels[x + y * env->w] = texture_pixels[textx + texty * texture.surface->w];
src/draw_explosion.c:				zbuffer[x + y * env->w] = explosion.rotated_pos.z;
src/draw_explosion.c:	sprite = env->object_sprites[explosion->sprite];
src/draw_explosion.c:	size.x = env->w * explosion->scale / explosion->rotated_pos.z;
src/draw_explosion.c:	erender.xstart = ft_clamp(erender.x1, 0, env->w - 1);
src/draw_explosion.c:	erender.ystart = ft_clamp(erender.y1 + 1, 0, env->h - 1);
src/draw_explosion.c:	erender.xend = ft_clamp(erender.x2, 0, env->w - 1);
src/draw_explosion.c:	erender.yend = ft_clamp(erender.y2, 0, env->h - 1);
src/draw_explosion.c:	tmp = env->explosions;
src/draw_explosion.c:			sprite_index = explosion_animation(env, explosion, env->object_sprites[explosion->sprite].nb_death_sprites);
src/draw_explosion.c:				tmp = ft_lstdelnode(&env->explosions, tmp);
src/draw_floor.c:	pixels = env->sdl.texture_pixels;
src/draw_floor.c:		coord = vline.x + env->w * vline.start;
src/draw_floor.c:		if (env->editor.select && vline.x == env->h_w && vline.start == env->h_h)
src/draw_floor.c:			env->selected_wall1 = -1;
src/draw_floor.c:			env->selected_wall2 = -1;
src/draw_floor.c:			env->selected_floor = render.sector;
src/draw_floor.c:			env->selected_ceiling = -1;
src/draw_floor.c:			env->selected_object = -1;
src/draw_floor.c:			env->selected_enemy = -1;
src/draw_floor.c:			env->editor.selected_wall = -1;
src/draw_floor.c:		if (env->editor.in_game && !env->editor.select && env->selected_floor == render.sector)
src/draw_floor.c:	vline.end = env->ymax[vline.x];
src/draw_floor.c:		if (!env->options.lighting || (!sector.brightness && !sector.intensity))
src/draw_floor_sprites.c:	if (!env->options.lighting || (!sector.brightness && !sector.intensity))
src/draw_floor_sprites_both.c:	end = env->ymax[render.x];
src/draw_floor_sprites_both.c:	pixels = env->sdl.texture_pixels;
src/draw_floor_sprites_both.c:		coord = render.x + env->w * i;
src/draw_floor_sprites_both.c:		if (z >= env->zbuffer[coord])
src/draw_floor_sprites_both.c:			sprite = env->object_sprites[sector.floor_sprites.sprite[j]];
src/draw_floor_sprites_both.c:			sprite_pixels = (Uint32*)env->sprite_textures[sprite.texture].str;
src/draw_floor_sprites_both.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_floor_sprites_both.c:				if (env->editor.select && render.x == env->h_w && i == env->h_h)
src/draw_floor_sprites_both.c:					env->selected_floor = sector.num;
src/draw_floor_sprites_both.c:					env->selected_floor_sprite = j;
src/draw_floor_sprites_both.c:					env->editor.sprite_tab.state = DOWN;
src/draw_floor_sprites_both.c:					env->editor.sprite_tab.anim_state = PRESSED;
src/draw_floor_sprites_both.c:				+ env->sprite_textures[sprite.texture].surface->w
src/draw_floor_sprites_both.c:				if (!env->editor.select && env->selected_floor == sector.num
src/draw_floor_sprites_both.c:					&& env->selected_floor_sprite == j)
src/draw_floor_sprites_both.c:				env->zbuffer[coord] = z;
src/draw_floor_sprites_brightness.c:	end = env->ymax[render.x];
src/draw_floor_sprites_brightness.c:	pixels = env->sdl.texture_pixels;
src/draw_floor_sprites_brightness.c:		coord = render.x + env->w * i;
src/draw_floor_sprites_brightness.c:		if (z >= env->zbuffer[coord])
src/draw_floor_sprites_brightness.c:			sprite = env->object_sprites[sector.floor_sprites.sprite[j]];
src/draw_floor_sprites_brightness.c:			sprite_pixels = (Uint32*)env->sprite_textures[sprite.texture].str;
src/draw_floor_sprites_brightness.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_floor_sprites_brightness.c:				if (env->editor.select && render.x == env->h_w && i == env->h_h)
src/draw_floor_sprites_brightness.c:					env->selected_floor = sector.num;
src/draw_floor_sprites_brightness.c:					env->selected_floor_sprite = j;
src/draw_floor_sprites_brightness.c:					env->editor.sprite_tab.state = DOWN;
src/draw_floor_sprites_brightness.c:					env->editor.sprite_tab.anim_state = PRESSED;
src/draw_floor_sprites_brightness.c:				+ env->sprite_textures[sprite.texture].surface->w
src/draw_floor_sprites_brightness.c:				if (!env->editor.select && env->selected_floor == sector.num
src/draw_floor_sprites_brightness.c:					&& env->selected_floor_sprite == j)
src/draw_floor_sprites_brightness.c:				env->zbuffer[coord] = z;
src/draw_floor_sprites_color.c:	end = env->ymax[render.x];
src/draw_floor_sprites_color.c:	pixels = env->sdl.texture_pixels;
src/draw_floor_sprites_color.c:		coord = render.x + env->w * i;
src/draw_floor_sprites_color.c:		if (z >= env->zbuffer[coord])
src/draw_floor_sprites_color.c:			sprite = env->object_sprites[sector.floor_sprites.sprite[j]];
src/draw_floor_sprites_color.c:			sprite_pixels = (Uint32*)env->sprite_textures[sprite.texture].str;
src/draw_floor_sprites_color.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_floor_sprites_color.c:				if (env->editor.select && render.x == env->h_w && i == env->h_h)
src/draw_floor_sprites_color.c:					env->selected_floor = sector.num;
src/draw_floor_sprites_color.c:					env->selected_floor_sprite = j;
src/draw_floor_sprites_color.c:					env->editor.sprite_tab.state = DOWN;
src/draw_floor_sprites_color.c:					env->editor.sprite_tab.anim_state = PRESSED;
src/draw_floor_sprites_color.c:				+ env->sprite_textures[sprite.texture].surface->w
src/draw_floor_sprites_color.c:				if (!env->editor.select && env->selected_floor == sector.num
src/draw_floor_sprites_color.c:					&& env->selected_floor_sprite == j)
src/draw_floor_sprites_color.c:				env->zbuffer[coord] = z;
src/draw_floor_sprites_no_light.c:	end = env->ymax[render.x];
src/draw_floor_sprites_no_light.c:	pixels = env->sdl.texture_pixels;
src/draw_floor_sprites_no_light.c:		coord = render.x + env->w * i;
src/draw_floor_sprites_no_light.c:		if (z >= env->zbuffer[coord])
src/draw_floor_sprites_no_light.c:			sprite = env->object_sprites[sector.floor_sprites.sprite[j]];
src/draw_floor_sprites_no_light.c:			sprite_pixels = (Uint32*)env->sprite_textures[sprite.texture].str;
src/draw_floor_sprites_no_light.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_floor_sprites_no_light.c:				if (env->editor.select && render.x == env->h_w && i == env->h_h)
src/draw_floor_sprites_no_light.c:					env->selected_floor = sector.num;
src/draw_floor_sprites_no_light.c:					env->selected_floor_sprite = j;
src/draw_floor_sprites_no_light.c:					env->editor.sprite_tab.state = DOWN;
src/draw_floor_sprites_no_light.c:					env->editor.sprite_tab.anim_state = PRESSED;
src/draw_floor_sprites_no_light.c:					+ env->sprite_textures[sprite.texture].surface->w
src/draw_floor_sprites_no_light.c:				if (!env->editor.select && env->selected_floor == sector.num
src/draw_floor_sprites_no_light.c:						&& env->selected_floor_sprite == j)
src/draw_floor_sprites_no_light.c:				env->zbuffer[coord] = z;
src/draw_game.c:	SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/draw_game.c:	env->test_time = SDL_GetTicks();
src/draw_game.c:	if (draw_render(&env->player.camera, env))
src/draw_game.c:	if (((env->inputs.left_click && !env->shot.on_going && !env->weapon_change.on_going) || env->shot.on_going) && env->player.health > 0)
src/draw_game.c:		weapon_animation(env, env->player.curr_weapon);
src/draw_game.c:	else if (env->player.health > 0)
src/draw_game.c:		draw_weapon(env, env->weapons[env->player.curr_weapon].first_sprite);
src/draw_game.c:	if (env->weapon_change.on_going && !env->shot.on_going)
src/draw_game.c:	if (env->options.show_fps)
src/draw_game.c:	if (env->options.test)
src/draw_game.c:	if (env->player.health > 0)
src/draw_game.c:	if (env->player.hit)
src/draw_game.c:	if (env->options.test)
src/draw_game.c:		while (i < env->nb_enemies)
src/draw_game.c:			if (env->enemies[i].exists)
src/draw_game.c:				draw_line(new_point(env->enemies[i].left, env->enemies[i].top), new_point(env->enemies[i].right, env->enemies[i].top), *env, 0xFF00FF00);
src/draw_game.c:				draw_line(new_point(env->enemies[i].right, env->enemies[i].top), new_point(env->enemies[i].right, env->enemies[i].bottom), *env, 0xFF00FF00);
src/draw_game.c:				draw_line(new_point(env->enemies[i].right, env->enemies[i].bottom), new_point(env->enemies[i].left, env->enemies[i].bottom), *env, 0xFF00FF00);
src/draw_game.c:				draw_line(new_point(env->enemies[i].left, env->enemies[i].bottom), new_point(env->enemies[i].left, env->enemies[i].top), *env, 0xFF00FF00);
src/draw_game.c:	if (env->hovered_wall_sprite_sprite != -1
src/draw_game.c:		&& env->hovered_wall_sprite_wall != -1
src/draw_game.c:		&& env->hovered_wall_sprite_sector != -1)
src/draw_game.c:	if (env->confirmation_box.state)
src/draw_game.c:		draw_confirmation_box(&env->confirmation_box, env);
src/draw_game.c:	if (env->options.zbuffer)
src/draw_game.c:	if (env->player.health > 0)
src/draw_game.c:	env->first_frame = 1;
src/draw_grid.c:	pixels = env->sdl.texture_pixels;
src/draw_grid.c:	x = env->editor.center.x;
src/draw_grid.c:	if (x >= 400 && x < env->w)
src/draw_grid.c:		y = ft_clamp(env->editor.center.y - 10, 0, env->h - 1);
src/draw_grid.c:		max = ft_clamp(env->editor.center.y, 0, env->h - 1);
src/draw_grid.c:			pixels[x + y * env->w] = 0xFFFF0000;
src/draw_grid.c:		y = ft_clamp(env->editor.center.y + 10, 0, env->h - 1);
src/draw_grid.c:			pixels[x + y * env->w] = 0xFFFF0000;
src/draw_grid.c:	y = env->editor.center.y;
src/draw_grid.c:	if (y >= 0 && y < env->h)
src/draw_grid.c:		x = ft_clamp(env->editor.center.x - 10, 399, env->w);
src/draw_grid.c:		max = ft_clamp(env->editor.center.x, 399, env->w - 1);
src/draw_grid.c:			pixels[x + y * env->w] = 0xFFFF0000;
src/draw_grid.c:		x = ft_clamp(env->editor.center.x + 10, 399, env->w - 1);
src/draw_grid.c:			pixels[x + y * env->w] = 0xFFFF0000;
src/draw_grid_enemy.c:	if (env->editor.dragged_enemy != -1)
src/draw_grid_enemy.c:		scale = env->editor.scale / 2.0;
src/draw_grid_enemy.c:		center.x = env->sdl.mx;
src/draw_grid_enemy.c:		center.y = env->sdl.my;
src/draw_grid_enemy.c:	while (i < env->nb_enemies)
src/draw_grid_enemy.c:		center.x = env->enemies[i].pos.x * env->editor.scale + env->editor.center.x;
src/draw_grid_enemy.c:		center.y = env->enemies[i].pos.y * env->editor.scale + env->editor.center.y;
src/draw_grid_enemy.c:		if (env->sdl.mx > center.x - env->editor.scale / 2.0
src/draw_grid_enemy.c:				&& env->sdl.mx < center.x + env->editor.scale / 2.0
src/draw_grid_enemy.c:				&& env->sdl.my > center.y - env->editor.scale / 2.0
src/draw_grid_enemy.c:				&& env->sdl.my < center.y + env->editor.scale / 2.0)
src/draw_grid_enemy.c:			scale = env->editor.scale;
src/draw_grid_enemy.c:			if (env->inputs.left_click
src/draw_grid_enemy.c:					&& !env->confirmation_box.state
src/draw_grid_enemy.c:					&& !env->input_box.state
src/draw_grid_enemy.c:					&& env->editor.start_vertex == -1
src/draw_grid_enemy.c:					&& env->editor.dragged_player == -1
src/draw_grid_enemy.c:					&& env->editor.dragged_enemy == -1
src/draw_grid_enemy.c:					&& env->editor.dragged_vertex == -1
src/draw_grid_enemy.c:					&& env->editor.dragged_object == -1
src/draw_grid_enemy.c:					&& env->sdl.mx > 400)
src/draw_grid_enemy.c:				env->editor.dragged_enemy = i;
src/draw_grid_enemy.c:				env->selected_enemy = i;
src/draw_grid_enemy.c:				env->editor.selected_vertex = -1;
src/draw_grid_enemy.c:				env->editor.selected_sector = -1;
src/draw_grid_enemy.c:				env->editor.selected_player = -1;
src/draw_grid_enemy.c:				env->editor.selected_object = -1;
src/draw_grid_enemy.c:			scale = env->editor.scale / 2.0;
src/draw_grid_enemy.c:		if (env->selected_enemy == i)
src/draw_grid_enemy.c:		if (env->editor.dragged_enemy != i)
src/draw_grid_objects.c:	if (env->editor.dragged_object != -1)
src/draw_grid_objects.c:		scale = env->editor.scale / 2.0;
src/draw_grid_objects.c:		center.x = env->sdl.mx;
src/draw_grid_objects.c:		center.y = env->sdl.my;
src/draw_grid_objects.c:	while (i < env->nb_objects)
src/draw_grid_objects.c:		center.x = env->objects[i].pos.x * env->editor.scale + env->editor.center.x;
src/draw_grid_objects.c:		center.y = env->objects[i].pos.y * env->editor.scale + env->editor.center.y;
src/draw_grid_objects.c:		if (env->sdl.mx > center.x - env->editor.scale / 2.0
src/draw_grid_objects.c:				&& env->sdl.mx < center.x + env->editor.scale / 2.0
src/draw_grid_objects.c:				&& env->sdl.my > center.y - env->editor.scale / 2.0
src/draw_grid_objects.c:				&& env->sdl.my < center.y + env->editor.scale / 2.0)
src/draw_grid_objects.c:			scale = env->editor.scale;
src/draw_grid_objects.c:			if (env->inputs.left_click
src/draw_grid_objects.c:					&& !env->confirmation_box.state
src/draw_grid_objects.c:					&& !env->input_box.state
src/draw_grid_objects.c:					&& env->editor.start_vertex == -1
src/draw_grid_objects.c:					&& env->editor.dragged_player == -1
src/draw_grid_objects.c:					&& env->editor.dragged_object == -1
src/draw_grid_objects.c:					&& env->editor.dragged_vertex == -1
src/draw_grid_objects.c:					&& env->editor.dragged_enemy == -1)
src/draw_grid_objects.c:				env->editor.dragged_object = i;
src/draw_grid_objects.c:				env->editor.selected_object = i;
src/draw_grid_objects.c:				env->editor.selected_vertex = -1;
src/draw_grid_objects.c:				env->editor.selected_sector = -1;
src/draw_grid_objects.c:				env->editor.selected_player = -1;
src/draw_grid_objects.c:				env->selected_enemy = -1;
src/draw_grid_objects.c:			scale = env->editor.scale / 2.0;
src/draw_grid_objects.c:		if (env->editor.selected_object == i)
src/draw_grid_objects.c:		if (env->editor.dragged_object != i)
src/draw_grid_objects.c:	/*	v[0] = new_v3(center.x + cos(env->objects[i].angle - M_PI / 2) * scale / 2,
src/draw_grid_objects.c:				center.y + sin(env->objects[i].angle - M_PI / 2) * scale / 2,
src/draw_grid_objects.c:		v[2] = new_v3(center.x - cos(env->objects[i].angle - M_PI / 2) * scale / 2,
src/draw_grid_objects.c:				center.y - sin(env->objects[i].angle - M_PI / 2) * scale / 2,
src/draw_grid_objects.c:		v[1] = new_v3(center.x + cos(env->objects[i].angle) * scale * 2,
src/draw_grid_objects.c:				center.y + sin(env->objects[i].angle) * scale * 2,
src/draw_grid_player.c:	if (env->editor.dragged_player == 1)
src/draw_grid_player.c:		circle.center.x = env->sdl.mx;
src/draw_grid_player.c:		circle.center.y = env->sdl.my;
src/draw_grid_player.c:		circle.radius = env->editor.scale;
src/draw_grid_player.c:		circle.center.x = (env->player.pos.x * env->editor.scale) + env->editor.center.x;
src/draw_grid_player.c:		circle.center.y = (env->player.pos.y * env->editor.scale) + env->editor.center.y;
src/draw_grid_player.c:		if (env->sdl.mx > circle.center.x - env->editor.scale / 2
src/draw_grid_player.c:				&& env->sdl.mx < circle.center.x + env->editor.scale / 2
src/draw_grid_player.c:				&& env->sdl.my > circle.center.y - env->editor.scale / 2
src/draw_grid_player.c:				&& env->sdl.my < circle.center.y + env->editor.scale / 2)
src/draw_grid_player.c:			circle.radius = env->editor.scale;
src/draw_grid_player.c:			if (env->inputs.left_click
src/draw_grid_player.c:					&& !env->input_box.state
src/draw_grid_player.c:					&& !env->confirmation_box.state
src/draw_grid_player.c:					&& env->editor.start_vertex == -1
src/draw_grid_player.c:					&& env->editor.dragged_player == -1
src/draw_grid_player.c:					&& env->editor.dragged_enemy == -1
src/draw_grid_player.c:					&& env->editor.dragged_object == -1
src/draw_grid_player.c:					&& env->editor.dragged_vertex == -1)
src/draw_grid_player.c:				env->editor.dragged_player = 1;
src/draw_grid_player.c:				env->editor.selected_player = 1;
src/draw_grid_player.c:				env->editor.selected_object = -1;
src/draw_grid_player.c:				env->editor.selected_vertex = -1;
src/draw_grid_player.c:				env->editor.selected_sector = -1;
src/draw_grid_player.c:			circle.radius = env->editor.scale / 2;
src/draw_grid_player.c:	if (env->editor.selected_player == 1)
src/draw_grid_player.c:	v[0] = new_v3(circle.center.x + env->player.camera.perp_cos * circle.radius / 2,
src/draw_grid_player.c:			circle.center.y + env->player.camera.perp_sin * circle.radius / 2,
src/draw_grid_player.c:	v[2] = new_v3(circle.center.x - env->player.camera.perp_cos * circle.radius / 2,
src/draw_grid_player.c:			circle.center.y - env->player.camera.perp_sin * circle.radius / 2,
src/draw_grid_player.c:	v[1] = new_v3(circle.center.x + env->player.camera.angle_cos * circle.radius * 2,
src/draw_grid_player.c:			circle.center.y + env->player.camera.angle_sin * circle.radius * 2,
src/draw_grid_vertices.c:	if (env->editor.dragged_vertex != -1)
src/draw_grid_vertices.c:		scale = env->editor.scale / 5.0;
src/draw_grid_vertices.c:		env->vertices[env->editor.dragged_vertex].x = round((env->sdl.mx - env->editor.center.x) / env->editor.scale);
src/draw_grid_vertices.c:		env->vertices[env->editor.dragged_vertex].y = round((env->sdl.my - env->editor.center.y) / env->editor.scale);
src/draw_grid_vertices.c:		center.x = env->vertices[env->editor.dragged_vertex].x * env->editor.scale + env->editor.center.x;
src/draw_grid_vertices.c:		center.y = env->vertices[env->editor.dragged_vertex].y * env->editor.scale + env->editor.center.y;
src/draw_grid_vertices.c:	while (i < env->nb_vertices)
src/draw_grid_vertices.c:		vertex = env->vertices[i];
src/draw_grid_vertices.c:		center = new_point(env->editor.center.x + vertex.x * env->editor.scale,
src/draw_grid_vertices.c:				env->editor.center.y + vertex.y * env->editor.scale);
src/draw_grid_vertices.c:		if (env->sdl.mx > center.x - env->editor.scale / 3.0
src/draw_grid_vertices.c:				&& env->sdl.mx < center.x + env->editor.scale / 3.0
src/draw_grid_vertices.c:				&& env->sdl.my > center.y - env->editor.scale / 3.0
src/draw_grid_vertices.c:				&& env->sdl.my < center.y + env->editor.scale / 3.0)
src/draw_grid_vertices.c:			scale = env->editor.scale / 3.0;
src/draw_grid_vertices.c:			if (env->inputs.left_click
src/draw_grid_vertices.c:					&& !env->confirmation_box.state
src/draw_grid_vertices.c:					&& !env->input_box.state
src/draw_grid_vertices.c:					&& env->editor.start_vertex == -1
src/draw_grid_vertices.c:					&& env->editor.dragged_vertex == -1
src/draw_grid_vertices.c:					&& env->editor.dragged_enemy == -1
src/draw_grid_vertices.c:					&& env->editor.dragged_player == -1
src/draw_grid_vertices.c:					&& env->editor.dragged_object == -1
src/draw_grid_vertices.c:					&& env->sdl.mx > 400)
src/draw_grid_vertices.c:				env->editor.dragged_vertex = i;
src/draw_grid_vertices.c:				env->editor.selected_vertex = i;
src/draw_grid_vertices.c:				env->editor.selected_object = -1;
src/draw_grid_vertices.c:				env->editor.selected_player = -1;
src/draw_grid_vertices.c:				env->editor.selected_sector = -1;
src/draw_grid_vertices.c:				env->editor.start_pos.x = env->vertices[env->editor.selected_vertex].x;
src/draw_grid_vertices.c:				env->editor.start_pos.y = env->vertices[env->editor.selected_vertex].y;
src/draw_grid_vertices.c:			scale = env->editor.scale / 5.0;
src/draw_grid_vertices.c:		if (env->editor.dragged_vertex == i || env->editor.selected_vertex == i)
src/draw_grid_walls.c:	tmp = env->editor.current_vertices;
src/draw_grid_walls.c:	v1.x = env->editor.center.x + v->x * env->editor.scale;
src/draw_grid_walls.c:	v1.y = env->editor.center.y + v->y * env->editor.scale;
src/draw_grid_walls.c:		v2.x = env->editor.center.x + v->x * env->editor.scale;
src/draw_grid_walls.c:		v2.y = env->editor.center.y + v->y * env->editor.scale;
src/draw_grid_walls.c:	if (env->drawing)
src/draw_grid_walls.c:		v2.x = env->sdl.mx;
src/draw_grid_walls.c:		v2.y = env->sdl.my;
src/draw_grid_walls.c:	/*	ft_printf("v1.x: %f v1.y: %f | ", env->vertices[sector.vertices[i]].x,
src/draw_grid_walls.c:		env->vertices[sector.vertices[i]].y);
src/draw_grid_walls.c:		ft_printf("v2.x: %f v2.y: %f\n", env->vertices[sector.vertices[i + 1]].x,
src/draw_grid_walls.c:		env->vertices[sector.vertices[i + 1]].y);*/
src/draw_grid_walls.c:		v1.x = env->editor.center.x +
src/draw_grid_walls.c:			env->vertices[sector.vertices[i]].x * env->editor.scale;
src/draw_grid_walls.c:		v1.y = env->editor.center.y +
src/draw_grid_walls.c:			env->vertices[sector.vertices[i]].y * env->editor.scale;
src/draw_grid_walls.c:		v2.x = env->editor.center.x +
src/draw_grid_walls.c:			env->vertices[sector.vertices[i + 1]].x * env->editor.scale;
src/draw_grid_walls.c:		v2.y = env->editor.center.y +
src/draw_grid_walls.c:			env->vertices[sector.vertices[i + 1]].y * env->editor.scale;
src/draw_grid_walls.c:	if (!env->editor.player_exist && env->nb_sectors == 1)
src/draw_grid_walls.c:	while (i < env->nb_sectors)
src/draw_grid_walls.c:		if (i == env->editor.selected_sector)
src/draw_grid_walls.c:			draw_grid_sector(env->sectors[i], 0xFF00FF00, env);
src/draw_grid_walls.c:			draw_grid_sector(env->sectors[i], 0xFFFFFFFF, env);
src/draw_hud.c:	window_w = (int)(env->w)/*  - env->sprite_textures[ARMOR_LIFE_HUD].surface->w */;
src/draw_hud.c:	window_h = (env->h - env->sprite_textures[ARMOR_LIFE_HUD].surface->h);
src/draw_hud.c:	while (x < env->sprite_textures[ARMOR_LIFE_HUD].surface->w && window_w + x < env->w)
src/draw_hud.c:		while (y < env->sprite_textures[ARMOR_LIFE_HUD].surface->h  && (window_h + y) < env->h)
src/draw_hud.c:			if (env->sprite_textures[ARMOR_LIFE_HUD].str[x + env->sprite_textures[ARMOR_LIFE_HUD].surface->w * y] != 0xFFC10099)
src/draw_hud.c:				env->sdl.texture_pixels[(window_w + x) + env->w * (window_h + y)] = 
src/draw_hud.c:					env->sprite_textures[ARMOR_LIFE_HUD].str[x + env->sprite_textures[ARMOR_LIFE_HUD].surface->w * y];
src/draw_hud.c:	window_w = (int)(env->w) - env->sprite_textures[AMMO_HUD].surface->w;
src/draw_hud.c:	window_h = (env->h - env->sprite_textures[AMMO_HUD].surface->h);
src/draw_hud.c:	while (x < env->sprite_textures[AMMO_HUD].surface->w)
src/draw_hud.c:		while (y < env->sprite_textures[AMMO_HUD].surface->h  && (window_h + y) < env->h)
src/draw_hud.c:			if (env->sprite_textures[AMMO_HUD].str[x + env->sprite_textures[AMMO_HUD].surface->w * y] != 0xFFC10099)
src/draw_hud.c:				env->sdl.texture_pixels[(window_w + x) + env->w * (window_h + y)] = 
src/draw_hud.c:					env->sprite_textures[AMMO_HUD].str[x + env->sprite_textures[AMMO_HUD].surface->w * y];
src/draw_hud.c:	str = ft_sitoa(env->player.health);
src/draw_hud.c:	print_text(new_point(830, 300), new_printable_text(str, env->sdl.fonts.amazdoom50, 0xA1A1A100, 0), env);
src/draw_hud.c:	str = ft_sitoa(env->player.armor);
src/draw_hud.c:	print_text(new_point(830, 80), new_printable_text(str, env->sdl.fonts.amazdoom50, 0xA1A1A100, 0), env);
src/draw_objects.c:	while (i < env->nb_objects)
src/draw_objects.c:		if (env->objects[i].sector == env->sectors[env->selected_floor].num)
src/draw_objects.c:			env->objects[i].pos.z = get_floor_at_pos(env->sectors[env->selected_floor], new_v3(env->objects[i].pos.x, env->objects[i].pos.y, 0), env);
src/draw_objects.c:	sprite = env->object_sprites[object.sprite];
src/draw_objects.c:	texture = env->sprite_textures[sprite.texture];
src/draw_objects.c:	pixels = env->sdl.texture_pixels;
src/draw_objects.c:	zbuffer = env->zbuffer;
src/draw_objects.c:	sector = env->sectors[object.sector];
src/draw_objects.c:			if ((object.rotated_pos.z < zbuffer[x + y * env->w]
src/draw_objects.c:				env->objects[object.num].seen = 1;
src/draw_objects.c:				if (env->editor.select && x == env->h_w && y == env->h_h)
src/draw_objects.c:					env->selected_object = object.num;
src/draw_objects.c:				if (!env->options.lighting
src/draw_objects.c:					pixels[x + y * env->w] = texture_pixels[textx
src/draw_objects.c:					pixels[x + y * env->w] = apply_light_color(
src/draw_objects.c:					pixels[x + y * env->w] = apply_light_brightness(
src/draw_objects.c:					pixels[x + y * env->w] = apply_light_both(
src/draw_objects.c:				if (!env->editor.select && env->selected_object == object.num)
src/draw_objects.c:					pixels[x + y * env->w] = blend_alpha(pixels[x + y * env->w], 0x1abc9c, 128);
src/draw_objects.c:				zbuffer[x + y * env->w] = object.rotated_pos.z;
src/draw_objects.c:		object->sprite = env->object_sprites[object->sprite].death_counterpart;
src/draw_objects.c:	sprite = env->object_sprites[object->sprite];
src/draw_objects.c:	size.x = env->w * object->scale / object->rotated_pos.z;
src/draw_objects.c:	orender.xstart = ft_clamp(orender.x1, 0, env->w - 1);
src/draw_objects.c:	orender.ystart = ft_clamp(orender.y1 + 1, 0, env->h - 1);
src/draw_objects.c:	orender.xend = ft_clamp(orender.x2, 0, env->w - 1);
src/draw_objects.c:	orender.yend = ft_clamp(orender.y2, 0, env->h - 1);
src/draw_objects.c:	env->current_object = 0;
src/draw_objects.c:		object_threads[i].xstart = env->nb_objects / (double)THREADS * i;
src/draw_objects.c:		object_threads[i].xend = env->nb_objects / (double)THREADS * (i + 1);
src/draw_objects.c:	while (i < env->nb_objects)
src/draw_objects.c:		if (env->objects[i].rotated_pos.z > 1 && env->objects[i].exists)
src/draw_objects.c:			env->objects[i].seen = 0;
src/draw_objects.c:			if (env->objects[i].health <= 0 && env->objects[i].exists)
src/draw_objects.c:				if (env->object_sprites[env->objects[i].sprite].nb_death_sprites > 1)
src/draw_objects.c:					death_sprite = object_destruction(env, i, env->object_sprites[env->objects[i].sprite].nb_death_sprites);
src/draw_objects.c:					env->objects[i].sprite = env->object_sprites[env->objects[i].sprite].death_counterpart;
src/draw_objects.c:			if (env->objects[i].exists && env->objects[i].nb_rest_state > 1)
src/draw_objects.c:			if (env->objects[i].exists)
src/draw_objects.c:				if (draw_object(camera, &env->objects[i], env, death_sprite))
src/draw_players.c:	if (camera.pos.x == env->player.pos.x && camera.pos.y == env->player.pos.y
src/draw_players.c:			&& camera.pos.z == env->player.head_z)
src/draw_players.c:	player.pos = env->player.pos;
src/draw_players.c:	if (env->player.camera.angle < 0)
src/draw_players.c:		player.angle = 360 + (int)(env->player.camera.angle * CONVERT_DEGREES) % 360;
src/draw_players.c:		player.angle = (int)(env->player.camera.angle * CONVERT_DEGREES) % 360;
src/draw_projectile_both.c:	sprite = env->object_sprites[projectile.sprite];
src/draw_projectile_both.c:	texture = env->sprite_textures[sprite.texture];
src/draw_projectile_both.c:	pixels = env->sdl.texture_pixels;
src/draw_projectile_both.c:	zbuffer = env->zbuffer;
src/draw_projectile_both.c:			if ((projectile.rotated_pos.z < zbuffer[x + y * env->w]
src/draw_projectile_both.c:				pixels[x + y * env->w] = apply_light_both(texture_pixels[textx + texty * texture.surface->w], prender.light_color, prender.intensity, prender.brightness);
src/draw_projectile_both.c:				zbuffer[x + y * env->w] = projectile.rotated_pos.z;
src/draw_projectile_both.c:	sprite = env->object_sprites[projectile->sprite];
src/draw_projectile_both.c:	size.x = env->w * projectile->scale / projectile->rotated_pos.z;
src/draw_projectile_both.c:	prender.xstart = ft_clamp(prender.x1, 0, env->w - 1);
src/draw_projectile_both.c:	prender.ystart = ft_clamp(prender.y1 + 1, 0, env->h - 1);
src/draw_projectile_both.c:	prender.xend = ft_clamp(prender.x2, 0, env->w - 1);
src/draw_projectile_both.c:	prender.yend = ft_clamp(prender.y2, 0, env->h - 1);
src/draw_projectile_brightness.c:	sprite = env->object_sprites[projectile.sprite];
src/draw_projectile_brightness.c:	texture = env->sprite_textures[sprite.texture];
src/draw_projectile_brightness.c:	pixels = env->sdl.texture_pixels;
src/draw_projectile_brightness.c:	zbuffer = env->zbuffer;
src/draw_projectile_brightness.c:			if ((projectile.rotated_pos.z < zbuffer[x + y * env->w]
src/draw_projectile_brightness.c:				pixels[x + y * env->w] = apply_light_brightness(
src/draw_projectile_brightness.c:				zbuffer[x + y * env->w] = projectile.rotated_pos.z;
src/draw_projectile_brightness.c:	sprite = env->object_sprites[projectile->sprite];
src/draw_projectile_brightness.c:	size.x = env->w * projectile->scale / projectile->rotated_pos.z;
src/draw_projectile_brightness.c:	prender.xstart = ft_clamp(prender.x1, 0, env->w - 1);
src/draw_projectile_brightness.c:	prender.ystart = ft_clamp(prender.y1 + 1, 0, env->h - 1);
src/draw_projectile_brightness.c:	prender.xend = ft_clamp(prender.x2, 0, env->w - 1);
src/draw_projectile_brightness.c:	prender.yend = ft_clamp(prender.y2, 0, env->h - 1);
src/draw_projectile_color.c:	sprite = env->object_sprites[projectile.sprite];
src/draw_projectile_color.c:	texture = env->sprite_textures[sprite.texture];
src/draw_projectile_color.c:	pixels = env->sdl.texture_pixels;
src/draw_projectile_color.c:	zbuffer = env->zbuffer;
src/draw_projectile_color.c:			if ((projectile.rotated_pos.z < zbuffer[x + y * env->w]
src/draw_projectile_color.c:				pixels[x + y * env->w] = apply_light_color(
src/draw_projectile_color.c:				zbuffer[x + y * env->w] = projectile.rotated_pos.z;
src/draw_projectile_color.c:	sprite = env->object_sprites[projectile->sprite];
src/draw_projectile_color.c:	size.x = env->w * projectile->scale / projectile->rotated_pos.z;
src/draw_projectile_color.c:	prender.xstart = ft_clamp(prender.x1, 0, env->w - 1);
src/draw_projectile_color.c:	prender.ystart = ft_clamp(prender.y1 + 1, 0, env->h - 1);
src/draw_projectile_color.c:	prender.xend = ft_clamp(prender.x2, 0, env->w - 1);
src/draw_projectile_color.c:	prender.yend = ft_clamp(prender.y2, 0, env->h - 1);
src/draw_projectile_no_light.c:	sprite = env->object_sprites[projectile.sprite];
src/draw_projectile_no_light.c:	texture = env->sprite_textures[sprite.texture];
src/draw_projectile_no_light.c:	pixels = env->sdl.texture_pixels;
src/draw_projectile_no_light.c:	zbuffer = env->zbuffer;
src/draw_projectile_no_light.c:			if ((projectile.rotated_pos.z < zbuffer[x + y * env->w]
src/draw_projectile_no_light.c:				pixels[x + y * env->w] = texture_pixels[textx + texty * texture.surface->w];
src/draw_projectile_no_light.c:				zbuffer[x + y * env->w] = projectile.rotated_pos.z;
src/draw_projectile_no_light.c:	sprite = env->object_sprites[projectile->sprite];
src/draw_projectile_no_light.c:	size.x = env->w * projectile->scale / projectile->rotated_pos.z;
src/draw_projectile_no_light.c:	prender.xstart = ft_clamp(prender.x1, 0, env->w - 1);
src/draw_projectile_no_light.c:	prender.ystart = ft_clamp(prender.y1 + 1, 0, env->h - 1);
src/draw_projectile_no_light.c:	prender.xend = ft_clamp(prender.x2, 0, env->w - 1);
src/draw_projectile_no_light.c:	prender.yend = ft_clamp(prender.y2, 0, env->h - 1);
src/draw_projectiles.c:	tmp = env->projectiles;
src/draw_projectiles.c:			if (!env->options.lighting
src/draw_projectiles.c:				if (!env->options.lighting
src/draw_rectangle.c:	if (pos.x < 0 || pos.y < 0 || pos.x >= env->w || pos.y >= env->h
src/draw_rectangle.c:	while (++y <= pos.y + size.y && y < env->h)
src/draw_rectangle.c:		while (++x <= pos.x + size.x && x < env->w)
src/draw_rectangle.c:				env->sdl.texture_pixels[x + y * env->w] = r.line_color;
src/draw_rectangle.c:				env->sdl.texture_pixels[x + y * env->w] = r.inside_color;
src/draw_skybox.c:	v1 = env->skybox[skybox.i];
src/draw_skybox.c:	if ((wall_data.mode == CEILING && env->selected_ceiling == render.sector)
src/draw_skybox.c:			|| (wall_data.mode == FLOOR && env->selected_floor == render.sector)
src/draw_skybox.c:			&& env->sectors[render.sector].selected[render.i]))
src/draw_skybox.c:		min = env->ymin[x];
src/draw_skybox.c:		skybox.texture_w = env->skyboxes[abs(env->sectors[render.sector].
src/draw_skybox.c:		skybox.texture_h = env->skyboxes[abs(env->sectors[render.sector].
src/draw_skybox.c:		max = env->ymax[x];
src/draw_skybox.c:		skybox.texture_w = env->skyboxes[abs(env->sectors[render.sector].
src/draw_skybox.c:		skybox.texture_h = env->skyboxes[abs(env->sectors[render.sector].
src/draw_skybox.c:		skybox.texture_w = env->skyboxes[abs(render.texture) - 1].textures[skybox.texture].surface->w;
src/draw_skybox.c:		skybox.texture_h = env->skyboxes[abs(render.texture) - 1].textures[skybox.texture].surface->h;
src/draw_skybox.c:		skybox.texture_w = env->skyboxes[abs(render.texture) - 1].textures[skybox.texture].surface->w;
src/draw_skybox.c:		skybox.texture_h = env->skyboxes[abs(render.texture) - 1].textures[skybox.texture].surface->h;
src/draw_skybox.c:		skybox.texture_w = env->skyboxes[abs(render.texture) - 1].textures[skybox.texture].surface->w;
src/draw_skybox.c:		skybox.texture_h = env->skyboxes[abs(render.texture) - 1].textures[skybox.texture].surface->h;
src/draw_skybox.c:	if (env->skybox[skybox.i + 1].vz)
src/draw_skybox.c:		skybox.texture_w /= env->skybox[skybox.i + 1].vz;
src/draw_skybox.c:		skybox.texture_w /= env->skybox[skybox.i].clipped_vz2;
src/draw_skybox.c:			+ skybox.alpha / env->skybox[skybox.i + 1].vz);
src/draw_skybox.c:	skybox.divider = 1 / (env->skybox[skybox.i + 1].vz
src/draw_skybox.c:			env->ymin[x], env->ymax[x]);
src/draw_skybox.c:			env->ymin[x], env->ymax[x]);
src/draw_skybox.c:		if ((env->options.zbuffer || env->options.contouring)
src/draw_skybox.c:				&& (x == (int)v1.x || x == (int)env->skybox[skybox.i + 1].x))
src/draw_skybox.c:	skybox.ceiling_horizon = env->player.camera.horizon;
src/draw_skybox.c:	skybox.floor_horizon = env->player.camera.horizon;
src/draw_skybox.c:		if (!env->skybox[i].draw
src/draw_skybox.c:				|| env->skybox[i].clipped_x1 >= env->skybox[i].clipped_x2
src/draw_skybox.c:				|| env->skybox[i].clipped_x1 > render.x
src/draw_skybox.c:				|| env->skybox[i].clipped_x2 < render.x)
src/draw_vline_ceiling.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_ceiling.c:	zbuffer = env->zbuffer;
src/draw_vline_ceiling.c:	map_lvl = env->wall_textures[sector.ceiling_texture].nb_maps - 1;
src/draw_vline_ceiling.c:	render.texture_w = env->wall_textures[sector.ceiling_texture].maps[map_lvl]->w;
src/draw_vline_ceiling.c:	render.texture_h = env->wall_textures[sector.ceiling_texture].maps[map_lvl]->h;
src/draw_vline_ceiling.c:		coord = vline.x + env->w * i;
src/draw_vline_ceiling.c:		if (env->options.mipmapping)
src/draw_vline_ceiling.c:		texture_pixels = env->wall_textures[sector.ceiling_texture].
src/draw_vline_ceiling.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_ceiling.c:			if (env->editor.select)
src/draw_vline_ceiling.c:				env->selected_ceiling = render.sector;
src/draw_vline_ceiling.c:			if (env->playing)
src/draw_vline_ceiling.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_ceiling.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_ceiling.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_ceiling.c:			if (env->editor.in_game && !env->editor.select
src/draw_vline_ceiling.c:				&& env->selected_ceiling == render.sector
src/draw_vline_ceiling.c:				&& env->selected_ceiling_sprite == -1)
src/draw_vline_ceiling_both.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_ceiling_both.c:	zbuffer = env->zbuffer;
src/draw_vline_ceiling_both.c:	map_lvl = env->wall_textures[sector.ceiling_texture].nb_maps - 1;
src/draw_vline_ceiling_both.c:	render.texture_w = env->wall_textures[sector.ceiling_texture].maps[map_lvl]->w;
src/draw_vline_ceiling_both.c:	render.texture_h = env->wall_textures[sector.ceiling_texture].maps[map_lvl]->h;
src/draw_vline_ceiling_both.c:		coord = vline.x + env->w * i;
src/draw_vline_ceiling_both.c:		if (env->options.mipmapping)
src/draw_vline_ceiling_both.c:		texture_pixels = env->wall_textures[sector.ceiling_texture].
src/draw_vline_ceiling_both.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_ceiling_both.c:			if (env->editor.select)
src/draw_vline_ceiling_both.c:				env->selected_ceiling = render.sector;
src/draw_vline_ceiling_both.c:			if (env->playing)
src/draw_vline_ceiling_both.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_ceiling_both.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_ceiling_both.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_ceiling_both.c:			if (env->editor.in_game && !env->editor.select
src/draw_vline_ceiling_both.c:				&& env->selected_ceiling == render.sector
src/draw_vline_ceiling_both.c:				&& env->selected_ceiling_sprite == -1)
src/draw_vline_ceiling_brightness.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_ceiling_brightness.c:	zbuffer = env->zbuffer;
src/draw_vline_ceiling_brightness.c:	map_lvl = env->wall_textures[sector.ceiling_texture].nb_maps - 1;
src/draw_vline_ceiling_brightness.c:	render.texture_w = env->wall_textures[sector.ceiling_texture].maps[map_lvl]->w;
src/draw_vline_ceiling_brightness.c:	render.texture_h = env->wall_textures[sector.ceiling_texture].maps[map_lvl]->h;
src/draw_vline_ceiling_brightness.c:		coord = vline.x + env->w * i;
src/draw_vline_ceiling_brightness.c:		if (env->options.mipmapping)
src/draw_vline_ceiling_brightness.c:		texture_pixels = env->wall_textures[sector.ceiling_texture].
src/draw_vline_ceiling_brightness.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_ceiling_brightness.c:			if (env->editor.select)
src/draw_vline_ceiling_brightness.c:				env->selected_ceiling = render.sector;
src/draw_vline_ceiling_brightness.c:			if (env->playing)
src/draw_vline_ceiling_brightness.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_ceiling_brightness.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_ceiling_brightness.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_ceiling_brightness.c:			if (env->editor.in_game && !env->editor.select
src/draw_vline_ceiling_brightness.c:				&& env->selected_ceiling == render.sector
src/draw_vline_ceiling_brightness.c:				&& env->selected_ceiling_sprite == -1)
src/draw_vline_ceiling_color.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_ceiling_color.c:	zbuffer = env->zbuffer;
src/draw_vline_ceiling_color.c:	map_lvl = env->wall_textures[sector.ceiling_texture].nb_maps - 1;
src/draw_vline_ceiling_color.c:	render.texture_w = env->wall_textures[sector.ceiling_texture].maps[map_lvl]->w;
src/draw_vline_ceiling_color.c:	render.texture_h = env->wall_textures[sector.ceiling_texture].maps[map_lvl]->h;
src/draw_vline_ceiling_color.c:		coord = vline.x + env->w * i;
src/draw_vline_ceiling_color.c:		if (env->options.mipmapping)
src/draw_vline_ceiling_color.c:		texture_pixels = env->wall_textures[sector.ceiling_texture].
src/draw_vline_ceiling_color.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_ceiling_color.c:			if (env->editor.select)
src/draw_vline_ceiling_color.c:				env->selected_ceiling = render.sector;
src/draw_vline_ceiling_color.c:			if (env->playing)
src/draw_vline_ceiling_color.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_ceiling_color.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_ceiling_color.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_ceiling_color.c:			if (env->editor.in_game && !env->editor.select
src/draw_vline_ceiling_color.c:				&& env->selected_ceiling == render.sector
src/draw_vline_ceiling_color.c:				&& env->selected_ceiling_sprite == -1)
src/draw_vline_floor.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_floor.c:	zbuffer = env->zbuffer;
src/draw_vline_floor.c:	map_lvl = env->wall_textures[sector.floor_texture].nb_maps - 1;
src/draw_vline_floor.c:	render.texture_w = env->wall_textures[sector.floor_texture].maps[map_lvl]->w;
src/draw_vline_floor.c:	render.texture_h = env->wall_textures[sector.floor_texture].maps[map_lvl]->h;
src/draw_vline_floor.c:		coord = vline.x + env->w * i;
src/draw_vline_floor.c:		if (env->options.mipmapping)
src/draw_vline_floor.c:		texture_pixels = (Uint32*)env->wall_textures[sector.floor_texture].
src/draw_vline_floor.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_floor.c:			if (env->editor.select)
src/draw_vline_floor.c:				env->selected_floor = render.sector;
src/draw_vline_floor.c:			if (env->playing)
src/draw_vline_floor.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_floor.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_floor.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_floor.c:			if (env->editor.in_game && !env->editor.select
src/draw_vline_floor.c:					&& env->selected_floor == render.sector
src/draw_vline_floor.c:					&& env->selected_floor_sprite == -1)
src/draw_vline_floor_both.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_floor_both.c:	zbuffer = env->zbuffer;
src/draw_vline_floor_both.c:	map_lvl = env->wall_textures[sector.floor_texture].nb_maps - 1;
src/draw_vline_floor_both.c:	render.texture_w = env->wall_textures[sector.floor_texture].maps[map_lvl]->w;
src/draw_vline_floor_both.c:	render.texture_h = env->wall_textures[sector.floor_texture].maps[map_lvl]->h;
src/draw_vline_floor_both.c:		coord = vline.x + env->w * i;
src/draw_vline_floor_both.c:		if (env->options.mipmapping)
src/draw_vline_floor_both.c:		texture_pixels = (Uint32*)env->wall_textures[sector.floor_texture].
src/draw_vline_floor_both.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_floor_both.c:			if (env->editor.select)
src/draw_vline_floor_both.c:				env->selected_floor = render.sector;
src/draw_vline_floor_both.c:			if (env->playing)
src/draw_vline_floor_both.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_floor_both.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_floor_both.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_floor_both.c:			if (env->editor.in_game && !env->editor.select
src/draw_vline_floor_both.c:					&& env->selected_floor == render.sector
src/draw_vline_floor_both.c:					&& env->selected_floor_sprite == -1)
src/draw_vline_floor_brightness.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_floor_brightness.c:	zbuffer = env->zbuffer;
src/draw_vline_floor_brightness.c:	map_lvl = env->wall_textures[sector.floor_texture].nb_maps - 1;
src/draw_vline_floor_brightness.c:	render.texture_w = env->wall_textures[sector.floor_texture].maps[map_lvl]->w;
src/draw_vline_floor_brightness.c:	render.texture_h = env->wall_textures[sector.floor_texture].maps[map_lvl]->h;
src/draw_vline_floor_brightness.c:		coord = vline.x + env->w * i;
src/draw_vline_floor_brightness.c:		if (env->options.mipmapping)
src/draw_vline_floor_brightness.c:		texture_pixels = (Uint32*)env->wall_textures[sector.floor_texture].
src/draw_vline_floor_brightness.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_floor_brightness.c:			if (env->editor.select)
src/draw_vline_floor_brightness.c:				env->selected_floor = render.sector;
src/draw_vline_floor_brightness.c:			if (env->playing)
src/draw_vline_floor_brightness.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_floor_brightness.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_floor_brightness.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_floor_brightness.c:			if (env->editor.in_game && !env->editor.select
src/draw_vline_floor_brightness.c:					&& env->selected_floor == render.sector
src/draw_vline_floor_brightness.c:					&& env->selected_floor_sprite == -1)
src/draw_vline_floor_color.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_floor_color.c:	zbuffer = env->zbuffer;
src/draw_vline_floor_color.c:	map_lvl = env->wall_textures[sector.floor_texture].nb_maps - 1;
src/draw_vline_floor_color.c:	render.texture_w = env->wall_textures[sector.floor_texture].maps[map_lvl]->w;
src/draw_vline_floor_color.c:	render.texture_h = env->wall_textures[sector.floor_texture].maps[map_lvl]->h;
src/draw_vline_floor_color.c:		coord = vline.x + env->w * i;
src/draw_vline_floor_color.c:		if (env->options.mipmapping)
src/draw_vline_floor_color.c:		texture_pixels = (Uint32*)env->wall_textures[sector.floor_texture].
src/draw_vline_floor_color.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_floor_color.c:			if (env->editor.select)
src/draw_vline_floor_color.c:				env->selected_floor = render.sector;
src/draw_vline_floor_color.c:			if (env->playing)
src/draw_vline_floor_color.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_floor_color.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_floor_color.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_floor_color.c:			if (env->editor.in_game && !env->editor.select
src/draw_vline_floor_color.c:					&& env->selected_floor == render.sector
src/draw_vline_floor_color.c:					&& env->selected_floor_sprite == -1)
src/draw_vline_wall.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_wall.c:	if (env->options.show_minimap)
src/draw_vline_wall.c:	texture_pixels = env->wall_textures[render.texture].maps[render.map_lvl]->pixels;
src/draw_vline_wall.c:	zbuffer = env->zbuffer;
src/draw_vline_wall.c:		coord = vline.x + env->w * i;
src/draw_vline_wall.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_wall.c:			if (env->editor.select)
src/draw_vline_wall.c:				env->editor.selected_sector = sector.num;
src/draw_vline_wall.c:				env->editor.selected_wall = render.i;
src/draw_vline_wall.c:				env->selected_wall1
src/draw_vline_wall.c:				= env->sectors[render.sector].vertices[render.i];
src/draw_vline_wall.c:				env->selected_wall2
src/draw_vline_wall.c:				= env->sectors[render.sector].vertices[render.i + 1];
src/draw_vline_wall.c:			if (env->playing)
src/draw_vline_wall.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_wall.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_wall.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_wall.c:		if (env->editor.in_game && sector.selected[render.i] && !env->editor.select)
src/draw_vline_wall.c:		if (env->options.zbuffer || env->options.contouring)
src/draw_vline_wall_both.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_wall_both.c:	if (env->options.show_minimap)
src/draw_vline_wall_both.c:	texture_pixels = env->wall_textures[render.texture].maps[render.map_lvl]->pixels;
src/draw_vline_wall_both.c:	zbuffer = env->zbuffer;
src/draw_vline_wall_both.c:		coord = vline.x + env->w * i;
src/draw_vline_wall_both.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_wall_both.c:			if (env->editor.select)
src/draw_vline_wall_both.c:				env->editor.selected_sector = sector.num;
src/draw_vline_wall_both.c:				env->editor.selected_wall = render.i;
src/draw_vline_wall_both.c:				env->selected_wall1
src/draw_vline_wall_both.c:				= env->sectors[render.sector].vertices[render.i];
src/draw_vline_wall_both.c:				env->selected_wall2
src/draw_vline_wall_both.c:				= env->sectors[render.sector].vertices[render.i + 1];
src/draw_vline_wall_both.c:			if (env->playing)
src/draw_vline_wall_both.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_wall_both.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_wall_both.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_wall_both.c:		if (env->editor.in_game && sector.selected[render.i] && !env->editor.select)
src/draw_vline_wall_both.c:		if (env->options.zbuffer || env->options.contouring)
src/draw_vline_wall_brightness.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_wall_brightness.c:	if (env->options.show_minimap)
src/draw_vline_wall_brightness.c:	texture_pixels = env->wall_textures[render.texture].maps[render.map_lvl]->pixels;
src/draw_vline_wall_brightness.c:	zbuffer = env->zbuffer;
src/draw_vline_wall_brightness.c:		coord = vline.x + env->w * i;
src/draw_vline_wall_brightness.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_wall_brightness.c:			if (env->editor.select)
src/draw_vline_wall_brightness.c:				env->editor.selected_sector = sector.num;
src/draw_vline_wall_brightness.c:				env->editor.selected_wall = render.i;
src/draw_vline_wall_brightness.c:				env->selected_wall1
src/draw_vline_wall_brightness.c:				= env->sectors[render.sector].vertices[render.i];
src/draw_vline_wall_brightness.c:				env->selected_wall2
src/draw_vline_wall_brightness.c:				= env->sectors[render.sector].vertices[render.i + 1];
src/draw_vline_wall_brightness.c:			if (env->playing)
src/draw_vline_wall_brightness.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_wall_brightness.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_wall_brightness.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_wall_brightness.c:		if (env->editor.in_game && sector.selected[render.i] && !env->editor.select)
src/draw_vline_wall_brightness.c:		if (env->options.zbuffer || env->options.contouring)
src/draw_vline_wall_color.c:	pixels = env->sdl.texture_pixels;
src/draw_vline_wall_color.c:	if (env->options.show_minimap)
src/draw_vline_wall_color.c:	texture_pixels = env->wall_textures[render.texture].maps[render.map_lvl]->pixels;
src/draw_vline_wall_color.c:	zbuffer = env->zbuffer;
src/draw_vline_wall_color.c:		coord = vline.x + env->w * i;
src/draw_vline_wall_color.c:		if (vline.x == env->h_w && i == env->h_h)
src/draw_vline_wall_color.c:			if (env->editor.select)
src/draw_vline_wall_color.c:				env->editor.selected_sector = sector.num;
src/draw_vline_wall_color.c:				env->editor.selected_wall = render.i;
src/draw_vline_wall_color.c:				env->selected_wall1
src/draw_vline_wall_color.c:				= env->sectors[render.sector].vertices[render.i];
src/draw_vline_wall_color.c:				env->selected_wall2
src/draw_vline_wall_color.c:				= env->sectors[render.sector].vertices[render.i + 1];
src/draw_vline_wall_color.c:			if (env->playing)
src/draw_vline_wall_color.c:				env->hovered_wall_sprite_wall = -1;
src/draw_vline_wall_color.c:				env->hovered_wall_sprite_sprite = -1;
src/draw_vline_wall_color.c:				env->hovered_wall_sprite_sector = -1;
src/draw_vline_wall_color.c:		if (env->editor.in_game && sector.selected[render.i] && !env->editor.select)
src/draw_vline_wall_color.c:		if (env->options.zbuffer || env->options.contouring)
src/draw_wall.c:	pixels = env->sdl.texture_pixels;
src/draw_wall.c:		coord = vline.x + env->w * vline.start;
src/draw_wall.c:	if (!env->options.lighting || (!sector.brightness && !sector.intensity))
src/draw_wall.c:	if (!env->options.lighting || (!sector.brightness && !sector.intensity))
src/draw_wall.c:	if (!env->options.lighting || (!sector.brightness && !sector.intensity))
src/draw_wall_bullet_holes.c:	zbuffer = env->zbuffer;
src/draw_wall_bullet_holes.c:	pixels = env->sdl.texture_pixels;
src/draw_wall_bullet_holes.c:	sprite_pixels = env->sprite_textures[35].str;
src/draw_wall_bullet_holes.c:	sprite_w = env->sprite_textures[35].surface->w;
src/draw_wall_bullet_holes.c:	start = env->object_sprites[BULLET_HOLE].start[0].y;
src/draw_wall_bullet_holes.c:	end = env->object_sprites[BULLET_HOLE].end[0].y;
src/draw_wall_bullet_holes.c:		coord = render.x + env->w * i;
src/draw_wall_bullet_holes.c:			if (!env->options.lighting
src/draw_wall_bullet_holes.c:		start = env->object_sprites[BULLET_HOLE].start[0];
src/draw_wall_bullet_holes.c:		end = env->object_sprites[BULLET_HOLE].end[0];
src/draw_wall_sprites.c:	zbuffer = env->zbuffer;
src/draw_wall_sprites.c:	pixels = env->sdl.texture_pixels;
src/draw_wall_sprites.c:	sprite_pixels = env->sprite_textures[env->object_sprites[sector.wall_sprites[render.i]
src/draw_wall_sprites.c:	sprite_w = env->sprite_textures[env->object_sprites[sector.wall_sprites[render.i]
src/draw_wall_sprites.c:	start = env->object_sprites[sector.wall_sprites[render.i].sprite[sprite]].start[0].y;
src/draw_wall_sprites.c:	end = env->object_sprites[sector.wall_sprites[render.i].sprite[sprite]].end[0].y;
src/draw_wall_sprites.c:		coord = render.x + env->w * i;
src/draw_wall_sprites.c:			if (render.x == env->h_w && i == env->h_h)
src/draw_wall_sprites.c:				if (env->editor.select)
src/draw_wall_sprites.c:					if (env->editor.selected_events == 2)
src/draw_wall_sprites.c:						env->editor.selected_events = 1;
src/draw_wall_sprites.c:					env->selected_wall_sprite_wall = render.i;
src/draw_wall_sprites.c:					env->selected_wall_sprite_sprite = sprite;
src/draw_wall_sprites.c:					env->editor.selected_sector = sector.num;
src/draw_wall_sprites.c:				if (env->playing
src/draw_wall_sprites.c:						env->hovered_wall_sprite_wall = render.i;
src/draw_wall_sprites.c:						env->hovered_wall_sprite_sprite = sprite;
src/draw_wall_sprites.c:						env->hovered_wall_sprite_sector = sector.num;
src/draw_wall_sprites.c:						env->hovered_wall_sprite_wall = -1;
src/draw_wall_sprites.c:						env->hovered_wall_sprite_sprite = -1;
src/draw_wall_sprites.c:						env->hovered_wall_sprite_sector = -1;
src/draw_wall_sprites.c:			if (!env->options.lighting
src/draw_wall_sprites.c:			if (!env->editor.select
src/draw_wall_sprites.c:					&& env->editor.selected_sector == sector.num
src/draw_wall_sprites.c:					&& env->selected_wall_sprite_wall == render.i
src/draw_wall_sprites.c:					&& env->selected_wall_sprite_sprite == sprite)
src/draw_wall_sprites.c:			else if (env->playing && env->hovered_wall_sprite_wall == render.i
src/draw_wall_sprites.c:					&& env->hovered_wall_sprite_sprite == sprite)
src/draw_wall_sprites.c:						env->press_wall_sprite_color,
src/draw_wall_sprites.c:						env->press_wall_sprite_intensity);
src/draw_wall_sprites.c:			start = env->object_sprites[sector.wall_sprites[render.i].sprite[i]].start[0];
src/draw_wall_sprites.c:			end = env->object_sprites[sector.wall_sprites[render.i].sprite[i]].end[0];
src/editor.c:	while (env->running)
src/editor.c:		SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/editor.c:		SDL_GetMouseState(&env->sdl.mx, &env->sdl.my);
src/editor.c:		while (SDL_PollEvent(&env->sdl.event))
src/editor.c:			if (env->sdl.event.type == SDL_QUIT || (env->sdl.event.type == SDL_KEYUP && env->sdl.event.key.keysym.sym == SDLK_ESCAPE))
src/editor.c:				env->running = 0;
src/editor.c:			else if (env->sdl.event.type == SDL_KEYDOWN
src/editor.c:					|| env->sdl.event.type == SDL_KEYUP || env->sdl.event.type == SDL_MOUSEBUTTONDOWN
src/editor.c:					|| env->sdl.event.type == SDL_MOUSEBUTTONUP || env->sdl.event.type == SDL_MOUSEWHEEL)
src/editor.c:			if (!env->input_box.state && (env->sdl.event.type == SDL_KEYUP || env->sdl.event.type == SDL_MOUSEBUTTONUP))
src/editor.c:				if (!env->editor.in_game)
src/editor.c:			if (!env->editor.in_game && env->sdl.event.type == SDL_MOUSEWHEEL)
src/editor.c:				if (env->sdl.event.wheel.y > 0 && env->editor.scale * 1.1 < 100)
src/editor.c:					env->editor.center.x = env->sdl.mx + ((env->editor.center.x - env->sdl.mx) * 1.1);
src/editor.c:					env->editor.center.y = env->sdl.my + ((env->editor.center.y - env->sdl.my) * 1.1);
src/editor.c:					env->editor.scale *= 1.1;
src/editor.c:				if (env->sdl.event.wheel.y < 0 && env->editor.scale / 1.1 > 1)
src/editor.c:					env->editor.center.x = env->sdl.mx + ((env->editor.center.x - env->sdl.mx) / 1.1);
src/editor.c:					env->editor.center.y = env->sdl.my + ((env->editor.center.y - env->sdl.my) / 1.1);
src/editor.c:					env->editor.scale /= 1.1;
src/editor.c:			if (env->input_box.state)
src/editor.c:				if (input_box_keys(&env->input_box, env))
src/editor.c:		if (!env->editor.in_game)
src/editor.c:			if (!env->input_box.state)
src/editor.c:			if (env->editor.player_exist || env->editor.dragged_player == 1)
src/editor.c:			if (env->editor.dragged_object != -1 || env->nb_objects > 0)
src/editor.c:			if (env->editor.dragged_enemy != -1 || env->nb_enemies > 0)
src/editor.c:			if (env->editor.start_vertex != -1)
src/editor.c:		if (!env->input_box.state && env->saving)
src/editor.c:		if (env->confirmation_box.state)
src/editor.c:			draw_confirmation_box(&env->confirmation_box, env);
src/editor.c:		if (env->input_box.state)
src/editor.c:			draw_input_box(&env->input_box, env);
src/editor.c:		/*if (env->options.l)
src/editor.c:			while (i < env->wall_textures[8].nb_maps)
src/editor.c:				apply_surface(env->wall_textures[8].maps[i], pos,
src/editor.c:				new_point(env->wall_textures[8].maps[i]->w, env->wall_textures[8].maps[i]->h),
src/editor.c:				pos.y += env->wall_textures[8].maps[i]->w;
src/editor.c:		if (env->options.zbuffer && env->editor.in_game)
src/editor.c:		if (env->editor.game)
src/editor_3d_button_keys.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_object.brightness, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_object.color, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_object.intensity, env))
src/editor_3d_button_keys.c:	if (env->editor.general_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_object.health, env))
src/editor_3d_button_keys.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_wall_sprite.brightness, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_wall_sprite.color, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_wall_sprite.intensity, env))
src/editor_3d_button_keys.c:	if (env->editor.sprite_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.sp_wall_sprite.pos_x, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.sp_wall_sprite.pos_y, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.sp_wall_sprite.scale_x, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.sp_wall_sprite.scale_y, env))
src/editor_3d_button_keys.c:	if (button_keys(&env->editor.hud.sp_ceiling_sprite.pos_x, env))
src/editor_3d_button_keys.c:	if (button_keys(&env->editor.hud.sp_ceiling_sprite.pos_y, env))
src/editor_3d_button_keys.c:	if (button_keys(&env->editor.hud.sp_ceiling_sprite.scale_x, env))
src/editor_3d_button_keys.c:	if (button_keys(&env->editor.hud.sp_ceiling_sprite.scale_y, env))
src/editor_3d_button_keys.c:	if (button_keys(&env->editor.hud.sp_floor_sprite.pos_x, env))
src/editor_3d_button_keys.c:	if (button_keys(&env->editor.hud.sp_floor_sprite.pos_y, env))
src/editor_3d_button_keys.c:	if (button_keys(&env->editor.hud.sp_floor_sprite.scale_x, env))
src/editor_3d_button_keys.c:	if (button_keys(&env->editor.hud.sp_floor_sprite.scale_y, env))
src/editor_3d_button_keys.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_wall.brightness, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_wall.color, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_wall.intensity, env))
src/editor_3d_button_keys.c:	if (env->editor.general_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_wall.texture, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_wall.texture_scale_x, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_wall.texture_scale_y, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_wall.texture_align_x, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_wall.texture_align_y, env))
src/editor_3d_button_keys.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_floor.brightness, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_floor.color, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_floor.intensity, env))
src/editor_3d_button_keys.c:	if (env->editor.general_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_floor.height, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_floor.slope, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_floor.texture, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_floor.texture_scale_x, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_floor.texture_scale_y, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_floor.texture_align_x, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_floor.texture_align_y, env))
src/editor_3d_button_keys.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_ceilling.brightness, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_ceilling.color, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.s_ceilling.intensity, env))
src/editor_3d_button_keys.c:	if (env->editor.general_tab.state == DOWN)
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_ceilling.height, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_ceilling.slope, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_ceilling.texture, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_ceilling.texture_scale_x, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_ceilling.texture_scale_y, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_ceilling.texture_align_x, env))
src/editor_3d_button_keys.c:		if (button_keys(&env->editor.hud.g_ceilling.texture_align_y, env))
src/editor_3d_button_keyup.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.s_object.brightness, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.s_object.color, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.s_object.intensity, env))
src/editor_3d_button_keyup.c:	if (env->editor.general_tab.state == DOWN)
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.g_object.health, env))
src/editor_3d_button_keyup.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.s_wall_sprite.brightness, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.s_wall_sprite.color, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.s_wall_sprite.intensity, env))
src/editor_3d_button_keyup.c:	if (env->editor.sprite_tab.state == DOWN)
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.sp_wall_sprite.pos_x, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.sp_wall_sprite.pos_y, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.sp_wall_sprite.scale_x, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.sp_wall_sprite.scale_y, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.sp_ceiling_sprite.pos_x, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.sp_ceiling_sprite.pos_y, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.sp_ceiling_sprite.scale_x, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.sp_ceiling_sprite.scale_y, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.sp_floor_sprite.pos_x, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.sp_floor_sprite.pos_y, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.sp_floor_sprite.scale_x, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.sp_floor_sprite.scale_y, env))
src/editor_3d_button_keyup.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.s_wall.brightness, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.s_wall.color, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.s_wall.intensity, env))
src/editor_3d_button_keyup.c:	if (env->editor.general_tab.state == DOWN)
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.g_wall.texture, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.g_wall.texture_scale_x, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.g_wall.texture_scale_y, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.g_wall.texture_align_x, env))
src/editor_3d_button_keyup.c:		if (button_keyup(&env->editor.hud.g_wall.texture_align_y, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.s_floor.brightness, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.s_floor.color, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.s_floor.intensity, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_floor.height, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_floor.slope, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_floor.texture, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_floor.texture_scale_x, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_floor.texture_scale_y, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_floor.texture_align_x, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_floor.texture_align_y, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.s_ceilling.brightness, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.s_ceilling.color, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.s_ceilling.intensity, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_ceilling.height, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_ceilling.slope, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_ceilling.texture, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_ceilling.texture_scale_x, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_ceilling.texture_scale_y, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_ceilling.texture_align_x, env))
src/editor_3d_button_keyup.c:	if (button_keyup(&env->editor.hud.g_ceilling.texture_align_y, env))
src/editor_3d_keys.c:	if (env->inputs.forward || env->inputs.backward || env->inputs.left
src/editor_3d_keys.c:			|| env->inputs.right)
src/editor_3d_keys.c:		play_sound(env, &env->sound.footstep_chan, env->sound.footstep,
src/editor_3d_keys.c:			env->sound.ambient_vol);
src/editor_3d_keys.c:	if ((((env->inputs.forward || env->inputs.backward || env->inputs.left
src/editor_3d_keys.c:						|| env->inputs.right || env->inputs.space || env->jump.on_going == 1
src/editor_3d_keys.c:						|| env->crouch.on_going || env->inputs.lgui)
src/editor_3d_keys.c:					&& env->player.health > 0 && !env->inputs.ctrl
src/editor_3d_keys.c:					&&  (((env->selected_enemy == -1 && env->editor.tab)
src/editor_3d_keys.c:							|| (env->selected_enemy != -1 && !env->editor.tab))
src/editor_3d_keys.c:						|| (env->selected_enemy == -1 && !env->editor.tab)))
src/editor_3d_keys.c:				|| (env->player.state.climb || env->player.state.drop))
src/editor_3d_keys.c:			&& !env->editor.tab)
src/editor_3d_keys.c:	if (env->inputs.plus && !env->inputs.shift
src/editor_3d_keys.c:			&& env->options.minimap_scale * 1.2 < 100)
src/editor_3d_keys.c:		env->options.minimap_scale *= 1.2;
src/editor_3d_keys.c:	if (env->inputs.minus && !env->inputs.shift
src/editor_3d_keys.c:			&& env->options.minimap_scale / 1.2 > 1)
src/editor_3d_keys.c:		env->options.minimap_scale /= 1.2;
src/editor_3d_keys.c:	if (env->editor.in_game && env->inputs.right_click)
src/editor_3d_keys.c:	if (env->inputs.s && env->inputs.ctrl && !valid_map(env))
src/editor_3d_keys.c:		SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/editor_3d_keys.c:		new_input_box(&env->input_box, new_point(env->h_w, env->h_h),
src/editor_3d_keys.c:				STRING, &env->save_file);
src/editor_3d_keys.c:		env->inputs.s = 0;
src/editor_3d_keys.c:		env->inputs.ctrl = 0;
src/editor_3d_keys.c:	if (env->confirmation_box.state)
src/editor_3d_keys.c:		if (confirmation_box_keys(&env->confirmation_box, env))
src/editor_3d_keys.c:	 **	"&& (env->inputs.down || env->inputs.up))": reset time only if those keys are pressed
src/editor_3d_keys.c:	if (env->editor.tab && env->editor.in_game
src/editor_3d_keys.c:			&& env->editor.selected_wall != -1
src/editor_3d_keys.c:			&& (env->inputs.down || env->inputs.up))
src/editor_3d_keys.c:		if (time - env->time.scroll_tick > 200)
src/editor_3d_keys.c:			env->time.scroll_tick = time;
src/editor_3d_keys.c:			if (env->inputs.down)
src/editor_3d_keys.c:				if (env->inputs.shift
src/editor_3d_keys.c:						&& env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall] > 8)
src/editor_3d_keys.c:					env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall] -= 10;
src/editor_3d_keys.c:				else if (env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall] > -MAX_SKYBOX)
src/editor_3d_keys.c:					env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall] -= 1;
src/editor_3d_keys.c:			else if (env->inputs.up)
src/editor_3d_keys.c:				if (env->inputs.shift
src/editor_3d_keys.c:						&& env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall] < MAX_WALL_TEXTURE - 10)
src/editor_3d_keys.c:					env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall] += 10;
src/editor_3d_keys.c:				else if (env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall] < MAX_WALL_TEXTURE - 1)
src/editor_3d_keys.c:					env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall]++;
src/editor_3d_keys.c:			if (env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall] < 0)
src/editor_3d_keys.c:				env->contains_skybox = 1;
src/editor_3d_keys.c:			if (set_sector_wall_map_array(&env->sectors[env->editor.
src/editor_3d_keys.c:						selected_sector], env->wall_textures[env->sectors[env->
src/editor_3d_keys.c:						editor.selected_sector].textures[env->editor.selected_wall]],
src/editor_3d_keys.c:						env->editor.selected_wall, env))
src/editor_3d_keys.c:			if (set_camera_map_array(&env->player.camera,
src/editor_3d_keys.c:						env->editor.selected_sector, env->editor.selected_wall, env))
src/editor_3d_keys.c:	if (env->editor.in_game
src/editor_3d_keys.c:			&& env->editor.selected_wall != -1)
src/editor_3d_keys.c:		if (env->inputs.comma)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].y -= 1;
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].x -= 1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].y -= 1;
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].x -= 1;
src/editor_3d_keys.c:		if (env->inputs.period)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].y += 1;
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].x += 1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].y += 1;
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].x += 1;
src/editor_3d_keys.c:		if (env->inputs.equals)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].y *= 1.1;
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].x *= 1.1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].y *= 1.1;
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].x *= 1.1;
src/editor_3d_keys.c:			if (set_sector_wall_map_array(&env->sectors[env->editor.selected_sector],
src/editor_3d_keys.c:						env->wall_textures[env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall]], env->editor.selected_wall, env))
src/editor_3d_keys.c:			if (set_camera_map_array(&env->player.camera,
src/editor_3d_keys.c:						env->editor.selected_sector, env->editor.selected_wall, env))
src/editor_3d_keys.c:		if (env->inputs.minus1)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].y /= 1.1;
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].x /= 1.1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].y /= 1.1;
src/editor_3d_keys.c:				env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].x /= 1.1;
src/editor_3d_keys.c:			if (set_sector_wall_map_array(&env->sectors[env->editor.selected_sector],
src/editor_3d_keys.c:						env->wall_textures[env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall]], env->editor.selected_wall, env))
src/editor_3d_keys.c:			if (set_camera_map_array(&env->player.camera,
src/editor_3d_keys.c:						env->editor.selected_sector, env->editor.selected_wall, env))
src/editor_3d_keys.c:	if (env->editor.in_game
src/editor_3d_keys.c:			&& env->editor.selected_sector != -1
src/editor_3d_keys.c:			&& env->selected_wall_sprite_wall != -1
src/editor_3d_keys.c:			&& env->selected_wall_sprite_sprite != -1)
src/editor_3d_keys.c:				&env->sectors[env->editor.selected_sector].
src/editor_3d_keys.c:				wall_sprites[env->selected_wall_sprite_wall].
src/editor_3d_keys.c:				pos[env->selected_wall_sprite_sprite],
src/editor_3d_keys.c:				&env->sectors[env->editor.selected_sector].
src/editor_3d_keys.c:				wall_sprites[env->selected_wall_sprite_wall].
src/editor_3d_keys.c:				scale[env->selected_wall_sprite_sprite]);
src/editor_3d_keys.c:	if (env->editor.in_game
src/editor_3d_keys.c:			&& env->selected_ceiling != -1
src/editor_3d_keys.c:			&& env->selected_ceiling_sprite != -1)
src/editor_3d_keys.c:				&env->sectors[env->selected_ceiling].
src/editor_3d_keys.c:				ceiling_sprites.pos[env->selected_ceiling_sprite],
src/editor_3d_keys.c:				&env->sectors[env->selected_ceiling].
src/editor_3d_keys.c:				ceiling_sprites.scale[env->selected_ceiling_sprite]);
src/editor_3d_keys.c:	if (env->editor.in_game
src/editor_3d_keys.c:			&& env->selected_floor != -1
src/editor_3d_keys.c:			&& env->selected_floor_sprite != -1)
src/editor_3d_keys.c:				&env->sectors[env->selected_floor].
src/editor_3d_keys.c:				floor_sprites.pos[env->selected_floor_sprite],
src/editor_3d_keys.c:				&env->sectors[env->selected_floor].
src/editor_3d_keys.c:				floor_sprites.scale[env->selected_floor_sprite]);
src/editor_3d_keys.c:	if (env->editor.in_game && env->selected_ceiling != -1
src/editor_3d_keys.c:			&& env->selected_ceiling_sprite == -1
src/editor_3d_keys.c:			&& (env->inputs.down || env->inputs.up
src/editor_3d_keys.c:				|| env->inputs.plus || env->inputs.minus
src/editor_3d_keys.c:				|| env->inputs.comma || env->inputs.period
src/editor_3d_keys.c:				|| env->inputs.equals || env->inputs.minus1))
src/editor_3d_keys.c:		if (time - env->time.scroll_tick > 200)
src/editor_3d_keys.c:			env->time.scroll_tick = time;
src/editor_3d_keys.c:			if (env->inputs.down && env->editor.tab)
src/editor_3d_keys.c:				if (env->inputs.shift
src/editor_3d_keys.c:						&& env->sectors[env->selected_ceiling].ceiling_texture > 9 - MAX_SKYBOX)
src/editor_3d_keys.c:					env->sectors[env->selected_ceiling].ceiling_texture -= 10;
src/editor_3d_keys.c:				else if (env->sectors[env->selected_ceiling].ceiling_texture > -MAX_SKYBOX)
src/editor_3d_keys.c:					env->sectors[env->selected_ceiling].ceiling_texture--;
src/editor_3d_keys.c:			else if (env->inputs.up && env->editor.tab)
src/editor_3d_keys.c:				if (env->inputs.shift
src/editor_3d_keys.c:						&& env->sectors[env->selected_ceiling].ceiling_texture < MAX_WALL_TEXTURE - 10)
src/editor_3d_keys.c:					env->sectors[env->selected_ceiling].ceiling_texture += 10;
src/editor_3d_keys.c:				else if (env->sectors[env->selected_ceiling].ceiling_texture < MAX_WALL_TEXTURE - 1)
src/editor_3d_keys.c:					env->sectors[env->selected_ceiling].ceiling_texture++;
src/editor_3d_keys.c:			if (env->sectors[env->selected_ceiling].ceiling_texture < 0)
src/editor_3d_keys.c:				env->contains_skybox = 1;
src/editor_3d_keys.c:		if (env->inputs.plus
src/editor_3d_keys.c:				&& env->sectors[env->selected_ceiling].ceiling > env->sectors[env->selected_ceiling].floor + 1)
src/editor_3d_keys.c:			env->sectors[env->selected_ceiling].ceiling += 0.05;
src/editor_3d_keys.c:		if (env->inputs.minus
src/editor_3d_keys.c:				&& env->sectors[env->selected_ceiling].ceiling)
src/editor_3d_keys.c:			env->sectors[env->selected_ceiling].ceiling -= 0.05;
src/editor_3d_keys.c:		update_sector_slope(env, &env->sectors[env->selected_ceiling]);
src/editor_3d_keys.c:		if (env->inputs.comma)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_align.y -= 1;
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_align.x -= 1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_align.y -= 1;
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_align.x -= 1;
src/editor_3d_keys.c:		if (env->inputs.period)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_align.y += 1;
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_align.x += 1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_align.y += 1;
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_align.x += 1;
src/editor_3d_keys.c:		if (env->inputs.equals)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_scale.y /= 1.1;
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_scale.x /= 1.1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_scale.y /= 1.1;
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_scale.x /= 1.1;
src/editor_3d_keys.c:		if (env->inputs.minus1)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_scale.y *= 1.1;
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_scale.x *= 1.1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_scale.y *= 1.1;
src/editor_3d_keys.c:				env->sectors[env->selected_ceiling].ceiling_map_scale.x *= 1.1;
src/editor_3d_keys.c:		if (set_sector_ceiling_map_array(&env->sectors[env->selected_ceiling],
src/editor_3d_keys.c:					env->wall_textures[env->sectors[env->selected_ceiling].
src/editor_3d_keys.c:	if (env->editor.in_game && env->selected_floor != -1
src/editor_3d_keys.c:			&& env->selected_floor_sprite == -1
src/editor_3d_keys.c:			&& (env->inputs.down || env->inputs.up
src/editor_3d_keys.c:				|| env->inputs.plus || env->inputs.minus
src/editor_3d_keys.c:				|| env->inputs.comma || env->inputs.period
src/editor_3d_keys.c:				|| env->inputs.equals || env->inputs.minus1))
src/editor_3d_keys.c:		if (time - env->time.tick > 200 && env->editor.tab)
src/editor_3d_keys.c:			env->time.tick = time;
src/editor_3d_keys.c:			if (env->inputs.down && env->editor.tab)
src/editor_3d_keys.c:				if (env->inputs.shift
src/editor_3d_keys.c:						&& env->sectors[env->selected_floor].floor_texture > 9 - MAX_SKYBOX)
src/editor_3d_keys.c:					env->sectors[env->selected_floor].floor_texture -= 10;
src/editor_3d_keys.c:				else if (env->sectors[env->selected_floor].floor_texture > -MAX_SKYBOX)
src/editor_3d_keys.c:					env->sectors[env->selected_floor].floor_texture--;
src/editor_3d_keys.c:			else if (env->inputs.up && env->editor.tab)
src/editor_3d_keys.c:				if (env->inputs.shift
src/editor_3d_keys.c:						&& env->sectors[env->selected_floor].floor_texture < MAX_WALL_TEXTURE - 10)
src/editor_3d_keys.c:					env->sectors[env->selected_floor].floor_texture += 10;
src/editor_3d_keys.c:				else if (env->sectors[env->selected_floor].floor_texture < MAX_WALL_TEXTURE - 1)
src/editor_3d_keys.c:					env->sectors[env->selected_floor].floor_texture++;
src/editor_3d_keys.c:			if (env->sectors[env->selected_floor].floor_texture < 0)
src/editor_3d_keys.c:				env->contains_skybox = 1;
src/editor_3d_keys.c:		if (env->inputs.plus
src/editor_3d_keys.c:				&& env->sectors[env->selected_floor].floor < env->sectors[env->selected_floor].ceiling - 1)
src/editor_3d_keys.c:			env->sectors[env->selected_floor].floor += 0.05;
src/editor_3d_keys.c:		else if (env->inputs.minus)
src/editor_3d_keys.c:			env->sectors[env->selected_floor].floor -= 0.05;
src/editor_3d_keys.c:		update_sector_slope(env, &env->sectors[env->selected_floor]);
src/editor_3d_keys.c:		if (env->inputs.comma)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_align.y -= 1;
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_align.x -= 1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_align.y -= 1;
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_align.x -= 1;
src/editor_3d_keys.c:		if (env->inputs.period)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_align.y += 1;
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_align.x += 1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_align.y += 1;
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_align.x += 1;
src/editor_3d_keys.c:		if (env->inputs.equals)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_scale.y /= 1.1;
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_scale.x /= 1.1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_scale.y /= 1.1;
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_scale.x /= 1.1;
src/editor_3d_keys.c:		if (env->inputs.minus1)
src/editor_3d_keys.c:			if (env->inputs.shift && !env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_scale.y *= 1.1;
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_scale.x *= 1.1;
src/editor_3d_keys.c:			else if (env->inputs.ctrl)
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_scale.y *= 1.1;
src/editor_3d_keys.c:				env->sectors[env->selected_floor].floor_map_scale.x *= 1.1;
src/editor_3d_keys.c:		if (set_sector_floor_map_array(&env->sectors[env->selected_floor],
src/editor_3d_keys.c:					env->wall_textures[env->sectors[env->selected_floor].floor_texture],
src/editor_3d_keys.c:	if (env->inputs.down && !env->inputs.shift && !env->editor.tab
src/editor_3d_keys.c:			&& env->editor.in_game && env->selected_ceiling != -1)
src/editor_3d_keys.c:		env->sectors[env->selected_ceiling].ceiling_slope -= 0.01;
src/editor_3d_keys.c:		update_sector_slope(env, &env->sectors[env->selected_ceiling]);
src/editor_3d_keys.c:	if (env->inputs.up && !env->inputs.shift && !env->editor.tab
src/editor_3d_keys.c:			&& env->editor.in_game && env->selected_ceiling != -1)
src/editor_3d_keys.c:		env->sectors[env->selected_ceiling].ceiling_slope += 0.01;
src/editor_3d_keys.c:		update_sector_slope(env, &env->sectors[env->selected_ceiling]);
src/editor_3d_keys.c:	if (env->selected_ceiling != -1 && env->sectors[env->selected_ceiling].ceiling_slope <= 0.02
src/editor_3d_keys.c:			&& env->sectors[env->selected_ceiling].ceiling_slope >= -0.02 && (!env->inputs.up && !env->inputs.down))
src/editor_3d_keys.c:		env->sectors[env->selected_ceiling].ceiling_slope = 0;
src/editor_3d_keys.c:	if (env->inputs.down && !env->inputs.shift && !env->editor.tab
src/editor_3d_keys.c:			&& env->editor.in_game && env->selected_floor != -1)
src/editor_3d_keys.c:		env->sectors[env->selected_floor].floor_slope -= 0.01;
src/editor_3d_keys.c:		update_sector_slope(env, &env->sectors[env->selected_floor]);
src/editor_3d_keys.c:	if (env->inputs.up && !env->inputs.shift && !env->editor.tab
src/editor_3d_keys.c:			&& env->editor.in_game && env->selected_floor != -1)
src/editor_3d_keys.c:		env->sectors[env->selected_floor].floor_slope += 0.01;
src/editor_3d_keys.c:		update_sector_slope(env, &env->sectors[env->selected_floor]);
src/editor_3d_keys.c:	if (env->selected_floor != -1 && env->sectors[env->selected_floor].floor_slope <= 0.02
src/editor_3d_keys.c:			&& env->sectors[env->selected_floor].floor_slope >= -0.02 && (!env->inputs.up && !env->inputs.down))
src/editor_3d_keys.c:		env->sectors[env->selected_floor].floor_slope = 0;
src/editor_3d_keys.c:	if (env->selected_floor != -1 && env->editor.in_game && env->inputs.ctrl)
src/editor_3d_keys.c:		if (!env->time.tick3)
src/editor_3d_keys.c:			env->time.tick3 = SDL_GetTicks();
src/editor_3d_keys.c:		if (env->inputs.left && time - env->time.tick3 > 250)
src/editor_3d_keys.c:			env->sectors[env->selected_floor] = rotate_vertices(env, 1, env->selected_floor);
src/editor_3d_keys.c:			env->time.tick3 = time;
src/editor_3d_keys.c:		else if (env->inputs.right && time - env->time.tick3 > 250)
src/editor_3d_keys.c:			env->sectors[env->selected_floor] = rotate_vertices(env, -1, env->selected_floor);
src/editor_3d_keys.c:			env->time.tick3 = time;
src/editor_3d_keys.c:		env->sectors[env->selected_floor].normal = get_sector_normal(env->sectors[env->selected_floor], env);
src/editor_3d_keys.c:		update_sector_slope(env, &env->sectors[env->selected_floor]);
src/editor_3d_keys.c:		while (i < env->nb_sectors)
src/editor_3d_keys.c:			create_portals(env, env->sectors[i]);
src/editor_3d_keys.c:	if (env->selected_ceiling != -1 && env->editor.in_game && env->inputs.ctrl)
src/editor_3d_keys.c:		if (!env->time.tick3)
src/editor_3d_keys.c:			env->time.tick3 = SDL_GetTicks();
src/editor_3d_keys.c:		if (env->inputs.left && time - env->time.tick3 > 250)
src/editor_3d_keys.c:			env->sectors[env->selected_ceiling] = rotate_vertices(env, 1, env->selected_ceiling);
src/editor_3d_keys.c:			env->time.tick3 = time;
src/editor_3d_keys.c:		else if (env->inputs.right && time - env->time.tick3 > 250)
src/editor_3d_keys.c:			env->sectors[env->selected_ceiling] = rotate_vertices(env, -1, env->selected_ceiling);
src/editor_3d_keys.c:			env->time.tick3 = time;
src/editor_3d_keys.c:		env->sectors[env->selected_ceiling].normal = get_sector_normal(env->sectors[env->selected_ceiling], env);
src/editor_3d_keys.c:		update_sector_slope(env, &env->sectors[env->selected_ceiling]);
src/editor_3d_keys.c:		while (i < env->nb_sectors)
src/editor_3d_keys.c:			create_portals(env, env->sectors[i]);
src/editor_3d_keys.c:	if (env->inputs.right_click && !env->option)
src/editor_3d_keys.c:		//ft_printf("player pos %f, %f\n", env->player.pos.x, env->player.pos.y);
src/editor_3d_keys.c:		if (env->weapons[env->player.curr_weapon].ammo < env->weapons[env->player.curr_weapon].max_ammo)
src/editor_3d_keys.c:			env->weapons[env->player.curr_weapon].ammo++;
src/editor_3d_keys.c:	if (env->editor.tab)
src/editor_3d_keys.c:		if (button_keys(&env->editor.save, env))
src/editor_3d_keys.c:		if (button_keys(&env->editor.sprite_tab, env))
src/editor_3d_keys.c:		else if (button_keys(&env->editor.general_tab, env))
src/editor_3d_keys.c:		else if (button_keys(&env->editor.sector_tab, env))
src/editor_3d_keys.c:		if (button_keys(&env->editor.change_mode, env))
src/editor_3d_keys.c:		if (button_keys(&env->editor.launch_game, env))
src/editor_3d_keys.c:		if (button_keys(&env->editor.texture_background, env))
src/editor_3d_keys.c:			if (button_keys(&env->editor.events_tab, env))
src/editor_3d_keys.c:			if (env->editor.events_tab.state == DOWN)
src/editor_3d_keys.c:				if (button_keys(&env->editor.next_events, env))
src/editor_3d_keys.c:				if (button_keys(&env->editor.previous_events, env))
src/editor_3d_keys.c:				if (button_keys(&env->editor.next_event, env))
src/editor_3d_keys.c:				if (button_keys(&env->editor.previous_event, env))
src/editor_3d_keys.c:				if (button_keys(&env->editor.next_launch_condition, env))
src/editor_3d_keys.c:				if (button_keys(&env->editor.previous_launch_condition, env))
src/editor_3d_keys.c:				if (button_keys(&env->editor.next_exec_condition, env))
src/editor_3d_keys.c:				if (button_keys(&env->editor.previous_exec_condition, env))
src/editor_3d_keys.c:		if (env->selected_ceiling != -1 && ceiling_buttons(env))
src/editor_3d_keys.c:		if (env->selected_floor != -1 && floor_buttons(env))
src/editor_3d_keys.c:		if (env->editor.selected_wall != -1 && wall_buttons(env))
src/editor_3d_keys.c:		if (env->selected_enemy != -1 && enemy_buttons(env))
src/editor_3d_keys.c:		if (env->selected_object != -1 && object_buttons(env))
src/editor_3d_keys.c:		if ((env->selected_floor_sprite != -1 || env->selected_ceiling_sprite != -1
src/editor_3d_keys.c:		|| env->selected_wall_sprite_sprite != -1) && env->editor.sprite_tab.state == DOWN)
src/editor_3d_keys.c:			if (button_keys(&env->editor.next_sprite, env))
src/editor_3d_keys.c:			if (button_keys(&env->editor.previous_sprite, env))
src/editor_3d_keys.c:			if (button_keys(&env->editor.current_sprite_selection, env))
src/editor_3d_keys.c:		if (env->selected_floor_sprite != -1 && floor_sprite_buttons(env))
src/editor_3d_keys.c:		if (env->selected_ceiling_sprite != -1 && ceiling_sprite_buttons(env))
src/editor_3d_keys.c:		if (env->selected_wall_sprite_sprite != -1 && wall_sprite_buttons(env))
src/editor_3d_keys.c:	if (env->editor.tab)
src/editor_3d_keys.c:		if (env->editor.draw_selection_tab)
src/editor_3d_keys.c:				if (button_keys(&env->editor.textures[i], env))
src/editor_3d_keys.c:				if (button_keys(&env->editor.skyboxes[i], env))
src/editor_3d_keys.c:		if (env->editor.draw_enemy_tab)
src/editor_3d_keys.c:				if (button_keys(&env->editor.enemy_tab[i], env))
src/editor_3d_keys.c:		if (env->editor.draw_sprite_tab)
src/editor_3d_keys.c:				if (button_keys(&env->editor.sprite_selection[i], env))
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == env->keys.enter
src/editor_3d_keyup.c:			&& !env->confirmation_box.state && !env->input_box.state
src/editor_3d_keyup.c:			&& !env->editor.enter_locked)
src/editor_3d_keyup.c:		env->editor.in_game = 0;
src/editor_3d_keyup.c:		env->inputs.enter = 0;
src/editor_3d_keyup.c:		env->editor.sprite_tab.state = UP;
src/editor_3d_keyup.c:		env->editor.general_tab.state = UP;
src/editor_3d_keyup.c:		env->editor.sector_tab.state = UP;
src/editor_3d_keyup.c:		env->editor.sprite_tab.anim_state = REST;
src/editor_3d_keyup.c:		env->editor.general_tab.anim_state = REST;
src/editor_3d_keyup.c:		env->editor.sector_tab.anim_state = REST;
src/editor_3d_keyup.c:	if (env->editor.in_game
src/editor_3d_keyup.c:			&& env->sdl.event.button.button == SDL_BUTTON_LEFT && !env->editor.tab)
src/editor_3d_keyup.c:		env->editor.select = 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_c)
src/editor_3d_keyup.c:		env->options.contouring = env->options.contouring ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_l)
src/editor_3d_keyup.c:		env->options.lighting = env->options.lighting ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_m)
src/editor_3d_keyup.c:		env->options.show_minimap = env->options.show_minimap ? 0 : 1;
src/editor_3d_keyup.c:		env->options.mipmapping = env->options.mipmapping ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_x)
src/editor_3d_keyup.c:		env->options.wall_lover = env->options.wall_lover ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_j)
src/editor_3d_keyup.c:		env->options.color_clipping = env->options.color_clipping ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_g)
src/editor_3d_keyup.c:		env->options.wall_color = env->options.wall_color ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_t)
src/editor_3d_keyup.c:		env->options.test = env->options.test ? 0 : 1;
src/editor_3d_keyup.c:		if (env->editor.selected_sector != -1
src/editor_3d_keyup.c:				&& env->editor.current_texture >= 0
src/editor_3d_keyup.c:				&& env->editor.current_texture < MAX_WALL_TEXTURE)
src/editor_3d_keyup.c:			if (apply_texture(env->editor.current_texture,
src/editor_3d_keyup.c:						&env->sectors[env->editor.selected_sector], env))
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_n)
src/editor_3d_keyup.c:		env->drawing = env->drawing ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_l)
src/editor_3d_keyup.c:		env->options.l = env->options.l ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_o)
src/editor_3d_keyup.c:		env->options.o = env->options.o ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_f)
src/editor_3d_keyup.c:		env->player.state.fly = env->player.state.fly ? 0 : 1;
src/editor_3d_keyup.c:		env->player.pos.z += 0.01;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_TAB)
src/editor_3d_keyup.c:		if (env->editor.tab)
src/editor_3d_keyup.c:		env->editor.tab = env->editor.tab ? 0 : 1;
src/editor_3d_keyup.c:		//env->options.mouse = env->options.mouse ? 0 : 1;
src/editor_3d_keyup.c:		SDL_GetRelativeMouseState(&env->sdl.mouse_x,
src/editor_3d_keyup.c:				&env->sdl.mouse_y);
src/editor_3d_keyup.c:		SDL_GetRelativeMouseState(&env->sdl.mouse_x,
src/editor_3d_keyup.c:				&env->sdl.mouse_y);
src/editor_3d_keyup.c:		if (!env->editor.tab)
src/editor_3d_keyup.c:			env->editor.sprite_tab.state = UP;
src/editor_3d_keyup.c:			env->editor.general_tab.state = UP;
src/editor_3d_keyup.c:			env->editor.sector_tab.state = UP;
src/editor_3d_keyup.c:			env->editor.sprite_tab.anim_state = REST;
src/editor_3d_keyup.c:			env->editor.general_tab.anim_state = REST;
src/editor_3d_keyup.c:			env->editor.sector_tab.anim_state = REST;
src/editor_3d_keyup.c:		if (env->sdl.event.key.keysym.sym == env->keys.enter
src/editor_3d_keyup.c:			&& env->editor.enter_locked)
src/editor_3d_keyup.c:		env->editor.enter_locked = 0;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_z)
src/editor_3d_keyup.c:		env->options.zbuffer = env->options.zbuffer ? 0 : 1;
src/editor_3d_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_g)
src/editor_3d_keyup.c:		env->editor.game = env->editor.game ? 0 : 1;
src/editor_3d_keyup.c:	if (env->confirmation_box.state)
src/editor_3d_keyup.c:		if (confirmation_box_keyup(&env->confirmation_box, env))
src/editor_3d_keyup.c:	if (env->editor.tab)
src/editor_3d_keyup.c:		if (button_keyup(&env->editor.save, env))
src/editor_3d_keyup.c:		if (button_keyup(&env->editor.sprite_tab, env))
src/editor_3d_keyup.c:		else if (button_keyup(&env->editor.general_tab, env))
src/editor_3d_keyup.c:		else if (button_keyup(&env->editor.sector_tab, env))
src/editor_3d_keyup.c:		if (button_keyup(&env->editor.change_mode, env))	
src/editor_3d_keyup.c:		if (button_keyup(&env->editor.launch_game, env))
src/editor_3d_keyup.c:		if (button_keyup(&env->editor.texture_background, env))
src/editor_3d_keyup.c:			if (button_keyup(&env->editor.events_tab, env))
src/editor_3d_keyup.c:			if (env->editor.events_tab.state == DOWN)
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.next_events, env))
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.previous_events, env))
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.next_event, env))
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.previous_event, env))
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.next_launch_condition, env))
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.previous_launch_condition, env))
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.next_exec_condition, env))
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.previous_exec_condition, env))
src/editor_3d_keyup.c:		if (env->selected_ceiling != -1 && ceiling_buttons_up(env))
src/editor_3d_keyup.c:		if (env->editor.selected_wall != -1 && wall_buttons_up(env))
src/editor_3d_keyup.c:		if (env->selected_floor != -1 && floor_buttons_up(env))
src/editor_3d_keyup.c:		if (env->selected_enemy != -1 && enemy_buttons_up(env))
src/editor_3d_keyup.c:		if (env->selected_object != -1 && object_buttons_up(env))
src/editor_3d_keyup.c:		if (env->selected_floor_sprite != -1 && floor_sprite_buttons_up(env))
src/editor_3d_keyup.c:		if (env->selected_ceiling_sprite != -1 && ceiling_sprite_buttons_up(env))
src/editor_3d_keyup.c:		if (env->selected_wall_sprite_sprite != -1 && wall_sprite_buttons_up(env))
src/editor_3d_keyup.c:		if ((env->selected_floor_sprite != -1 || env->selected_ceiling_sprite != -1
src/editor_3d_keyup.c:		|| env->selected_wall_sprite_sprite != -1) && env->editor.sprite_tab.state == DOWN)
src/editor_3d_keyup.c:			if (button_keyup(&env->editor.next_sprite, env))
src/editor_3d_keyup.c:			if (button_keyup(&env->editor.previous_sprite, env))
src/editor_3d_keyup.c:			if (button_keyup(&env->editor.current_sprite_selection, env))
src/editor_3d_keyup.c:		if (env->editor.draw_selection_tab)
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.textures[i], env))
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.skyboxes[i], env))
src/editor_3d_keyup.c:		if (env->editor.draw_enemy_tab)
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.enemy_tab[i], env))
src/editor_3d_keyup.c:		if (env->editor.draw_sprite_tab)
src/editor_3d_keyup.c:				if (button_keyup(&env->editor.sprite_selection[i], env))
src/editor_3d_keyup.c:		if (env->sdl.event.button.button == SDL_BUTTON_LEFT && (env->sdl.mx < 74 && env->sdl.mx > 10)
src/editor_3d_keyup.c:				&& (env->sdl.my < 414 && env->sdl.my > 350))
src/editor_3d_keyup.c:			env->editor.draw_selection_tab = 1;
src/editor_3d_keyup.c:		else if (env->editor.draw_selection_tab && env->sdl.event.button.button == SDL_BUTTON_LEFT
src/editor_3d_keyup.c:		&& env->editor.current_enemy_selection.state == UP)
src/editor_3d_keyup.c:			env->editor.draw_selection_tab = 0;
src/editor_3d_keyup.c:		if (env->editor.draw_enemy_tab && env->sdl.event.button.button == SDL_BUTTON_LEFT
src/editor_3d_keyup.c:		&& env->editor.current_enemy_selection.state == DOWN)
src/editor_3d_keyup.c:			env->editor.current_enemy_selection.state = UP;
src/editor_3d_keyup.c:			env->editor.current_enemy_selection.anim_state = REST;
src/editor_3d_keyup.c:		else if (env->editor.draw_enemy_tab && env->sdl.event.button.button == SDL_BUTTON_LEFT
src/editor_3d_keyup.c:		&& env->editor.current_enemy_selection.state == UP)
src/editor_3d_keyup.c:			env->editor.draw_enemy_tab = 0;
src/editor_3d_keyup.c:		if (env->editor.draw_sprite_tab && env->sdl.event.button.button == SDL_BUTTON_LEFT
src/editor_3d_keyup.c:		&& env->editor.current_sprite_selection.state == DOWN)
src/editor_3d_keyup.c:			env->editor.current_sprite_selection.state = UP;
src/editor_3d_keyup.c:			env->editor.current_sprite_selection.anim_state = REST;
src/editor_3d_keyup.c:		else if (env->editor.draw_sprite_tab && env->sdl.event.button.button == SDL_BUTTON_LEFT
src/editor_3d_keyup.c:		&& env->editor.current_sprite_selection.state == UP)
src/editor_3d_keyup.c:			env->editor.draw_sprite_tab = 0;
src/editor_button_keys.c:	if (button_keys(&env->editor.current_enemy_selection, env))
src/editor_button_keys.c:	if (button_keys(&env->editor.enemy_background, env))
src/editor_button_keys.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.s_enemy.brightness, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.s_enemy.color, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.s_enemy.intensity, env))
src/editor_button_keys.c:	if (env->editor.general_tab.state == DOWN)
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_enemy.health, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_enemy.speed, env))
src/editor_button_keys.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.s_player.brightness, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.s_player.color, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.s_player.intensity, env))
src/editor_button_keys.c:	if (env->editor.general_tab.state == DOWN)
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_player.health, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_player.armor, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_player.speed, env))
src/editor_button_keys.c:	if (env->editor.general_tab.state == DOWN)
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_sector.brightness, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_sector.color, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_sector.intensity, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_sector.floor, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_sector.ceiling, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_sector.floor_slope, env))
src/editor_button_keys.c:		if (button_keys(&env->editor.hud.g_sector.ceiling_slope, env))
src/editor_button_keyup.c:	if (button_keyup(&env->editor.current_enemy_selection, env))
src/editor_button_keyup.c:	if (button_keyup(&env->editor.enemy_background, env))
src/editor_button_keyup.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.s_enemy.brightness, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.s_enemy.color, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.s_enemy.intensity, env))
src/editor_button_keyup.c:	if (env->editor.general_tab.state == DOWN)
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_enemy.health, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_enemy.speed, env))
src/editor_button_keyup.c:	if (env->editor.sector_tab.state == DOWN)
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.s_player.brightness, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.s_player.color, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.s_player.intensity, env))
src/editor_button_keyup.c:	if (env->editor.general_tab.state == DOWN)
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_player.health, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_player.armor, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_player.speed, env))
src/editor_button_keyup.c:	if (env->editor.general_tab.state == DOWN)
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_sector.brightness, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_sector.color, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_sector.intensity, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_sector.floor, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_sector.ceiling, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_sector.floor_slope, env))
src/editor_button_keyup.c:		if (button_keyup(&env->editor.hud.g_sector.ceiling_slope, env))
src/editor_ceiling_tab_button.c:	new_input_var(&env->input_box, button->pos, button->type, button->target);
src/editor_ceiling_tab_button.c:	env->input_box.check = &check_scale_input_box;
src/editor_ceiling_tab_button.c:	env->input_box.update = &update_ceiling_sprite_scale_input_box;
src/editor_ceiling_tab_button.c:	env->input_box.error_message = "Error: scale must be between 0.1 and 100";
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.pos_x = new_hud_pos_button(ON_RELEASE,
src/editor_ceiling_tab_button.c:	&env->editor.hud.sp_ceiling_sprite.t_pos_x, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.pos_x.pos = new_point(250, 560);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.t_pos_x.pos = new_point(250, 560);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.pos_y = new_hud_pos_button(ON_RELEASE,
src/editor_ceiling_tab_button.c:	&env->editor.hud.sp_ceiling_sprite.t_pos_y, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.pos_y.pos = new_point(300, 560);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.t_pos_y.pos = new_point(300, 560);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.scale_x = new_hud_pos_button(ON_RELEASE,
src/editor_ceiling_tab_button.c:	&env->editor.hud.sp_ceiling_sprite.t_scale_x, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.scale_x.pos = new_point(250, 600);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.t_scale_x.pos = new_point(250, 600);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.scale_y = new_hud_pos_button(ON_RELEASE,
src/editor_ceiling_tab_button.c:	&env->editor.hud.sp_ceiling_sprite.t_scale_y, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.scale_y.pos = new_point(300, 600);
src/editor_ceiling_tab_button.c:	env->editor.hud.sp_ceiling_sprite.t_scale_y.pos = new_point(300, 600);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.brightness = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.s_ceilling.t_brightness, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.brightness.pos = new_point(250, 520);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.t_brightness.pos = new_point(250, 520);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.color = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.s_ceilling.t_color, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.color.pos = new_point(250, 560);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.t_color.pos = new_point(250, 560);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.intensity = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.s_ceilling.t_intensity, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.intensity.pos = new_point(250, 600);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.t_intensity.pos = new_point(250, 600);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.gravity = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.s_ceilling.t_gravity, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.gravity.pos = new_point(250, 640);
src/editor_ceiling_tab_button.c:	env->editor.hud.s_ceilling.t_gravity.pos = new_point(250, 640);
src/editor_ceiling_tab_button.c:	//env->editor.hud.s_ceilling.gravity.str = ;
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.height = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.g_ceilling.t_height, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.height.pos = new_point(250, 520);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.t_height.pos = new_point(250, 520);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.slope = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.g_ceilling.t_slope, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.slope.pos = new_point(250, 560);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.t_slope.pos = new_point(250, 560);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.g_ceilling.t_texture, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture.pos = new_point(250, 600);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.t_texture.pos = new_point(250, 600);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture_scale_x = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.g_ceilling.t_texture_scale_x, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture_scale_x.pos = new_point(250, 640);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.t_texture_scale_x.pos = new_point(250, 640);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture_scale_y = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.g_ceilling.t_texture_scale_y, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture_scale_y.pos = new_point(250, 680);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.t_texture_scale_y.pos = new_point(250, 680);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture_align_x = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.g_ceilling.t_texture_align_x, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture_align_x.pos = new_point(250, 720);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.t_texture_align_x.pos = new_point(250, 720);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture_align_y = new_hud_button(ON_RELEASE, &change_var,
src/editor_ceiling_tab_button.c:	&env->editor.hud.g_ceilling.t_texture_align_y, env);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.texture_align_y.pos = new_point(250, 760);
src/editor_ceiling_tab_button.c:	env->editor.hud.g_ceilling.t_texture_align_y.pos = new_point(250, 760);
src/editor_ceiling_tabs.c:	env->editor.next_sprite_env.type = CEILING_S;	
src/editor_ceiling_tabs.c:	env->editor.previous_sprite_env.type = CEILING_S;	
src/editor_ceiling_tabs.c:	print_text(new_point(560, 60), new_printable_text("Pos: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.sp_ceiling_sprite.pos_x.str = ft_sitoa(
src/editor_ceiling_tabs.c:	env->sectors[env->selected_ceiling].ceiling_sprites.pos[env->selected_ceiling_sprite].x);
src/editor_ceiling_tabs.c:	env->editor.hud.sp_ceiling_sprite.t_pos_x.target =
src/editor_ceiling_tabs.c:	&env->sectors[env->selected_ceiling].ceiling_sprites.pos[env->selected_ceiling_sprite].x;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.sp_ceiling_sprite.pos_x);
src/editor_ceiling_tabs.c:	env->editor.hud.sp_ceiling_sprite.pos_y.str = ft_sitoa(
src/editor_ceiling_tabs.c:	env->sectors[env->selected_ceiling].ceiling_sprites.pos[env->selected_ceiling_sprite].y);
src/editor_ceiling_tabs.c:	env->editor.hud.sp_ceiling_sprite.t_pos_y.target =
src/editor_ceiling_tabs.c:	&env->sectors[env->selected_ceiling].ceiling_sprites.pos[env->selected_ceiling_sprite].y;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.sp_ceiling_sprite.pos_y);
src/editor_ceiling_tabs.c:	print_text(new_point(600, 60), new_printable_text("Scale: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.sp_ceiling_sprite.scale_x.str = ft_sitoa(
src/editor_ceiling_tabs.c:	env->sectors[env->selected_ceiling].ceiling_sprites.scale[env->selected_ceiling_sprite].x);
src/editor_ceiling_tabs.c:	env->editor.hud.sp_ceiling_sprite.t_scale_x.target =
src/editor_ceiling_tabs.c:	&env->sectors[env->selected_ceiling].ceiling_sprites.scale[env->selected_ceiling_sprite].x;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.sp_ceiling_sprite.scale_x);
src/editor_ceiling_tabs.c:	env->editor.hud.sp_ceiling_sprite.scale_y.str = ft_sitoa(
src/editor_ceiling_tabs.c:	env->sectors[env->selected_ceiling].ceiling_sprites.scale[env->selected_ceiling_sprite].y);
src/editor_ceiling_tabs.c:	env->editor.hud.sp_ceiling_sprite.t_scale_y.target =
src/editor_ceiling_tabs.c:	&env->sectors[env->selected_ceiling].ceiling_sprites.scale[env->selected_ceiling_sprite].y;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.sp_ceiling_sprite.scale_y);
src/editor_ceiling_tabs.c:	print_text(new_point(480, 60), new_printable_text("Sector:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	print_text(new_point(480, 230), new_printable_text(ft_sitoa(env->selected_ceiling),
src/editor_ceiling_tabs.c:	env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	print_text(new_point(520, 60), new_printable_text("Brightness:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.s_ceilling.brightness.str = ft_itoa(env->sectors[env->selected_ceiling].brightness);
src/editor_ceiling_tabs.c:	env->editor.hud.s_ceilling.t_brightness.target = &env->sectors[env->selected_ceiling].brightness;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.s_ceilling.brightness);
src/editor_ceiling_tabs.c:	print_text(new_point(560, 60), new_printable_text("Light_color:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.s_ceilling.color.str = ft_sitoa(env->sectors[env->selected_ceiling].light_color);
src/editor_ceiling_tabs.c:	env->editor.hud.s_ceilling.t_color.target = &env->sectors[env->selected_ceiling].light_color;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.s_ceilling.color);
src/editor_ceiling_tabs.c:	print_text(new_point(600, 60), new_printable_text("Intensity:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.s_ceilling.intensity.str = ft_sitoa(env->sectors[env->selected_ceiling].intensity);
src/editor_ceiling_tabs.c:	env->editor.hud.s_ceilling.t_intensity.target = &env->sectors[env->selected_ceiling].intensity;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.s_ceilling.intensity);
src/editor_ceiling_tabs.c:	print_text(new_point(520, 60), new_printable_text("Height: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.height.str = ft_sitoa(env->sectors[env->selected_ceiling].ceiling);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.t_height.target = &env->sectors[env->selected_ceiling].ceiling;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.g_ceilling.height);	
src/editor_ceiling_tabs.c:	print_text(new_point(560, 60), new_printable_text("Slope: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.slope.str = ft_sitoa(env->sectors[env->selected_ceiling].ceiling_slope);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.t_slope.target = &env->sectors[env->selected_ceiling].ceiling_slope;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.g_ceilling.slope);
src/editor_ceiling_tabs.c:	print_text(new_point(600, 60), new_printable_text("Texture: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.texture.str = ft_sitoa(env->sectors[env->selected_ceiling].ceiling_texture);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.t_texture.target = &env->sectors[env->selected_ceiling].ceiling_texture;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.g_ceilling.texture);
src/editor_ceiling_tabs.c:	print_text(new_point(640, 60), new_printable_text("Scale X: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.texture_scale_x.str = ft_sitoa(env->sectors[env->selected_ceiling].ceiling_map_scale.x);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.t_texture_scale_x.target = &env->sectors[env->selected_ceiling].ceiling_map_scale.x;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.g_ceilling.texture_scale_x);
src/editor_ceiling_tabs.c:	print_text(new_point(680, 60), new_printable_text("Scale Y: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.texture_scale_y.str = ft_sitoa(env->sectors[env->selected_ceiling].ceiling_map_scale.y);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.t_texture_scale_y.target = &env->sectors[env->selected_ceiling].ceiling_map_scale.y;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.g_ceilling.texture_scale_y);
src/editor_ceiling_tabs.c:	print_text(new_point(720, 60), new_printable_text("Align X: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.texture_align_x.str = ft_sitoa(env->sectors[env->selected_ceiling].ceiling_map_align.x);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.t_texture_align_x.target
src/editor_ceiling_tabs.c:	= &env->sectors[env->selected_ceiling].ceiling_map_align.x;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.g_ceilling.texture_align_x);
src/editor_ceiling_tabs.c:	print_text(new_point(760, 60), new_printable_text("Align Y: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.texture_align_y.str = ft_sitoa(env->sectors[env->selected_ceiling].ceiling_map_align.y);
src/editor_ceiling_tabs.c:	env->editor.hud.g_ceilling.t_texture_align_y.target = &env->sectors[env->selected_ceiling].ceiling_map_align.y;
src/editor_ceiling_tabs.c:	draw_button(env, env->editor.hud.g_ceilling.texture_align_y);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.brightness = new_hud_button(ON_RELEASE, &change_var,
src/editor_enemy_tab_button.c:	&env->editor.hud.s_enemy.t_brightness, env);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.brightness.pos = new_point(250, 520);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.t_brightness.pos = new_point(250, 520);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.color = new_hud_button(ON_RELEASE, &change_var,
src/editor_enemy_tab_button.c:	&env->editor.hud.s_enemy.t_color, env);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.color.pos = new_point(250, 560);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.t_color.pos = new_point(250, 560);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.intensity = new_hud_button(ON_RELEASE, &change_var,
src/editor_enemy_tab_button.c:	&env->editor.hud.s_enemy.t_intensity, env);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.intensity.pos = new_point(250, 600);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.t_intensity.pos = new_point(250, 600);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.gravity = new_hud_button(ON_RELEASE, &change_var,
src/editor_enemy_tab_button.c:	&env->editor.hud.s_enemy.t_gravity, env);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.gravity.pos = new_point(250, 640);
src/editor_enemy_tab_button.c:	env->editor.hud.s_enemy.t_gravity.pos = new_point(250, 640);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.pos_x = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_enemy_tab_button.c:	&env->editor.hud.g_enemy.t_pos_x, env);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.pos_x.pos = new_point(170, 520);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.t_pos_x.pos = new_point(170, 520);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.pos_y = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_enemy_tab_button.c:	&env->editor.hud.g_enemy.t_pos_y, env);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.pos_y.pos = new_point(250, 520);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.t_pos_y.pos = new_point(250, 520);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.pos_z = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_enemy_tab_button.c:	&env->editor.hud.g_enemy.t_pos_z, env);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.pos_z.pos = new_point(330, 520);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.t_pos_z.pos = new_point(330, 520);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.health = new_hud_button(ON_RELEASE, &change_var,
src/editor_enemy_tab_button.c:	&env->editor.hud.g_enemy.t_health, env);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.health.pos = new_point(250, 560);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.t_health.pos = new_point(250, 560);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.speed = new_hud_button(ON_RELEASE, &change_var,
src/editor_enemy_tab_button.c:	&env->editor.hud.g_enemy.t_speed, env);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.speed.pos = new_point(250, 600);
src/editor_enemy_tab_button.c:	env->editor.hud.g_enemy.t_speed.pos = new_point(250, 600);
src/editor_enemy_tabs.c:	print_text(new_point(480, 60), new_printable_text("Enemy:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_enemy_tabs.c:	print_text(new_point(520, 60), new_printable_text("Brightness:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_enemy_tabs.c:	env->editor.hud.s_enemy.brightness.str = ft_itoa(env->sectors[env->enemies[env->selected_enemy].sector].brightness);
src/editor_enemy_tabs.c:	env->editor.hud.s_enemy.t_brightness.target = &env->sectors[env->enemies[env->selected_enemy].sector].brightness;
src/editor_enemy_tabs.c:	draw_button(env, env->editor.hud.s_enemy.brightness);
src/editor_enemy_tabs.c:	print_text(new_point(560, 60), new_printable_text("Light_color:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_enemy_tabs.c:	env->editor.hud.s_enemy.color.str = ft_sitoa(env->sectors[env->enemies[env->selected_enemy].sector].light_color);
src/editor_enemy_tabs.c:	env->editor.hud.s_enemy.t_color.target = &env->sectors[env->enemies[env->selected_enemy].sector].light_color;
src/editor_enemy_tabs.c:	draw_button(env, env->editor.hud.s_enemy.color);
src/editor_enemy_tabs.c:	print_text(new_point(600, 60), new_printable_text("Intensity:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_enemy_tabs.c:	env->editor.hud.s_enemy.intensity.str = ft_sitoa(env->sectors[env->enemies[env->selected_enemy].sector].intensity);
src/editor_enemy_tabs.c:	env->editor.hud.s_enemy.t_intensity.target = &env->sectors[env->enemies[env->selected_enemy].sector].intensity;
src/editor_enemy_tabs.c:	draw_button(env, env->editor.hud.s_enemy.intensity);
src/editor_enemy_tabs.c:	print_text(new_point(520, 60), new_printable_text("Pos: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.pos_x.str = ft_sitoa(env->enemies[env->selected_enemy].pos.x);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.t_pos_x.target = &env->enemies[env->selected_enemy].pos.x;
src/editor_enemy_tabs.c:	draw_button(env, env->editor.hud.g_enemy.pos_x);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.pos_y.str = ft_sitoa(env->enemies[env->selected_enemy].pos.y);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.t_pos_y.target = &env->enemies[env->selected_enemy].pos.y;
src/editor_enemy_tabs.c:	draw_button(env, env->editor.hud.g_enemy.pos_y);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.pos_z.str = ft_sitoa(env->enemies[env->selected_enemy].pos.z);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.t_pos_z.target = &env->enemies[env->selected_enemy].pos.z;
src/editor_enemy_tabs.c:	draw_button(env, env->editor.hud.g_enemy.pos_z);
src/editor_enemy_tabs.c:	print_text(new_point(560, 60), new_printable_text("Health: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.health.str = ft_sitoa(env->enemies[env->selected_enemy].health);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.t_health.target = &env->enemies[env->selected_enemy].health;
src/editor_enemy_tabs.c:	draw_button(env, env->editor.hud.g_enemy.health);
src/editor_enemy_tabs.c:	print_text(new_point(600, 60), new_printable_text("Speed: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.speed.str = ft_sitoa(env->enemies[env->selected_enemy].speed);
src/editor_enemy_tabs.c:	env->editor.hud.g_enemy.t_speed.target = &env->enemies[env->selected_enemy].speed;
src/editor_enemy_tabs.c:	draw_button(env, env->editor.hud.g_enemy.speed);
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_pos_x.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_pos_x.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_pos_x.type = DOUBLE;
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_pos_y.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_pos_y.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_pos_y.type = DOUBLE;
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_scale_x.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_scale_x.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_scale_x.type = DOUBLE;
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_scale_y.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_scale_y.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.sp_ceiling_sprite.t_scale_y.type = DOUBLE;
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_brightness.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_brightness.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_brightness.type = INT;
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_color.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_color.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_color.type = INT;
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_intensity.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_intensity.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_intensity.type = INT;
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_gravity.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_gravity.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.s_ceilling.t_gravity.type = INT;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_height.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_height.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_height.type = DOUBLE;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_slope.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_slope.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_slope.type = DOUBLE;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture.type = INT;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_scale_x.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_scale_x.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_scale_x.type = DOUBLE;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_scale_y.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_scale_y.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_scale_y.type = DOUBLE;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_align_x.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_align_x.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_align_x.type = DOUBLE;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_align_y.env = env;
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_align_y.pos = new_point(0, 0);
src/editor_env_ceilling_buttons.c:	env->editor.hud.g_ceilling.t_texture_align_y.type = DOUBLE;
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_brightness.env = env;
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_brightness.pos = new_point(0, 0);
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_brightness.type = INT;
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_color.env = env;
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_color.pos = new_point(0, 0);
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_color.type = INT;
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_intensity.env = env;
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_intensity.pos = new_point(0, 0);
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_intensity.type = INT;
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_gravity.env = env;
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_gravity.pos = new_point(0, 0);
src/editor_env_enemy_buttons.c:	env->editor.hud.s_enemy.t_gravity.type = INT;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_pos_x.env = env;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_pos_x.pos = new_point(0, 0);
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_pos_x.type = DOUBLE;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_pos_y.env = env;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_pos_y.pos = new_point(0, 0);
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_pos_y.type = DOUBLE;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_pos_z.env = env;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_pos_z.pos = new_point(0, 0);
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_pos_z.type = INT;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_health.env = env;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_health.pos = new_point(0, 0);
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_health.type = DOUBLE;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_speed.env = env;
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_speed.pos = new_point(0, 0);
src/editor_env_enemy_buttons.c:	env->editor.hud.g_enemy.t_speed.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_pos_x.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_pos_x.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_pos_x.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_pos_y.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_pos_y.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_pos_y.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_scale_x.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_scale_x.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_scale_x.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_scale_y.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_scale_y.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.sp_floor_sprite.t_scale_y.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_brightness.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_brightness.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_brightness.type = INT;
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_color.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_color.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_color.type = INT;
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_intensity.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_intensity.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_intensity.type = INT;
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_gravity.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_gravity.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.s_floor.t_gravity.type = INT;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_height.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_height.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_height.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_slope.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_slope.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_slope.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture.type = INT;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_scale_x.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_scale_x.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_scale_x.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_scale_y.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_scale_y.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_scale_y.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_align_x.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_align_x.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_align_x.type = DOUBLE;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_align_y.env = env;
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_align_y.pos = new_point(0, 0);
src/editor_env_floor_buttons.c:	env->editor.hud.g_floor.t_texture_align_y.type = DOUBLE;
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_brightness.env = env;
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_brightness.pos = new_point(0, 0);
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_brightness.type = INT;
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_color.env = env;
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_color.pos = new_point(0, 0);
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_color.type = INT;
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_intensity.env = env;
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_intensity.pos = new_point(0, 0);
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_intensity.type = INT;
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_gravity.env = env;
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_gravity.pos = new_point(0, 0);
src/editor_env_object_buttons.c:	env->editor.hud.s_object.t_gravity.type = INT;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_pos_x.env = env;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_pos_x.pos = new_point(0, 0);
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_pos_x.type = DOUBLE;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_pos_y.env = env;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_pos_y.pos = new_point(0, 0);
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_pos_y.type = DOUBLE;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_pos_z.env = env;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_pos_z.pos = new_point(0, 0);
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_pos_z.type = INT;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_health.env = env;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_health.pos = new_point(0, 0);
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_health.type = DOUBLE;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_speed.env = env;
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_speed.pos = new_point(0, 0);
src/editor_env_object_buttons.c:	env->editor.hud.g_object.t_speed.type = DOUBLE;
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_brightness.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_brightness.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_brightness.type = INT;
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_color.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_color.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_color.type = INT;
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_intensity.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_intensity.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_intensity.type = INT;
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_gravity.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_gravity.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.s_player.t_gravity.type = INT;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_pos_x.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_pos_x.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_pos_x.type = DOUBLE;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_pos_y.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_pos_y.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_pos_y.type = DOUBLE;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_pos_z.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_pos_z.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_pos_z.type = INT;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_health.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_health.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_health.type = DOUBLE;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_armor.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_armor.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_armor.type = DOUBLE;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_speed.env = env;
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_speed.pos = new_point(0, 0);
src/editor_env_player_buttons.c:	env->editor.hud.g_player.t_speed.type = DOUBLE;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_ceilling.env = env;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_ceilling.pos = new_point(0, 0);
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_ceilling.type = DOUBLE;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_floor.env = env;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_floor.pos = new_point(0, 0);
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_floor.type = DOUBLE;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_floor_slope.env = env;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_floor_slope.pos = new_point(0, 0);
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_floor_slope.type = DOUBLE;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_ceiling_slope.env = env;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_ceiling_slope.pos = new_point(0, 0);
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_ceiling_slope.type = DOUBLE;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_brightness.env = env;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_brightness.pos = new_point(0, 0);
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_brightness.type = INT;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_color.env = env;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_color.pos = new_point(0, 0);
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_color.type = INT;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_intensity.env = env;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_intensity.pos = new_point(0, 0);
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_intensity.type = INT;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_gravity.env = env;
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_gravity.pos = new_point(0, 0);
src/editor_env_sector_buttons.c:	env->editor.hud.g_sector.t_gravity.type = INT;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_brightness.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_brightness.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_brightness.type = INT;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_color.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_color.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_color.type = INT;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_intensity.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_intensity.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_intensity.type = INT;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_gravity.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_gravity.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall_sprite.t_gravity.type = DOUBLE;
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_pos_x.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_pos_x.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_pos_x.type = DOUBLE;
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_pos_y.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_pos_y.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_pos_y.type = DOUBLE;
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_scale_x.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_scale_x.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_scale_x.type = DOUBLE;
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_scale_y.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_scale_y.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.sp_wall_sprite.t_scale_y.type = DOUBLE;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_brightness.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_brightness.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_brightness.type = INT;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_color.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_color.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_color.type = INT;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_intensity.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_intensity.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_intensity.type = INT;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_gravity.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_gravity.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.s_wall.t_gravity.type = INT;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture.type = INT;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_scale_x.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_scale_x.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_scale_x.type = DOUBLE;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_scale_y.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_scale_y.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_scale_y.type = DOUBLE;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_align_x.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_align_x.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_align_x.type = DOUBLE;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_align_y.env = env;
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_align_y.pos = new_point(0, 0);
src/editor_env_wall_buttons.c:	env->editor.hud.g_wall.t_texture_align_y.type = DOUBLE;
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.pos_x = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.sp_floor_sprite.t_pos_x, env);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.pos_x.pos = new_point(250, 560);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.t_pos_x.pos = new_point(250, 560);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.pos_y = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.sp_floor_sprite.t_pos_y, env);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.pos_y.pos = new_point(300, 560);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.t_pos_y.pos = new_point(300, 560);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.scale_x = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.sp_floor_sprite.t_scale_x, env);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.scale_x.pos = new_point(250, 600);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.t_scale_x.pos = new_point(300, 600);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.scale_y = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.sp_floor_sprite.t_scale_y, env);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.scale_y.pos = new_point(300, 600);
src/editor_floor_tab_button.c:	env->editor.hud.sp_floor_sprite.t_scale_y.pos = new_point(300, 600);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.brightness = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.s_floor.t_brightness, env);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.brightness.pos = new_point(250, 520);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.t_brightness.pos = new_point(250, 520);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.color = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.s_floor.t_color, env);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.color.pos = new_point(250, 560);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.t_color.pos = new_point(250, 560);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.intensity = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.s_floor.t_intensity, env);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.intensity.pos = new_point(250, 600);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.t_intensity.pos = new_point(250, 600);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.gravity = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.s_floor.t_gravity, env);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.gravity.pos = new_point(250, 640);
src/editor_floor_tab_button.c:	env->editor.hud.s_floor.t_gravity.pos = new_point(250, 640);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.height = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.g_floor.t_height, env);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.height.pos = new_point(250, 520);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.t_height.pos = new_point(250, 520);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.slope = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.g_floor.t_slope, env);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.slope.pos = new_point(250, 560);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.t_slope.pos = new_point(250, 560);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.g_floor.t_texture, env);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture.pos = new_point(250, 600);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.t_texture.pos = new_point(250, 600);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture_scale_x = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.g_floor.t_texture_scale_x, env);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture_scale_x.pos = new_point(250, 640);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.t_texture_scale_x.pos = new_point(250, 640);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture_scale_y = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.g_floor.t_texture_scale_y, env);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture_scale_y.pos = new_point(250, 680);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.t_texture_scale_y.pos = new_point(250, 680);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture_align_x = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.g_floor.t_texture_align_x, env);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture_align_x.pos = new_point(250, 720);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.t_texture_align_x.pos = new_point(250, 720);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture_align_y = new_hud_button(ON_RELEASE, &change_var,
src/editor_floor_tab_button.c:	&env->editor.hud.g_floor.t_texture_align_y, env);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.texture_align_y.pos = new_point(250, 760);
src/editor_floor_tab_button.c:	env->editor.hud.g_floor.t_texture_align_y.pos = new_point(250, 760);
src/editor_floor_tabs.c:	env->editor.next_sprite_env.type = FLOOR_S;	
src/editor_floor_tabs.c:	env->editor.previous_sprite_env.type = FLOOR_S;	
src/editor_floor_tabs.c:	print_text(new_point(560, 60), new_printable_text("Pos: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.sp_floor_sprite.pos_x.str = ft_sitoa(
src/editor_floor_tabs.c:	env->sectors[env->selected_floor].floor_sprites.pos[env->selected_floor_sprite].x);
src/editor_floor_tabs.c:	env->editor.hud.sp_floor_sprite.t_pos_x.target =
src/editor_floor_tabs.c:	&env->sectors[env->selected_floor].floor_sprites.pos[env->selected_floor_sprite].x;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.sp_floor_sprite.pos_x);
src/editor_floor_tabs.c:	env->editor.hud.sp_floor_sprite.pos_y.str = ft_sitoa(
src/editor_floor_tabs.c:	env->sectors[env->selected_floor].floor_sprites.pos[env->selected_floor_sprite].y);
src/editor_floor_tabs.c:	env->editor.hud.sp_floor_sprite.t_pos_y.target =
src/editor_floor_tabs.c:	&env->sectors[env->selected_floor].floor_sprites.pos[env->selected_floor_sprite].y;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.sp_floor_sprite.pos_y);
src/editor_floor_tabs.c:	print_text(new_point(600, 60), new_printable_text("Scale: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.sp_floor_sprite.scale_x.str = ft_sitoa(
src/editor_floor_tabs.c:	env->sectors[env->selected_floor].floor_sprites.scale[env->selected_floor_sprite].x);
src/editor_floor_tabs.c:	env->editor.hud.sp_floor_sprite.t_scale_x.target =
src/editor_floor_tabs.c:	&env->sectors[env->selected_floor].floor_sprites.scale[env->selected_floor_sprite].x;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.sp_floor_sprite.scale_x);
src/editor_floor_tabs.c:	env->editor.hud.sp_floor_sprite.scale_y.str = ft_sitoa(
src/editor_floor_tabs.c:	env->sectors[env->selected_floor].floor_sprites.scale[env->selected_floor_sprite].y);
src/editor_floor_tabs.c:	env->editor.hud.sp_floor_sprite.t_scale_y.target =
src/editor_floor_tabs.c:	&env->sectors[env->selected_floor].floor_sprites.scale[env->selected_floor_sprite].y;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.sp_floor_sprite.scale_y);
src/editor_floor_tabs.c:	print_text(new_point(480, 60), new_printable_text("Sector:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	print_text(new_point(480, 230), new_printable_text(ft_sitoa(env->sectors[env->selected_floor].num),
src/editor_floor_tabs.c:	env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	print_text(new_point(520, 60), new_printable_text("Brightness:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.s_floor.brightness.str = ft_itoa(env->sectors[env->selected_floor].brightness);
src/editor_floor_tabs.c:	env->editor.hud.s_floor.t_brightness.target = &env->sectors[env->selected_floor].brightness;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.s_floor.brightness);
src/editor_floor_tabs.c:	print_text(new_point(560, 60), new_printable_text("Light_color:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.s_floor.color.str = ft_sitoa(env->sectors[env->selected_floor].light_color);
src/editor_floor_tabs.c:	env->editor.hud.s_floor.t_color.target = &env->sectors[env->selected_floor].light_color;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.s_floor.color);
src/editor_floor_tabs.c:	print_text(new_point(600, 60), new_printable_text("Intensity:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.s_floor.intensity.str = ft_sitoa(env->sectors[env->selected_floor].intensity);
src/editor_floor_tabs.c:	env->editor.hud.s_floor.t_intensity.target = &env->sectors[env->selected_floor].intensity;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.s_floor.intensity);
src/editor_floor_tabs.c:	print_text(new_point(520, 60), new_printable_text("Height: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.height.str = ft_sitoa(env->sectors[env->selected_floor].floor);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.t_height.target = &env->sectors[env->selected_floor].floor;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.g_floor.height);
src/editor_floor_tabs.c:	print_text(new_point(560, 60), new_printable_text("Slope: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.slope.str = ft_sitoa(env->sectors[env->selected_floor].floor_slope);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.t_slope.target = &env->sectors[env->selected_floor].floor_slope;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.g_floor.slope);
src/editor_floor_tabs.c:	print_text(new_point(600, 60), new_printable_text("Texture: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.texture.str = ft_sitoa(env->sectors[env->selected_floor].floor_texture);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.t_texture.target = &env->sectors[env->selected_floor].floor_texture;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.g_floor.texture);
src/editor_floor_tabs.c:	print_text(new_point(640, 60), new_printable_text("Scale X: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.texture_scale_x.str = ft_sitoa(env->sectors[env->selected_floor].floor_map_scale.x);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.t_texture_scale_x.target = &env->sectors[env->selected_floor].floor_map_scale.x;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.g_floor.texture_scale_x);
src/editor_floor_tabs.c:	print_text(new_point(680, 60), new_printable_text("Scale Y: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.texture_scale_y.str = ft_sitoa(env->sectors[env->selected_floor].floor_map_scale.y);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.t_texture_scale_y.target = &env->sectors[env->selected_floor].floor_map_scale.y;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.g_floor.texture_scale_y);
src/editor_floor_tabs.c:	print_text(new_point(720, 60), new_printable_text("Align X: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.texture_align_x.str = ft_sitoa(env->sectors[env->selected_floor].floor_map_align.x);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.t_texture_align_x.target = &env->sectors[env->selected_floor].floor_map_align.x;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.g_floor.texture_align_x);
src/editor_floor_tabs.c:	print_text(new_point(760, 60), new_printable_text("Align Y: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.texture_align_y.str = ft_sitoa(env->sectors[env->selected_floor].floor_map_align.y);
src/editor_floor_tabs.c:	env->editor.hud.g_floor.t_texture_align_y.target = &env->sectors[env->selected_floor].floor_map_align.y;
src/editor_floor_tabs.c:	draw_button(env, env->editor.hud.g_floor.texture_align_y);
src/editor_hud.c:	if (!env->editor.in_game || (env->editor.in_game &&  env->editor.tab))
src/editor_hud.c:		if (env->editor.in_game)
src/editor_hud.c:		draw_button(env, env->editor.add_enemy);
src/editor_hud.c:		draw_button(env, env->editor.add_object);
src/editor_hud.c:		draw_button(env, env->editor.texture_background);
src/editor_hud.c:		draw_button(env, env->editor.enemy_background);
src/editor_hud.c:		draw_button(env, env->editor.current_texture_selection);
src/editor_hud.c:		draw_button(env, env->editor.current_enemy_selection);
src/editor_hud.c:		draw_button(env, env->editor.change_mode);
src/editor_hud.c:		draw_button(env, env->editor.launch_game);
src/editor_hud.c:		draw_button(env, env->editor.save);
src/editor_hud.c:		if (env->editor.draw_enemy_tab)
src/editor_hud.c:		if (env->editor.draw_sprite_tab)
src/editor_hud.c:		if (env->editor.draw_selection_tab || env->editor.draw_enemy_tab
src/editor_hud.c:		|| env->editor.draw_sprite_tab)
src/editor_hud.c:			env->editor.selection_tab = 1;
src/editor_hud.c:			env->editor.selection_tab = 0;
src/editor_hud_buttons.c:	tmp = env->save_file;
src/editor_hud_buttons.c:	env->editor.game = 0;
src/editor_hud_buttons.c:	env->save_file = ft_strdup("maps/tmp.map");
src/editor_hud_buttons.c:	str = (char*)ft_realloc(str, sizeof(char) * 7, sizeof(char) * ft_strlen(env->save_file));
src/editor_hud_buttons.c:	str = ft_strcat(str, env->save_file);
src/editor_hud_buttons.c:	ft_strdel(&env->save_file);
src/editor_hud_buttons.c:	env->save_file = tmp;
src/editor_hud_buttons.c:	if (env->editor.in_game)
src/editor_hud_buttons.c:    	SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/editor_hud_buttons.c:        new_input_box(&env->input_box, new_point(env->h_w, env->h_h),
src/editor_hud_buttons.c:        STRING, &env->save_file);
src/editor_hud_buttons.c:        env->inputs.s = 0;
src/editor_hud_buttons.c:        env->inputs.ctrl = 0;
src/editor_hud_buttons.c:	env->editor.change_mode = new_image_button(ON_RELEASE, &change_mode, env, env);
src/editor_hud_buttons.c:    env->editor.change_mode.img_up = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:	env->editor.change_mode.img_pressed = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:	env->editor.change_mode.img_down = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.change_mode.img_hover = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.change_mode.size_up = new_point(64, 64);
src/editor_hud_buttons.c:    env->editor.change_mode.size_down = new_point(env->editor.change_mode.img_down->w,
src/editor_hud_buttons.c:	env->editor.change_mode.img_down->h);
src/editor_hud_buttons.c:    env->editor.change_mode.size_hover = new_point(env->editor.change_mode.img_hover->w,
src/editor_hud_buttons.c:    env->editor.change_mode.img_hover->h);
src/editor_hud_buttons.c:    env->editor.change_mode.size_pressed = new_point(env->editor.change_mode.img_pressed->w,
src/editor_hud_buttons.c:    env->editor.change_mode.img_pressed->h);
src/editor_hud_buttons.c:	env->editor.change_mode.pos = new_point(0, 0);
src/editor_hud_buttons.c:	env->editor.save = new_image_button(ON_RELEASE, &save_button, env, env);
src/editor_hud_buttons.c:    env->editor.save.img_up = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.save.img_pressed = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.save.img_down = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.save.img_hover = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.save.size_up = new_point(64, 64);
src/editor_hud_buttons.c:    env->editor.save.size_down = new_point(env->editor.save.img_down->w,
src/editor_hud_buttons.c:    env->editor.save.img_down->h);
src/editor_hud_buttons.c:    env->editor.save.size_hover = new_point(env->editor.save.img_hover->w,
src/editor_hud_buttons.c:    env->editor.save.img_hover->h);
src/editor_hud_buttons.c:    env->editor.save.size_pressed = new_point(env->editor.save.img_pressed->w,
src/editor_hud_buttons.c:    env->editor.save.img_pressed->h);
src/editor_hud_buttons.c:    env->editor.save.pos = new_point(66, 0);
src/editor_hud_buttons.c:	env->editor.launch_game = new_image_button(ON_RELEASE, &launch_game, env, env);
src/editor_hud_buttons.c:    env->editor.launch_game.img_up = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.launch_game.img_pressed = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.launch_game.img_down = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.launch_game.img_hover = env->sprite_textures[env->object_sprites[BUTTON_OFF].texture].surface;
src/editor_hud_buttons.c:    env->editor.launch_game.size_up = new_point(64, 64);
src/editor_hud_buttons.c:    env->editor.launch_game.size_down = new_point(env->editor.launch_game.img_down->w,
src/editor_hud_buttons.c:    env->editor.launch_game.img_down->h);
src/editor_hud_buttons.c:    env->editor.launch_game.size_hover = new_point(env->editor.launch_game.img_hover->w,
src/editor_hud_buttons.c:    env->editor.launch_game.img_hover->h);
src/editor_hud_buttons.c:    env->editor.launch_game.size_pressed = new_point(env->editor.launch_game.img_pressed->w,
src/editor_hud_buttons.c:    env->editor.launch_game.img_pressed->h);
src/editor_hud_buttons.c:    env->editor.launch_game.pos = new_point(132, 0);
src/editor_keys.c:	if (env->inputs.backspace && !env->confirmation_box.state)
src/editor_keys.c:		env->inputs.backspace = 0;
src/editor_keys.c:	if (env->inputs.del)
src/editor_keys.c:	if (env->confirmation_box.state)
src/editor_keys.c:		if (confirmation_box_keys(&env->confirmation_box, env))
src/editor_keys.c:	if (env->inputs.right_click)
src/editor_keys.c:		env->editor.center.x += env->sdl.mouse_x;
src/editor_keys.c:		env->editor.center.y += env->sdl.mouse_y;
src/editor_keys.c:	if (env->inputs.left && !env->editor.tab && !env->inputs.ctrl)
src/editor_keys.c:		env->editor.center.x -= 3;
src/editor_keys.c:	if (env->inputs.right && !env->editor.tab && !env->inputs.ctrl)
src/editor_keys.c:		env->editor.center.x += 3;
src/editor_keys.c:	if (env->inputs.forward && !env->editor.tab && !env->inputs.ctrl)
src/editor_keys.c:		env->editor.center.y -= 3;
src/editor_keys.c:	if (env->inputs.backward && !env->editor.tab && !env->inputs.ctrl)
src/editor_keys.c:		env->editor.center.y += 3;
src/editor_keys.c:	if (env->inputs.s && env->inputs.ctrl && !valid_map(env))
src/editor_keys.c:		new_input_box(&env->input_box, new_point(env->h_w, env->h_h),
src/editor_keys.c:		STRING, &env->save_file);
src/editor_keys.c:		env->inputs.s = 0;
src/editor_keys.c:		env->inputs.ctrl = 0;
src/editor_keys.c:	if (button_keys(&env->editor.add_enemy, env))
src/editor_keys.c:	if (button_keys(&env->editor.add_object, env))
src/editor_keys.c:	if (button_keys(&env->editor.save, env))
src/editor_keys.c:	if (button_keys(&env->editor.general_tab, env))
src/editor_keys.c:	if (button_keys(&env->editor.sprite_tab, env))
src/editor_keys.c:	if (button_keys(&env->editor.sector_tab, env))
src/editor_keys.c:	if (button_keys(&env->editor.change_mode, env))
src/editor_keys.c:	if (button_keys(&env->editor.launch_game, env))
src/editor_keys.c:	if (button_keys(&env->editor.texture_background, env))
src/editor_keys.c:	if (button_keys(&env->editor.enemy_background, env))
src/editor_keys.c:	if (env->editor.selected_sector != -1 && sector_buttons(env))
src/editor_keys.c:	if (env->editor.selected_player != -1 && player_buttons(env))
src/editor_keys.c:	if (env->selected_enemy != -1 && enemy_buttons(env))
src/editor_keys.c:		if (button_keys(&env->editor.events_tab, env))
src/editor_keys.c:		if (env->editor.events_tab.state == DOWN)
src/editor_keys.c:			if (button_keys(&env->editor.next_events, env))
src/editor_keys.c:			if (button_keys(&env->editor.previous_events, env))
src/editor_keys.c:			if (button_keys(&env->editor.next_event, env))
src/editor_keys.c:			if (button_keys(&env->editor.previous_event, env))
src/editor_keys.c:			if (button_keys(&env->editor.next_launch_condition, env))
src/editor_keys.c:			if (button_keys(&env->editor.previous_launch_condition, env))
src/editor_keys.c:			if (button_keys(&env->editor.next_exec_condition, env))
src/editor_keys.c:			if (button_keys(&env->editor.previous_exec_condition, env))
src/editor_keys.c:	if (env->editor.draw_selection_tab)
src/editor_keys.c:			if (button_keys(&env->editor.textures[i], env))
src/editor_keys.c:			button_keys(&env->editor.skyboxes[i], env);
src/editor_keys.c:	if (env->editor.draw_enemy_tab)
src/editor_keys.c:			if (button_keys(&env->editor.enemy_tab[i], env))
src/editor_keys.c:	if ((env->inputs.plus || env->inputs.minus) && !env->editor.in_game && env->editor.selected_sector != -1)
src/editor_keys.c:		if (!env->time.tick4)
src/editor_keys.c:			env->time.tick4 = SDL_GetTicks();
src/editor_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_m)
src/editor_keyup.c:		env->options.show_minimap = env->options.show_minimap ? 0 : 1;
src/editor_keyup.c:		env->options.mipmapping = env->options.mipmapping ? 0 : 1;
src/editor_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_t)
src/editor_keyup.c:		env->options.test = env->options.test ? 0 : 1;
src/editor_keyup.c:		if (env->editor.selected_sector != -1
src/editor_keyup.c:			&& env->editor.current_texture >= 0
src/editor_keyup.c:			&& env->editor.current_texture < MAX_WALL_TEXTURE)
src/editor_keyup.c:				if (apply_texture(env->editor.current_texture,
src/editor_keyup.c:				&env->sectors[env->editor.selected_sector], env))
src/editor_keyup.c:		/*else if (env->editor.selected_sector != -1
src/editor_keyup.c:		&& env->edito.curren)*/
src/editor_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_l)
src/editor_keyup.c:		env->options.l = env->options.l ? 0 : 1;
src/editor_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_o)
src/editor_keyup.c:		env->options.o = env->options.o ? 0 : 1;
src/editor_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_TAB)
src/editor_keyup.c:		env->editor.tab = env->editor.tab ? 0 : 1;
src/editor_keyup.c:	if (env->editor.in_game && env->sdl.event.key.keysym.sym == SDLK_g)
src/editor_keyup.c:		env->editor.game = env->editor.game ? 0 : 1;
src/editor_keyup.c:	if (env->confirmation_box.state)
src/editor_keyup.c:		if (confirmation_box_keyup(&env->confirmation_box, env))
src/editor_keyup.c:	if (env->sdl.mx > 400 && env->sdl.event.button.button == SDL_BUTTON_LEFT
src/editor_keyup.c:			&& !env->confirmation_box.state
src/editor_keyup.c:			&& env->editor.start_vertex == -1
src/editor_keyup.c:			&& env->editor.dragged_player == -1
src/editor_keyup.c:			&& env->editor.dragged_object == -1
src/editor_keyup.c:			&& env->editor.dragged_vertex == -1
src/editor_keyup.c:			&& env->editor.dragged_enemy == -1)
src/editor_keyup.c:		env->editor.selected_sector = get_sector_no_z(env,
src/editor_keyup.c:				new_v3((env->sdl.mx - env->editor.center.x) / env->editor.scale,
src/editor_keyup.c:					(env->sdl.my - env->editor.center.y) / env->editor.scale,
src/editor_keyup.c:		env->editor.selected_vertex = -1;
src/editor_keyup.c:		env->editor.selected_object = -1;
src/editor_keyup.c:		env->editor.selected_player = -1;
src/editor_keyup.c:		env->editor.selected_events = 0;
src/editor_keyup.c:		env->editor.selected_event = 0;
src/editor_keyup.c:		env->editor.selected_launch_condition = 0;
src/editor_keyup.c:		env->editor.selected_exec_condition = 0;
src/editor_keyup.c:		if (env->editor.selected_sector == -1)
src/editor_keyup.c:			env->selected_floor = -1;
src/editor_keyup.c:			env->selected_ceiling = -1;
src/editor_keyup.c:		env->selected_enemy = -1;
src/editor_keyup.c:	if (env->sdl.mx > 400 && env->sdl.event.button.button == SDL_BUTTON_LEFT
src/editor_keyup.c:			&& !env->confirmation_box.state
src/editor_keyup.c:			&& env->editor.start_vertex == -1
src/editor_keyup.c:			&& env->editor.dragged_player == 1
src/editor_keyup.c:			&& env->editor.selected_player == 1
src/editor_keyup.c:			&& env->editor.dragged_object == -1
src/editor_keyup.c:			&& env->editor.dragged_vertex == -1
src/editor_keyup.c:			&& env->editor.dragged_enemy == -1)
src/editor_keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_SPACE
src/editor_keyup.c:		&& env->editor.dragged_player == -1
src/editor_keyup.c:		&& env->editor.dragged_object == -1
src/editor_keyup.c:		&& env->editor.dragged_vertex == -1
src/editor_keyup.c:		&& !env->editor.in_game
src/editor_keyup.c:		&& env->sdl.mx > 400)
src/editor_keyup.c:			add_vertex_to_current_sector(env, env->nb_vertices - 1);
src/editor_keyup.c:			if (env->editor.start_vertex == -1) //Nouveau secteur
src/editor_keyup.c:				env->editor.start_vertex = env->nb_vertices - 1;
src/editor_keyup.c:			if (env->editor.start_vertex == -1)
src/editor_keyup.c:				env->editor.start_vertex = clicked_vertex;
src/editor_keyup.c:				if (clicked_vertex == ((t_vertex*)env->editor.current_vertices->content)->num
src/editor_keyup.c:						&& ft_lstlen(env->editor.current_vertices) > 2
src/editor_keyup.c:					env->editor.reverted = get_clockwise_order(env) ? 0 : 1;
src/editor_keyup.c:					env->editor.start_vertex = -1;
src/editor_keyup.c:					//update_sector_slope(env, &env->sectors[env->nb_sectors - 1]);
src/editor_keyup.c:		env->inputs.space = 0;
src/editor_keyup.c:	if (env->sdl.event.key.keysym.sym == env->keys.enter
src/editor_keyup.c:		&& !env->confirmation_box.state && !env->input_box.state
src/editor_keyup.c:		&& !env->editor.enter_locked)
src/editor_keyup.c:			env->editor.in_game = 1;
src/editor_keyup.c:			env->screen_sectors_size = ft_min(env->nb_sectors, env->w);
src/editor_keyup.c:			free_camera(&env->player.camera, env);
src/editor_keyup.c:			if (init_camera_arrays(&env->player.camera, env))
src/editor_keyup.c:			if (env->sector_list)
src/editor_keyup.c:				ft_memdel((void**)&env->sector_list);
src/editor_keyup.c:			if (!(env->sector_list = (int*)ft_memalloc(sizeof(int) * env->nb_sectors)))
src/editor_keyup.c:			update_camera_position(&env->player.camera);
src/editor_keyup.c:			ft_bzero(&env->inputs, sizeof(env->inputs));
src/editor_keyup.c:			env->options.mouse = 1;
src/editor_keyup.c:			if (!env->editor.tab)
src/editor_keyup.c:				SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/editor_keyup.c:				SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/editor_keyup.c:	if (env->sdl.event.key.keysym.sym == env->keys.enter
src/editor_keyup.c:		&& env->editor.enter_locked)
src/editor_keyup.c:		env->editor.enter_locked = 0;
src/editor_keyup.c:	if (env->inputs.ctrl && env->sdl.event.button.button == SDL_BUTTON_LEFT)
src/editor_keyup.c:				env->editor.add.v1 = -1;
src/editor_keyup.c:				env->editor.add.v2 = -1;
src/editor_keyup.c:	if (button_keyup(&env->editor.add_enemy, env))
src/editor_keyup.c:	if (button_keyup(&env->editor.add_object, env))
src/editor_keyup.c:	if (button_keyup(&env->editor.save, env))
src/editor_keyup.c:	if (button_keyup(&env->editor.change_mode, env))
src/editor_keyup.c:	if (button_keyup(&env->editor.launch_game, env))
src/editor_keyup.c:	if (button_keyup(&env->editor.texture_background, env))
src/editor_keyup.c:	if (button_keyup(&env->editor.enemy_background, env))
src/editor_keyup.c:	if (button_keyup(&env->editor.sector_tab, env))
src/editor_keyup.c:	if (button_keyup(&env->editor.general_tab, env))
src/editor_keyup.c:	if (button_keyup(&env->editor.sprite_tab, env))
src/editor_keyup.c:		if (button_keyup(&env->editor.events_tab, env))
src/editor_keyup.c:		if (env->editor.events_tab.state == DOWN)
src/editor_keyup.c:			if (button_keyup(&env->editor.next_events, env))
src/editor_keyup.c:			if (button_keyup(&env->editor.previous_events, env))
src/editor_keyup.c:			if (button_keyup(&env->editor.next_event, env))
src/editor_keyup.c:			if (button_keyup(&env->editor.previous_event, env))
src/editor_keyup.c:			if (button_keyup(&env->editor.next_launch_condition, env))
src/editor_keyup.c:			if (button_keyup(&env->editor.previous_launch_condition, env))
src/editor_keyup.c:			if (button_keyup(&env->editor.next_exec_condition, env))
src/editor_keyup.c:			if (button_keyup(&env->editor.previous_exec_condition, env))
src/editor_keyup.c:	if (env->editor.selected_sector != -1 && sector_buttons_up(env))
src/editor_keyup.c:	if (env->editor.selected_player != -1 && player_buttons_up(env))
src/editor_keyup.c:	if (env->selected_enemy != -1 && enemy_buttons_up(env))
src/editor_keyup.c:	if (env->editor.draw_selection_tab)
src/editor_keyup.c:			if (button_keyup(&env->editor.textures[i], env))
src/editor_keyup.c:			button_keyup(&env->editor.skyboxes[i], env);
src/editor_keyup.c:	if (env->editor.draw_enemy_tab)
src/editor_keyup.c:			if (button_keyup(&env->editor.enemy_tab[i], env))
src/editor_keyup.c:	if (env->sdl.event.button.button == SDL_BUTTON_LEFT && (env->sdl.mx < 74 && env->sdl.mx > 10)
src/editor_keyup.c:	&& (env->sdl.my < 414 && env->sdl.my > 350))
src/editor_keyup.c:		env->editor.draw_selection_tab = 1;
src/editor_keyup.c:	else if (env->editor.draw_selection_tab && env->sdl.event.button.button == SDL_BUTTON_LEFT)
src/editor_keyup.c:		env->editor.draw_selection_tab = 0;
src/editor_keyup.c:	if (env->sdl.event.button.button == SDL_BUTTON_LEFT && (env->sdl.mx < 67 && env->sdl.mx > 13)
src/editor_keyup.c:	&& (env->sdl.my < 317 && env->sdl.my > 253))
src/editor_keyup.c:		env->editor.draw_enemy_tab = 1;
src/editor_keyup.c:	else if (env->editor.draw_enemy_tab && env->sdl.event.button.button == SDL_BUTTON_LEFT)
src/editor_keyup.c:		env->editor.draw_enemy_tab = 0;
src/editor_keyup.c:	if (env->sdl.event.button.button == SDL_BUTTON_LEFT && env->editor.create_enemy && env->sdl.mx > 400)
src/editor_keyup.c:	if (env->sdl.event.button.button == SDL_BUTTON_LEFT && env->editor.create_object && env->sdl.mx > 400)
src/editor_object_tab_button.c:	env->editor.hud.s_object.brightness = new_hud_button(ON_RELEASE
src/editor_object_tab_button.c:	&env->editor.hud.s_object.t_brightness, env);
src/editor_object_tab_button.c:	env->editor.hud.s_object.brightness.pos = new_point(250, 520);
src/editor_object_tab_button.c:	env->editor.hud.s_object.t_brightness.pos = new_point(250, 520);
src/editor_object_tab_button.c:	env->editor.hud.s_object.color = new_hud_button(ON_RELEASE
src/editor_object_tab_button.c:	&env->editor.hud.s_object.t_color, env);
src/editor_object_tab_button.c:	env->editor.hud.s_object.color.pos = new_point(250, 560);
src/editor_object_tab_button.c:	env->editor.hud.s_object.t_color.pos = new_point(250, 560);
src/editor_object_tab_button.c:	env->editor.hud.s_object.intensity = new_hud_button(ON_RELEASE
src/editor_object_tab_button.c:	&env->editor.hud.s_object.t_intensity, env);
src/editor_object_tab_button.c:	env->editor.hud.s_object.intensity.pos = new_point(250, 600);
src/editor_object_tab_button.c:	env->editor.hud.s_object.t_intensity.pos = new_point(250, 600);
src/editor_object_tab_button.c:	env->editor.hud.s_object.gravity = new_hud_button(ON_RELEASE
src/editor_object_tab_button.c:	&env->editor.hud.s_object.t_gravity, env);
src/editor_object_tab_button.c:	env->editor.hud.s_object.gravity.pos = new_point(250, 640);
src/editor_object_tab_button.c:	env->editor.hud.s_object.t_gravity.pos = new_point(250, 640);
src/editor_object_tab_button.c:	env->editor.hud.g_object.pos_x = new_hud_pos_button(ON_RELEASE
src/editor_object_tab_button.c:	&env->editor.hud.g_object.t_pos_x, env);
src/editor_object_tab_button.c:	env->editor.hud.g_object.pos_x.pos = new_point(170, 520);
src/editor_object_tab_button.c:	env->editor.hud.g_object.t_pos_x.pos = new_point(170, 520);
src/editor_object_tab_button.c:	env->editor.hud.g_object.pos_y = new_hud_pos_button(ON_RELEASE
src/editor_object_tab_button.c:	&env->editor.hud.g_object.t_pos_y, env);
src/editor_object_tab_button.c:	env->editor.hud.g_object.pos_y.pos = new_point(250, 520);
src/editor_object_tab_button.c:	env->editor.hud.g_object.t_pos_y.pos = new_point(250, 520);
src/editor_object_tab_button.c:	env->editor.hud.g_object.pos_z = new_hud_pos_button(ON_RELEASE
src/editor_object_tab_button.c:	&env->editor.hud.g_object.t_pos_z, env);
src/editor_object_tab_button.c:	env->editor.hud.g_object.pos_z.pos = new_point(330, 520);
src/editor_object_tab_button.c:	env->editor.hud.g_object.t_pos_z.pos = new_point(330, 520);
src/editor_object_tab_button.c:	env->editor.hud.g_object.health = new_hud_button(ON_RELEASE
src/editor_object_tab_button.c:	&env->editor.hud.g_object.t_health, env);
src/editor_object_tab_button.c:	env->editor.hud.g_object.health.pos = new_point(250, 560);
src/editor_object_tab_button.c:	env->editor.hud.g_object.t_health.pos = new_point(250, 560);
src/editor_object_tab_button.c:	env->editor.hud.g_object.speed = new_hud_button(ON_RELEASE
src/editor_object_tab_button.c:	&env->editor.hud.g_object.t_speed, env);
src/editor_object_tab_button.c:	env->editor.hud.g_object.speed.pos = new_point(250, 600);
src/editor_object_tab_button.c:	env->editor.hud.g_object.t_speed.pos = new_point(250, 600);
src/editor_object_tabs.c:	print_text(new_point(480, 60), new_printable_text("object:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_object_tabs.c:	print_text(new_point(520, 60), new_printable_text("Brightness:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_object_tabs.c:	env->editor.hud.s_object.brightness.str = ft_itoa(env->sectors[env->objects[env->editor.selected_object].sector].brightness);
src/editor_object_tabs.c:	env->editor.hud.s_object.t_brightness.target = &env->sectors[env->objects[env->editor.selected_object].sector].brightness;
src/editor_object_tabs.c:	draw_button(env, env->editor.hud.s_object.brightness);
src/editor_object_tabs.c:	print_text(new_point(560, 60), new_printable_text("Light_color:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_object_tabs.c:	env->editor.hud.s_object.color.str = ft_sitoa(env->sectors[env->objects[env->editor.selected_object].sector].light_color);
src/editor_object_tabs.c:	env->editor.hud.s_object.t_color.target = &env->sectors[env->objects[env->editor.selected_object].sector].light_color;
src/editor_object_tabs.c:	draw_button(env, env->editor.hud.s_object.color);
src/editor_object_tabs.c:	print_text(new_point(600, 60), new_printable_text("Intensity:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_object_tabs.c:	env->editor.hud.s_object.intensity.str = ft_sitoa(env->sectors[env->objects[env->editor.selected_object].sector].intensity);
src/editor_object_tabs.c:	env->editor.hud.s_object.t_intensity.target = &env->sectors[env->objects[env->editor.selected_object].sector].intensity;
src/editor_object_tabs.c:	draw_button(env, env->editor.hud.s_object.intensity);
src/editor_object_tabs.c:	print_text(new_point(520, 60), new_printable_text("Pos: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_object_tabs.c:	env->editor.hud.g_object.pos_x.str = ft_sitoa(env->objects[env->selected_object].pos.x);
src/editor_object_tabs.c:	env->editor.hud.g_object.t_pos_x.target = &env->objects[env->selected_object].pos.x;
src/editor_object_tabs.c:	draw_button(env, env->editor.hud.g_object.pos_x);
src/editor_object_tabs.c:	env->editor.hud.g_object.pos_y.str = ft_sitoa(env->objects[env->selected_object].pos.y);
src/editor_object_tabs.c:	env->editor.hud.g_object.t_pos_y.target = &env->objects[env->selected_object].pos.y;
src/editor_object_tabs.c:	draw_button(env, env->editor.hud.g_object.pos_y);
src/editor_object_tabs.c:	env->editor.hud.g_object.pos_z.str = ft_sitoa(env->objects[env->selected_object].pos.z);
src/editor_object_tabs.c:	env->editor.hud.g_object.t_pos_z.target = &env->objects[env->selected_object].pos.z;
src/editor_object_tabs.c:	draw_button(env, env->editor.hud.g_object.pos_z);
src/editor_object_tabs.c:	print_text(new_point(560, 60), new_printable_text("Health: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_object_tabs.c:	env->editor.hud.g_object.health.str = ft_sitoa(env->objects[env->selected_object].health);
src/editor_object_tabs.c:	env->editor.hud.g_object.t_health.target = &env->objects[env->selected_object].health;
src/editor_object_tabs.c:	draw_button(env, env->editor.hud.g_object.health);
src/editor_player_tab_button.c:	env->editor.hud.s_player.brightness = new_hud_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.s_player.t_brightness, env);
src/editor_player_tab_button.c:	env->editor.hud.s_player.brightness.pos = new_point(250, 520);
src/editor_player_tab_button.c:	env->editor.hud.s_player.t_brightness.pos = new_point(250, 520);
src/editor_player_tab_button.c:	env->editor.hud.s_player.color = new_hud_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.s_player.t_color, env);
src/editor_player_tab_button.c:	env->editor.hud.s_player.color.pos = new_point(250, 560);
src/editor_player_tab_button.c:	env->editor.hud.s_player.t_color.pos = new_point(250, 560);
src/editor_player_tab_button.c:	env->editor.hud.s_player.intensity = new_hud_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.s_player.t_intensity, env);
src/editor_player_tab_button.c:	env->editor.hud.s_player.intensity.pos = new_point(250, 600);
src/editor_player_tab_button.c:	env->editor.hud.s_player.t_intensity.pos = new_point(250, 600);
src/editor_player_tab_button.c:	env->editor.hud.s_player.gravity = new_hud_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.s_player.t_gravity, env);
src/editor_player_tab_button.c:	env->editor.hud.s_player.gravity.pos = new_point(250, 640);
src/editor_player_tab_button.c:	env->editor.hud.s_player.t_gravity.pos = new_point(250, 640);
src/editor_player_tab_button.c:	env->editor.hud.g_player.pos_x = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.g_player.t_pos_x, env);
src/editor_player_tab_button.c:	env->editor.hud.g_player.pos_x.pos = new_point(170, 520);
src/editor_player_tab_button.c:	env->editor.hud.g_player.t_pos_x.pos = new_point(170, 520);
src/editor_player_tab_button.c:	env->editor.hud.g_player.pos_y = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.g_player.t_pos_y, env);
src/editor_player_tab_button.c:	env->editor.hud.g_player.pos_y.pos = new_point(250, 520);
src/editor_player_tab_button.c:	env->editor.hud.g_player.t_pos_y.pos = new_point(250, 520);
src/editor_player_tab_button.c:	env->editor.hud.g_player.pos_z = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.g_player.t_pos_z, env);
src/editor_player_tab_button.c:	env->editor.hud.g_player.pos_z.pos = new_point(330, 520);
src/editor_player_tab_button.c:	env->editor.hud.g_player.t_pos_z.pos = new_point(330, 520);
src/editor_player_tab_button.c:	env->editor.hud.g_player.health = new_hud_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.g_player.t_health, env);
src/editor_player_tab_button.c:	env->editor.hud.g_player.health.pos = new_point(250, 560);
src/editor_player_tab_button.c:	env->editor.hud.g_player.t_health.pos = new_point(250, 560);
src/editor_player_tab_button.c:	env->editor.hud.g_player.armor = new_hud_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.g_player.t_armor, env);
src/editor_player_tab_button.c:	env->editor.hud.g_player.armor.pos = new_point(250, 600);
src/editor_player_tab_button.c:	env->editor.hud.g_player.t_armor.pos = new_point(250, 600);
src/editor_player_tab_button.c:	env->editor.hud.g_player.speed = new_hud_button(ON_RELEASE, &change_var,
src/editor_player_tab_button.c:	&env->editor.hud.g_player.t_speed, env);
src/editor_player_tab_button.c:	env->editor.hud.g_player.speed.pos = new_point(250, 640);
src/editor_player_tab_button.c:	env->editor.hud.g_player.t_speed.pos = new_point(250, 640);
src/editor_player_tabs.c:	print_text(new_point(480, 60), new_printable_text("Player:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_player_tabs.c:	print_text(new_point(520, 60), new_printable_text("Brightness:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_player_tabs.c:	env->editor.hud.s_player.brightness.str = ft_itoa(env->sectors[env->player.sector].brightness);
src/editor_player_tabs.c:	env->editor.hud.s_player.t_brightness.target = &env->sectors[env->player.sector].brightness;
src/editor_player_tabs.c:	draw_button(env, env->editor.hud.s_player.brightness);
src/editor_player_tabs.c:	print_text(new_point(560, 60), new_printable_text("Light_color:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_player_tabs.c:	env->editor.hud.s_player.color.str = ft_sitoa(env->sectors[env->player.sector].light_color);
src/editor_player_tabs.c:	env->editor.hud.s_player.t_color.target = &env->sectors[env->player.sector].light_color;
src/editor_player_tabs.c:	draw_button(env, env->editor.hud.s_player.color);
src/editor_player_tabs.c:	print_text(new_point(600, 60), new_printable_text("Intensity:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_player_tabs.c:	env->editor.hud.s_player.intensity.str = ft_sitoa(env->sectors[env->player.sector].intensity);
src/editor_player_tabs.c:	env->editor.hud.s_player.t_intensity.target = &env->sectors[env->player.sector].intensity;
src/editor_player_tabs.c:	draw_button(env, env->editor.hud.s_player.intensity);
src/editor_player_tabs.c:	print_text(new_point(520, 60), new_printable_text("Pos: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_player_tabs.c:	env->editor.hud.g_player.pos_x.str = ft_sitoa(env->player.pos.x);
src/editor_player_tabs.c:	env->editor.hud.g_player.t_pos_x.target = &env->player.pos.x;
src/editor_player_tabs.c:	draw_button(env, env->editor.hud.g_player.pos_x);
src/editor_player_tabs.c:	env->editor.hud.g_player.pos_y.str = ft_sitoa(env->player.pos.y);
src/editor_player_tabs.c:	env->editor.hud.g_player.t_pos_y.target = &env->player.pos.y;
src/editor_player_tabs.c:	draw_button(env, env->editor.hud.g_player.pos_y);
src/editor_player_tabs.c:	env->editor.hud.g_player.pos_z.str = ft_sitoa(env->player.pos.z);
src/editor_player_tabs.c:	env->editor.hud.g_player.t_pos_z.target = &env->player.pos.z;
src/editor_player_tabs.c:	draw_button(env, env->editor.hud.g_player.pos_z);
src/editor_player_tabs.c:	print_text(new_point(560, 60), new_printable_text("Health: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_player_tabs.c:	env->editor.hud.g_player.health.str = ft_sitoa(env->player.health);
src/editor_player_tabs.c:	env->editor.hud.g_player.t_health.target = &env->player.health;
src/editor_player_tabs.c:	draw_button(env, env->editor.hud.g_player.health);
src/editor_player_tabs.c:	print_text(new_point(600, 60), new_printable_text("Armor: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_player_tabs.c:	env->editor.hud.g_player.armor.str = ft_sitoa(env->player.armor);
src/editor_player_tabs.c:	env->editor.hud.g_player.t_armor.target = &env->player.armor;
src/editor_player_tabs.c:	draw_button(env, env->editor.hud.g_player.armor);
src/editor_player_tabs.c:	print_text(new_point(640, 60), new_printable_text("Speed: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_player_tabs.c:	env->editor.hud.g_player.speed.str = ft_sitoa(env->player.speed);
src/editor_player_tabs.c:	env->editor.hud.g_player.t_speed.target = &env->player.speed;
src/editor_player_tabs.c:	draw_button(env, env->editor.hud.g_player.speed);
src/editor_render.c:	if (!env->input_box.state)
src/editor_render.c:	if (draw_walls(&env->player.camera, env))
src/editor_render.c:	if (draw_objects(env->player.camera, env))
src/editor_render.c:	if (draw_enemies(env->player.camera, env))
src/editor_render.c:	if (env->options.show_fps)
src/editor_render.c:	if (!env->input_box.state && !env->editor.tab)
src/editor_render.c:	env->editor.select = 0;
src/editor_render.c:	FMOD_System_Update(env->sound.system);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.brightness = new_hud_button(ON_RELEASE, &change_var,
src/editor_sector_tab_button.c:	&env->editor.hud.g_sector.t_brightness, env);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.brightness.pos = new_point(250, 520);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.t_brightness.pos = new_point(250, 520);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.color = new_hud_button(ON_RELEASE, &change_var,
src/editor_sector_tab_button.c:	&env->editor.hud.g_sector.t_color, env);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.color.pos = new_point(250, 560);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.t_color.pos = new_point(250, 560);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.intensity = new_hud_button(ON_RELEASE, &change_var,
src/editor_sector_tab_button.c:	&env->editor.hud.g_sector.t_intensity, env);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.intensity.pos = new_point(250, 600);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.t_intensity.pos = new_point(250, 600);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.ceiling = new_hud_button(ON_RELEASE, &change_var,
src/editor_sector_tab_button.c:	&env->editor.hud.g_sector.t_ceilling, env);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.ceiling.pos = new_point(250, 680);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.t_ceilling.pos = new_point(250, 680);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.floor = new_hud_button(ON_RELEASE, &change_var,
src/editor_sector_tab_button.c:	&env->editor.hud.g_sector.t_floor, env);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.floor.pos = new_point(250, 640);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.t_floor.pos = new_point(250, 640);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.floor_slope = new_hud_button(ON_RELEASE, &change_var,
src/editor_sector_tab_button.c:	&env->editor.hud.g_sector.t_floor_slope, env);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.t_floor_slope.pos = new_point(250, 720);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.floor_slope.pos = new_point(250, 720);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.ceiling_slope = new_hud_button(ON_RELEASE, &change_var,
src/editor_sector_tab_button.c:	&env->editor.hud.g_sector.t_ceiling_slope, env);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.ceiling_slope.pos = new_point(250, 760);
src/editor_sector_tab_button.c:	env->editor.hud.g_sector.t_ceiling_slope.pos = new_point(250, 760);
src/editor_sector_tabs.c:	print_text(new_point(450, 80), new_printable_text("sector ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_sector_tabs.c:	print_text(new_point(450, 180), new_printable_text(ft_sitoa(env->editor.selected_sector), env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_sector_tabs.c:	print_text(new_point(520, 60), new_printable_text("Brightness:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.brightness.str = ft_itoa(env->sectors[env->editor.selected_sector].brightness);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.t_brightness.target = &env->sectors[env->editor.selected_sector].brightness;
src/editor_sector_tabs.c:	draw_button(env, env->editor.hud.g_sector.brightness);
src/editor_sector_tabs.c:	print_text(new_point(560, 60), new_printable_text("Light_color:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.color.str = ft_sitoa(env->sectors[env->editor.selected_sector].light_color);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.t_color.target = &env->sectors[env->editor.selected_sector].light_color;
src/editor_sector_tabs.c:	draw_button(env, env->editor.hud.g_sector.color);
src/editor_sector_tabs.c:	print_text(new_point(600, 60), new_printable_text("Intensity:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.intensity.str = ft_sitoa(env->sectors[env->editor.selected_sector].intensity);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.t_intensity.target = &env->sectors[env->editor.selected_sector].intensity;
src/editor_sector_tabs.c:	draw_button(env, env->editor.hud.g_sector.intensity);
src/editor_sector_tabs.c:	print_text(new_point(640, 60), new_printable_text("floor: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.floor.str = ft_itoa(env->sectors[env->editor.selected_sector].floor);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.t_floor.target = &env->sectors[env->editor.selected_sector].floor;
src/editor_sector_tabs.c:	draw_button(env, env->editor.hud.g_sector.floor);
src/editor_sector_tabs.c:	print_text(new_point(680, 60), new_printable_text("Ceiling: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.ceiling.str = ft_itoa(env->sectors[env->editor.selected_sector].ceiling);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.t_ceilling.target = &env->sectors[env->editor.selected_sector].ceiling;
src/editor_sector_tabs.c:	draw_button(env, env->editor.hud.g_sector.ceiling);
src/editor_sector_tabs.c:	print_text(new_point(720, 60), new_printable_text("(f) Slope: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.floor_slope.str = ft_itoa(env->sectors[env->editor.selected_sector].floor_slope);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.t_floor_slope.target = &env->sectors[env->editor.selected_sector].floor_slope;
src/editor_sector_tabs.c:	draw_button(env, env->editor.hud.g_sector.floor_slope);
src/editor_sector_tabs.c:	print_text(new_point(760, 60), new_printable_text("(C) Slope: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.ceiling_slope.str = ft_itoa(env->sectors[env->editor.selected_sector].ceiling_slope);
src/editor_sector_tabs.c:	env->editor.hud.g_sector.t_ceiling_slope.target = &env->sectors[env->editor.selected_sector].ceiling_slope;
src/editor_sector_tabs.c:	draw_button(env, env->editor.hud.g_sector.ceiling_slope);
src/editor_start_game.c:  tmp = env->save_file;
src/editor_start_game.c:  env->editor.game = 0;
src/editor_start_game.c:  env->save_file = ft_strdup("maps/tmp.map");
src/editor_start_game.c:  if (!(str = (char*)ft_realloc(str, sizeof(char) * 7, sizeof(char) * ft_strlen(env->save_file))))
src/editor_start_game.c:  str = ft_strcat(str, env->save_file);
src/editor_start_game.c:  ft_strdel(&env->save_file);
src/editor_start_game.c:  env->save_file = tmp;
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.brightness = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.s_wall_sprite.t_brightness, env);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.brightness.pos = new_point(250, 520);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.t_brightness.pos = new_point(250, 520);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.color = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.s_wall_sprite.t_color, env);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.color.pos = new_point(250, 560);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.t_color.pos = new_point(250, 560);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.intensity = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.s_wall_sprite.t_intensity, env);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.intensity.pos = new_point(250, 600);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.t_intensity.pos = new_point(250, 600);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.gravity = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.s_wall_sprite.t_gravity, env);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.gravity.pos = new_point(250, 640);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall_sprite.t_gravity.pos = new_point(250, 640);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.pos_x = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.sp_wall_sprite.t_pos_x, env);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.pos_x.pos = new_point(250, 560);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.t_pos_x.pos = new_point(250, 560);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.pos_y = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.sp_wall_sprite.t_pos_y, env);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.pos_y.pos = new_point(300, 560);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.t_pos_y.pos = new_point(300, 560);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.scale_x = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.sp_wall_sprite.t_scale_x, env);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.scale_x.pos = new_point(250, 600);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.t_scale_x.pos = new_point(250, 600);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.scale_y = new_hud_pos_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.sp_wall_sprite.t_scale_y, env);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.scale_y.pos = new_point(300, 600);
src/editor_wall_tab_button.c:	env->editor.hud.sp_wall_sprite.t_scale_y.pos = new_point(300, 600);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.brightness = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.s_wall.t_brightness, env);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.brightness.pos = new_point(250, 520);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.t_brightness.pos = new_point(250, 520);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.color = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.s_wall.t_color, env);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.color.pos = new_point(250, 560);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.t_color.pos = new_point(250, 560);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.intensity = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.s_wall.t_intensity, env);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.intensity.pos = new_point(250, 600);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.t_intensity.pos = new_point(250, 600);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.gravity = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.s_wall.t_gravity, env);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.gravity.pos = new_point(250, 640);
src/editor_wall_tab_button.c:	env->editor.hud.s_wall.t_gravity.pos = new_point(250, 640);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.g_wall.t_texture, env);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture.pos = new_point(250, 520);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.t_texture.pos = new_point(250, 520);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture_scale_x = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.g_wall.t_texture_scale_x, env);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture_scale_x.pos = new_point(250, 560);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.t_texture_scale_x.pos = new_point(250, 560);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture_scale_y = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.g_wall.t_texture_scale_y, env);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture_scale_y.pos = new_point(250, 600);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.t_texture_scale_y.pos = new_point(250, 600);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture_align_x = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.g_wall.t_texture_align_x, env);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture_align_x.pos = new_point(250, 640);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.t_texture_align_x.pos = new_point(250, 640);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture_align_y = new_hud_button(ON_RELEASE, &change_var,
src/editor_wall_tab_button.c:	&env->editor.hud.g_wall.t_texture_align_y, env);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.texture_align_y.pos = new_point(250, 680);
src/editor_wall_tab_button.c:	env->editor.hud.g_wall.t_texture_align_y.pos = new_point(250, 680);
src/editor_wall_tabs.c:	print_text(new_point(480, 60), new_printable_text("Sector:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	print_text(new_point(480, 230), new_printable_text(ft_sitoa(env->editor.selected_sector),
src/editor_wall_tabs.c:	env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	print_text(new_point(520, 60), new_printable_text("Brightness:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.s_wall_sprite.brightness.str = ft_itoa(env->sectors[env->editor.selected_sector].brightness);
src/editor_wall_tabs.c:	env->editor.hud.s_wall_sprite.t_brightness.target = &env->sectors[env->editor.selected_sector].brightness;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.s_wall.brightness);
src/editor_wall_tabs.c:	print_text(new_point(560, 60), new_printable_text("Light_color:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.s_wall_sprite.color.str = ft_sitoa(env->sectors[env->editor.selected_sector].light_color);
src/editor_wall_tabs.c:	env->editor.hud.s_wall_sprite.t_color.target = &env->sectors[env->editor.selected_sector].light_color;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.s_wall.color);
src/editor_wall_tabs.c:	print_text(new_point(600, 60), new_printable_text("Intensity:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.s_wall_sprite.intensity.str = ft_sitoa(env->sectors[env->editor.selected_sector].intensity);
src/editor_wall_tabs.c:	env->editor.hud.s_wall_sprite.t_intensity.target = &env->sectors[env->editor.selected_sector].intensity;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.s_wall.intensity);
src/editor_wall_tabs.c:	env->editor.next_sprite_env.type = WALL_S;
src/editor_wall_tabs.c:	env->editor.previous_sprite_env.type = WALL_S;
src/editor_wall_tabs.c:	env->editor.current_sprite = env->selected_wall_sprite_sprite;
src/editor_wall_tabs.c:	env->editor.current_sprite_selection.img_down = env->mini_objects_textures[env->selected_wall_sprite_sprite].surface;
src/editor_wall_tabs.c:	env->editor.current_sprite_selection.img_pressed = env->mini_objects_textures[env->selected_wall_sprite_sprite].surface;
src/editor_wall_tabs.c:	env->editor.current_sprite_selection.img_hover = env->mini_objects_textures[env->selected_wall_sprite_sprite].surface;
src/editor_wall_tabs.c:	env->editor.current_sprite_selection.img_up = env->mini_objects_textures[env->selected_wall_sprite_sprite].surface;
src/editor_wall_tabs.c:	print_text(new_point(560, 60), new_printable_text("Pos: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.sp_wall_sprite.pos_x.str = ft_sitoa(
src/editor_wall_tabs.c:	env->sectors[env->editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall].pos[env->selected_wall_sprite_sprite].x);
src/editor_wall_tabs.c:	env->editor.hud.sp_wall_sprite.t_pos_x.target =
src/editor_wall_tabs.c:	&env->sectors[env->editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall].pos[env->selected_wall_sprite_sprite].x;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.sp_wall_sprite.pos_x);
src/editor_wall_tabs.c:	env->editor.hud.sp_wall_sprite.pos_y.str = ft_sitoa(
src/editor_wall_tabs.c:	env->sectors[env->editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall].pos[env->selected_wall_sprite_sprite].y);
src/editor_wall_tabs.c:	env->editor.hud.sp_wall_sprite.t_pos_y.target =
src/editor_wall_tabs.c:	&env->sectors[env->editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall].pos[env->selected_wall_sprite_sprite].y;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.sp_wall_sprite.pos_y);
src/editor_wall_tabs.c:	print_text(new_point(600, 60), new_printable_text("Scale: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.sp_wall_sprite.scale_x.str = ft_sitoa(
src/editor_wall_tabs.c:	env->sectors[env->editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall].scale[env->selected_wall_sprite_sprite].x);
src/editor_wall_tabs.c:	env->editor.hud.sp_wall_sprite.t_scale_x.target =
src/editor_wall_tabs.c:	&env->sectors[env->editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall].scale[env->selected_wall_sprite_sprite].x;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.sp_wall_sprite.scale_x);
src/editor_wall_tabs.c:	env->editor.hud.sp_wall_sprite.scale_y.str = ft_sitoa(
src/editor_wall_tabs.c:	env->sectors[env->editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall].scale[env->selected_wall_sprite_sprite].y);
src/editor_wall_tabs.c:	env->editor.hud.sp_wall_sprite.t_scale_y.target =
src/editor_wall_tabs.c:	&env->sectors[env->editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall].scale[env->selected_wall_sprite_sprite].y;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.sp_wall_sprite.scale_y);
src/editor_wall_tabs.c:	print_text(new_point(480, 60), new_printable_text("Sector:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	print_text(new_point(480, 230), new_printable_text(ft_sitoa(env->editor.selected_sector),
src/editor_wall_tabs.c:	env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	print_text(new_point(520, 60), new_printable_text("Brightness:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.s_wall.brightness.str = ft_itoa(env->sectors[env->editor.selected_sector].brightness);
src/editor_wall_tabs.c:	env->editor.hud.s_wall.t_brightness.target = &env->sectors[env->editor.selected_sector].brightness;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.s_wall.brightness);
src/editor_wall_tabs.c:	print_text(new_point(560, 60), new_printable_text("Light_color:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.s_wall.color.str = ft_sitoa(env->sectors[env->editor.selected_sector].light_color);
src/editor_wall_tabs.c:	env->editor.hud.s_wall.t_color.target = &env->sectors[env->editor.selected_sector].light_color;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.s_wall.color);
src/editor_wall_tabs.c:	print_text(new_point(600, 60), new_printable_text("Intensity:", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.s_wall.intensity.str = ft_sitoa(env->sectors[env->editor.selected_sector].intensity);
src/editor_wall_tabs.c:	env->editor.hud.s_wall.t_intensity.target = &env->sectors[env->editor.selected_sector].intensity;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.s_wall.intensity);
src/editor_wall_tabs.c:	print_text(new_point(520, 60), new_printable_text("Texture: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.texture.str = ft_sitoa(env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall]);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.t_texture.target = &env->sectors[env->editor.selected_sector].textures[env->editor.selected_wall];
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.g_wall.texture);
src/editor_wall_tabs.c:	print_text(new_point(560, 60), new_printable_text("Scale X: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.texture_scale_x.str = ft_sitoa(env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].x);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.t_texture_scale_x.target = &env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].x;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.g_wall.texture_scale_x);
src/editor_wall_tabs.c:	print_text(new_point(600, 60), new_printable_text("Scale Y: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.texture_scale_y.str = ft_sitoa(env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].y);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.t_texture_scale_y.target = &env->sectors[env->editor.selected_sector].scale[env->editor.selected_wall].y;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.g_wall.texture_scale_y);
src/editor_wall_tabs.c:	print_text(new_point(640, 60), new_printable_text("Align X: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.texture_align_x.str = ft_sitoa(env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].x);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.t_texture_align_x.target = &env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].x;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.g_wall.texture_align_x);
src/editor_wall_tabs.c:	print_text(new_point(680, 60), new_printable_text("Align Y: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.texture_align_y.str = ft_sitoa(env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].y);
src/editor_wall_tabs.c:	env->editor.hud.g_wall.t_texture_align_y.target = &env->sectors[env->editor.selected_sector].align[env->editor.selected_wall].y;
src/editor_wall_tabs.c:	draw_button(env, env->editor.hud.g_wall.texture_align_y);
src/enemy_parser.c:		|| eparser->current_enemy >= env->nb_enemies)
src/enemy_selection.c:	if (env->editor.dragged_enemy != -1 && env->inputs.left_click)
src/enemy_selection.c:			env->enemies[env->editor.dragged_enemy].pos.x =	(env->sdl.mx - env->editor.center.x) / env->editor.scale;
src/enemy_selection.c:			env->enemies[env->editor.dragged_enemy].pos.y =	(env->sdl.my - env->editor.center.y) / env->editor.scale;
src/enemy_selection.c:		env->editor.dragged_enemy = -1;
src/enemy_tab.c:		draw_button(env, env->editor.enemy_tab[i]);
src/enemy_utils.c:	while (i < env->nb_enemies)
src/enemy_utils.c:		if (env->enemies[i].exists && env->enemies[i].health > 0)
src/enemy_utils.c:			if (env->enemies[i].last_player_pos.x == env->player.pos.x &&
src/enemy_utils.c:				env->enemies[i].last_player_pos.y == env->player.pos.y &&
src/enemy_utils.c:				env->enemies[i].last_player_pos.z == env->player.head_z)
src/enemy_utils.c:				if (env->player.in_combat == 0)
src/enemy_utils.c:					env->player.in_combat = 1;
src/enemy_utils.c:					play_music(env, &env->sound.music_chan,
src/enemy_utils.c:						env->sound.at_dooms_gate, env->sound.music_vol);
src/enemy_utils.c:	if (env->player.in_combat && count == env->nb_enemies)
src/enemy_utils.c:		env->player.in_combat = 0;
src/enemy_utils.c:		play_music(env, &env->sound.music_chan, env->sound.mt_erebus,
src/enemy_utils.c:			env->sound.music_vol);
src/enemy_utils.c:	time = SDL_GetTicks() - env->time.milli_s;
src/enemy_utils.c:	while (i < env->sectors[sector].nb_vertices)
src/enemy_utils.c:		wall.p1.x = env->vertices[env->sectors[sector].vertices[i]].x;
src/enemy_utils.c:		wall.p1.y = env->vertices[env->sectors[sector].vertices[i]].y;
src/enemy_utils.c:		wall.p2.x = env->vertices[env->sectors[sector].vertices[i + 1]].x;
src/enemy_utils.c:		wall.p2.y = env->vertices[env->sectors[sector].vertices[i + 1]].y;
src/enemy_utils.c:			if (env->sectors[sector].neighbors[i] < 0)
src/enemy_utils.c:	while (i < env->sectors[sector].nb_vertices)
src/enemy_utils.c:		if (sector == env->player.sector)
src/enemy_utils.c:		if (env->sectors[sector].neighbors[i] >= 0 && env->sector_list[env->sectors[sector].neighbors[i]] == 0)
src/enemy_utils.c:			if (env->player.sector == env->sectors[sector].neighbors[i])
src/enemy_utils.c:			env->sector_list[env->sectors[sector].neighbors[i]] = 1;
src/enemy_utils.c:			sector_check = check_segment_in_sector(env, enemy, player, env->sectors[sector].neighbors[i]);
src/enemy_utils.c:				sector = env->sectors[sector].neighbors[i];
src/enemy_utils.c:	angle_left = env->enemies[nb].angle + 65;
src/enemy_utils.c:	angle_right = env->enemies[nb].angle - 65;
src/enemy_utils.c:	env->enemies[nb].far_left.x = 1000 * cos(angle_left * CONVERT_RADIANS) + env->enemies[nb].pos.x;
src/enemy_utils.c:	env->enemies[nb].far_left.y = 1000 * sin(angle_left * CONVERT_RADIANS) + env->enemies[nb].pos.y;
src/enemy_utils.c:	env->enemies[nb].far_right.x = 1000 * cos(angle_right * CONVERT_RADIANS) + env->enemies[nb].pos.x;
src/enemy_utils.c:	env->enemies[nb].far_right.y = 1000 * sin(angle_right * CONVERT_RADIANS) + env->enemies[nb].pos.y;
src/enemy_utils.c:	env->enemies[i].saw_player = 0;
src/enemy_utils.c:	distance = distance_two_points_2d(env->enemies[i].pos.x, env->enemies[i].pos.y, env->player.pos.x, env->player.pos.y);
src/enemy_utils.c:	env->enemies[i].saw_player = is_in_enemy_fov(env->enemies[i], env->player, distance);
src/enemy_utils.c:		env->enemies[i].saw_player = 1;
src/enemy_utils.c:	if (env->enemies[i].saw_player)
src/enemy_utils.c:		env->enemies[i].saw_player = enemy_line_of_sight(env, new_v2(env->enemies[i].pos.x, env->enemies[i].pos.y), new_v2(env->player.pos.x, env->player.pos.y), env->enemies[i].sector);
src/enemy_utils.c:	if (env->enemies[i].hit && !shot_flag)
src/enemy_utils.c:		env->enemies[i].saw_player = 1; //obligé de mettre ça apres pour eviter de pouvoir tirer sur un ennemi en restant a moitié caché
src/enemy_utils.c:			env->enemies[i].state = PURSUING;
src/enemy_utils.c:			move.z = (env->enemies[i].type == AERIAL) ? direction.z : 0;
src/enemy_utils.c:				env->enemies[i].dir = rand_dir(env, i);
src/enemy_utils.c:				if (env->enemies[i].dir == 0)
src/enemy_utils.c:				else if (env->enemies[i].dir == 1)
src/enemy_utils.c:			env->enemies[i].pos.x += move.x;
src/enemy_utils.c:			env->enemies[i].pos.y += move.y;
src/enemy_utils.c:			if (env->enemies[i].type == AERIAL)
src/enemy_utils.c:				env->enemies[i].pos.z += move.z;
src/enemy_utils.c:			env->enemies[i].sector = get_sector_no_z_origin(env, env->enemies[i].pos, env->enemies[i].sector);
src/enemy_utils.c:				env->enemies[i].angle = atan2(enemy.last_player_pos.y - env->enemies[i].pos.y, enemy.last_player_pos.x - env->enemies[i].pos.x) * CONVERT_DEGREES;
src/enemy_utils.c:	dist_enemy_player = distance_two_points_2d(env->enemies[i].pos.x, env->enemies[i].pos.y, env->player.pos.x, env->player.pos.y);
src/enemy_utils.c:	diff_z = (env->enemies[i].pos.z + env->enemies[i].eyesight) - (env->player.pos.z + env->player.eyesight);
src/enemy_utils.c:			env->enemies[i].state = PURSUING;
src/enemy_utils.c:			move.z = (env->enemies[i].type == AERIAL) ? direction.z : 0;
src/enemy_utils.c:				env->enemies[i].dir = rand_dir(env, i);
src/enemy_utils.c:				if (env->enemies[i].dir == 0)
src/enemy_utils.c:				else if (env->enemies[i].dir == 1)
src/enemy_utils.c:			env->enemies[i].pos.x += move.x;
src/enemy_utils.c:			env->enemies[i].pos.y += move.y;
src/enemy_utils.c:			env->enemies[i].sector = get_sector_no_z_origin(env, env->enemies[i].pos, env->enemies[i].sector);
src/enemy_utils.c:			if (env->enemies[i].type == AERIAL)
src/enemy_utils.c:				env->enemies[i].pos.z += move.z;
src/enemy_utils.c:		if (env->enemies[i].saw_player)
src/enemy_utils.c:			env->enemies[i].angle = atan2(enemy.last_player_pos.y - env->enemies[i].pos.y, enemy.last_player_pos.x - env->enemies[i].pos.x) * CONVERT_DEGREES;
src/enemy_utils.c:		env->enemies[i].saw_player = 0;
src/enemy_utils.c:		if (distance <= 31 && env->enemies[i].saw_player)
src/enemy_utils.c:			env->enemies[i].state = FIRING;
src/enemy_utils.c:			if (env->enemies[i].shot)
src/enemy_utils.c:				if (env->enemies[i].behavior == RANGED_PROJECTILE)
src/enemy_utils.c:					create_projectile(env, new_projectile_data(env->enemies[i].pos, env->enemies[i].angle * CONVERT_RADIANS, 1, 1),
src/enemy_utils.c:						new_projectile_stats(0.6, env->enemies[i].damage * env->difficulty, 0.8, env->enemies[i].eyesight - 2.2),
src/enemy_utils.c:				else if (env->enemies[i].behavior == RANGED_AIMBOT)
src/enemy_utils.c:					env->player.hit = 1;
src/enemy_utils.c:					env->player.health -= ft_clamp(env->enemies[i].damage * env->difficulty - env->player.armor, 0, env->enemies[i].damage);
src/enemy_utils.c:					env->player.armor -= ft_clamp(env->enemies[i].damage * env->difficulty, 0, env->player.armor);
src/enemy_utils.c:				if (env->player.health < 0)
src/enemy_utils.c:					env->player.health = 0;
src/enemy_utils.c:			env->enemies[i].shot = 0;
src/enemy_utils.c:	while (i < env->nb_enemies)
src/enemy_utils.c:;		env->enemies[i].state = RESTING;
src/enemy_utils.c:		if (env->enemies[i].exists && env->enemies[i].health > 0 && env->enemies[i].saw_player)
src/enemy_utils.c:			env->enemies[i].last_player_pos.x = env->player.pos.x;
src/enemy_utils.c:			env->enemies[i].last_player_pos.y = env->player.pos.y;
src/enemy_utils.c:			env->enemies[i].last_player_pos.z = env->player.head_z;
src/enemy_utils.c:		if (env->enemies[i].behavior == MELEE_KAMIKAZE || env->enemies[i].behavior == MELEE_FIGHTER)
src/enemy_utils.c:			melee_ai(env, env->enemies[i], distance, i);
src/enemy_utils.c:		else if (env->enemies[i].behavior == RANGED_AIMBOT
src/enemy_utils.c:			|| env->enemies[i].behavior == RANGED_PROJECTILE)
src/enemy_utils.c:			ranged_ai(env, env->enemies[i], distance, i);
src/enemy_utils.c:	while (i < env->nb_enemies)
src/enemy_utils.c:		if (env->enemies[i].health > 0 && distance_two_points_2d(env->enemies[i].pos.x, env->enemies[i].pos.y, PLAYER_XPOS, PLAYER_YPOS) < 1.75 && env->enemies[i].exists
src/enemy_utils.c:			&& env->enemies[i].pos.z >= PLAYER_ZPOS - 1 && env->enemies[i].pos.z <= env->player.head_z + 1 && (env->enemies[i].behavior == MELEE_KAMIKAZE ||
src/enemy_utils.c:			env->enemies[i].behavior == MELEE_FIGHTER))
src/enemy_utils.c:			env->player.hit = 1;
src/enemy_utils.c:			env->player.health -= ft_clamp(env->enemies[i].damage - env->player.armor, 0, env->enemies[i].damage);
src/enemy_utils.c:			env->player.armor -= ft_clamp(env->enemies[i].damage, 0, env->player.armor);
src/enemy_utils.c:			if (env->player.health < 0)
src/enemy_utils.c:				env->player.health = 0;
src/enemy_utils.c:			if (env->enemies[i].behavior == MELEE_KAMIKAZE)
src/enemy_utils.c:			env->enemies[i].exists = 0;
src/enemy_utils.c:	while (i < env->nb_enemies)
src/enemy_utils.c:		if (env->enemies[i].health > 0 && distance_two_points_2d(env->enemies[i].pos.x, env->enemies[i].pos.y, pos.x, pos.y) < env->enemies[i].size_2d + radius && env->enemies[i].exists
src/enemy_utils.c:			&& pos.z <= env->enemies[i].eyesight + env->enemies[i].pos.z && pos.z >= env->enemies[i].pos.z)
src/enemy_utils.c:			distance = distance_two_points_2d(env->enemies[i].pos.x, env->enemies[i].pos.y, pos.x, pos.y);
src/enemy_utils.c:			new_v2(env->enemies[i].pos.x, env->enemies[i].pos.y), radius + env->enemies[i].size_2d) && env->enemies[i].exists
src/enemy_utils.c:			&& pos.z <= env->enemies[i].eyesight + env->enemies[i].pos.z && pos.z >= env->enemies[i].pos.z)
src/enemy_utils.c:			distance = distance_two_points_2d(env->enemies[i].pos.x, env->enemies[i].pos.y, pos.x, pos.y);
src/event_checkers.c:	movement = new_movement(env->player.sector, env->player.size_2d,
src/event_checkers.c:			env->player.eyesight, env->player.pos);
src/event_checkers.c:		move = env->player.pos;
src/event_checkers.c:			|| intersects_with_sector(&env->sectors[get_sector_no_z(env, move)],
src/event_checkers.c:	movement = new_movement(env->player.sector, env->player.size_2d,
src/event_checkers.c:			env->player.eyesight, env->player.pos);
src/event_checkers.c:		move = env->player.pos;
src/event_checkers.c:			|| intersects_with_sector(&env->sectors[get_sector_no_z(env, move)],
src/event_checkers.c:	movement = new_movement(env->player.sector, env->player.size_2d,
src/event_checkers.c:			env->player.eyesight, env->player.pos);
src/event_checkers.c:		move = env->player.pos;
src/event_checkers.c:			|| intersects_with_sector(&env->sectors[get_sector_no_z(env, move)],
src/event_checkers.c:	sector = env->sectors[event->check_param.sector];
src/event_checkers.c:	if (env->player.sector == event->check_param.sector)
src/event_checkers.c:		z = get_floor_at_pos(sector, env->player.pos, env);
src/event_checkers.c:		if (z + env->player.eyesight + 1 >= get_ceiling_at_pos(sector,
src/event_checkers.c:					env->player.pos, env))
src/event_checkers.c:	sector = env->sectors[event->check_param.sector];
src/event_checkers.c:	if (env->player.sector == event->check_param.sector)
src/event_checkers.c:		z = get_floor_at_pos(sector, env->player.pos, env);
src/event_checkers.c:		if (z + env->player.eyesight + 1 >= get_ceiling_at_pos(sector,
src/event_checkers.c:					env->player.pos, env))
src/event_checkers.c:	sector = env->sectors[event->check_param.sector];
src/event_checkers.c:	if (env->player.sector == event->check_param.sector)
src/event_checkers.c:		z = get_floor_at_pos(sector, env->player.pos, env);
src/event_checkers.c:		if (z + env->player.eyesight + 1 >= get_ceiling_at_pos(sector,
src/event_checkers.c:					env->player.pos, env))
src/event_checkers.c:	sector = env->sectors[event->check_param.sector];
src/event_checkers.c:	if (env->player.sector == event->check_param.sector)
src/event_checkers.c:		z = get_floor_at_pos(sector, env->player.pos, env);
src/event_checkers.c:		if (z + env->player.eyesight + 1 >= get_ceiling_at_pos(sector,
src/event_checkers.c:					env->player.pos, env))
src/event_checkers.c:	if (intersects_with_wall_no_portal_check(&env->sectors[event->
src/event_checkers.c:		check_param.sector], env->player.pos, event->check_param.wall, env))
src/event_updaters.c:	update_sector_slope(env, &env->sectors[event->update_param.sector]);
src/event_updaters.c:	//if (env->player.sector == event->update_param.sector)
src/event_updaters.c:	env->player.pos.z = get_floor_at_pos(env->sectors[env->player.sector],
src/event_updaters.c:	env->player.pos, env);
src/event_updaters.c:	if (env->sectors[event->update_param.sector].floor_texture < 0)
src/event_updaters.c:		env->contains_skybox = 1;
src/event_updaters.c:	if (set_sector_floor_map_array(&env->sectors[event->update_param.sector],
src/event_updaters.c:		env->wall_textures[env->sectors[event->update_param.sector].
src/event_updaters.c:	if (env->sectors[event->update_param.sector].ceiling_texture < 0)
src/event_updaters.c:		env->contains_skybox = 1;
src/event_updaters.c:	if (set_sector_ceiling_map_array(&env->sectors[event->update_param.sector],
src/event_updaters.c:		env->wall_textures[env->sectors[event->update_param.sector].
src/event_updaters.c:	if (env->sectors[event->update_param.sector].
src/event_updaters.c:		env->contains_skybox = 1;
src/event_updaters.c:	if (set_sector_wall_map_array(&env->sectors[event->update_param.sector],
src/event_updaters.c:		env->wall_textures[env->sectors[event->update_param.sector].
src/event_updaters.c:	if (set_camera_map_array(&env->player.camera, event->update_param.sector,
src/event_updaters.c:	while (i < env->nb_enemies)
src/event_updaters.c:		if (env->enemies[i].sector == event->update_param.sector)
src/event_updaters.c:			env->enemies[i].brightness =
src/event_updaters.c:			env->sectors[event->update_param.sector].brightness;
src/event_updaters.c:			env->enemies[i].light_color =
src/event_updaters.c:			env->sectors[event->update_param.sector].light_color;
src/event_updaters.c:			env->enemies[i].intensity =
src/event_updaters.c:			env->sectors[event->update_param.sector].intensity;
src/event_updaters.c:	while (i < env->nb_objects)
src/event_updaters.c:		if (env->objects[i].sector == event->update_param.sector)
src/event_updaters.c:			env->objects[i].brightness =
src/event_updaters.c:			env->sectors[event->update_param.sector].brightness;
src/event_updaters.c:			env->objects[i].light_color =
src/event_updaters.c:			env->sectors[event->update_param.sector].light_color;
src/event_updaters.c:			env->objects[i].intensity =
src/event_updaters.c:			env->sectors[event->update_param.sector].intensity;
src/event_updaters.c:	env->objects[event->update_param.object].sector = get_sector(env,
src/event_updaters.c:	env->objects[event->update_param.object].pos, 
src/event_updaters.c:	env->objects[event->update_param.object].sector);
src/event_updaters.c:	env->objects[event->update_param.object].brightness =
src/event_updaters.c:	env->sectors[env->objects[event->update_param.object].sector].brightness;
src/event_updaters.c:	env->objects[event->update_param.object].light_color =
src/event_updaters.c:	env->sectors[env->objects[event->update_param.object].sector].light_color;
src/event_updaters.c:	env->objects[event->update_param.object].intensity =
src/event_updaters.c:	env->sectors[env->objects[event->update_param.object].sector].intensity;
src/event_updaters.c:	env->enemies[event->update_param.enemy].sector = get_sector(env,
src/event_updaters.c:	env->enemies[event->update_param.enemy].pos, 
src/event_updaters.c:	env->enemies[event->update_param.enemy].sector);
src/event_updaters.c:	env->enemies[event->update_param.enemy].brightness =
src/event_updaters.c:	env->sectors[env->enemies[event->update_param.enemy].sector].brightness;
src/event_updaters.c:	env->enemies[event->update_param.enemy].light_color =
src/event_updaters.c:	env->sectors[env->enemies[event->update_param.enemy].sector].light_color;
src/event_updaters.c:	env->enemies[event->update_param.enemy].intensity =
src/event_updaters.c:	env->sectors[env->enemies[event->update_param.enemy].sector].intensity;
src/event_updaters.c:	while (i < env->nb_sectors)
src/event_updaters.c:		while (j < env->sectors[i].nb_vertices)
src/event_updaters.c:			if (env->sectors[i].vertices[j] == event->update_param.vertex)
src/event_updaters.c:				update_sector_slope(env, &env->sectors[i]);
src/event_updaters.c:				if (env->player.sector == i)
src/event_updaters.c:					env->player.pos.z = get_floor_at_pos(env->
src/event_updaters.c:					sectors[env->player.sector], env->player.pos, env);
src/event_updaters.c:	env->objects[event->update_param.object].sprite =
src/event_updaters.c:	env->objects_main_sprites[env->objects[event->update_param.object].sprite];
src/event_updaters.c:	env->enemies[event->update_param.enemy].sprite =
src/event_updaters.c:	env->enemies_main_sprites[env->objects[event->update_param.enemy].sprite];
src/event_updaters.c:	env->sectors[event->update_param.sector].wall_sprites[event->
src/event_updaters.c:	env->objects_main_sprites[env->sectors[event->update_param.sector]
src/event_updaters.c:	env->sectors[event->update_param.sector].floor_sprites.sprite[event->
src/event_updaters.c:	env->objects_main_sprites[env->sectors[event->update_param.sector]
src/event_updaters.c:	env->sectors[event->update_param.sector].ceiling_sprites.sprite[event->
src/event_updaters.c:	env->objects_main_sprites[env->sectors[event->update_param.sector]
src/events_links_protection.c:	if (eparser->current_index >= (int)env->nb_global_events)
src/events_links_protection.c:	if (eparser->current_index >= (int)env->sectors[eparser->current_sector]
src/events_links_protection.c:	if (eparser->current_index >= (int)env->sectors[eparser->current_sector]
src/events_links_protection.c:	if (eparser->current_index >= (int)env->sectors[eparser->current_sector]
src/events_links_protection.c:	if (eparser->current_index >= (int)env->sectors[eparser->current_sector]
src/events_links_protection.c:	if (eparser->current_index >= (int)env->sectors[eparser->current_sector]
src/events_tab_conditions.c:	if ((env->editor.selected_sector == -1 && env->selected_floor == -1
src/events_tab_conditions.c:		&& env->nb_global_events > 0)
src/events_tab_conditions.c:		|| (env->editor.selected_sector != -1 &&
src/events_tab_conditions.c:		(env->sectors[env->editor.selected_sector].nb_stand_events > 0
src/events_tab_conditions.c:		|| env->sectors[env->editor.selected_sector].nb_walk_in_events > 0
src/events_tab_conditions.c:		|| env->sectors[env->editor.selected_sector].nb_walk_out_events > 0))
src/events_tab_conditions.c:		|| (env->selected_floor != -1 &&
src/events_tab_conditions.c:		(env->sectors[env->selected_floor].nb_stand_events > 0
src/events_tab_conditions.c:		|| env->sectors[env->selected_floor].nb_walk_in_events > 0
src/events_tab_conditions.c:		|| env->sectors[env->selected_floor].nb_walk_out_events > 0))
src/events_tab_conditions.c:		|| (env->selected_wall_sprite_sprite != -1 &&
src/events_tab_conditions.c:		(env->sectors[env->editor.selected_sector].wall_sprites[env->
src/events_tab_conditions.c:		selected_wall_sprite_wall].nb_press_events[env->
src/events_tab_conditions.c:		|| env->sectors[env->editor.selected_sector].wall_sprites[env->
src/events_tab_conditions.c:		selected_wall_sprite_wall].nb_shoot_events[env->
src/events_tab_conditions.c:	if ((env->selected_wall_sprite_wall != -1
src/events_tab_conditions.c:		&& ((env->editor.selected_events == 0 && env->sectors[env->
src/events_tab_conditions.c:		editor.selected_sector].wall_sprites[env->
src/events_tab_conditions.c:		selected_wall_sprite_wall].nb_press_events[env->
src/events_tab_conditions.c:		|| (env->editor.selected_events == 0 && env->sectors[env->
src/events_tab_conditions.c:		editor.selected_sector].wall_sprites[env->
src/events_tab_conditions.c:		selected_wall_sprite_wall].nb_shoot_events[env->
src/events_tab_conditions.c:		|| (env->editor.selected_sector != -1
src/events_tab_conditions.c:		&& ((env->editor.selected_events == 0 && env->sectors[env->
src/events_tab_conditions.c:		|| (env->editor.selected_events == 1 && env->sectors[env->
src/events_tab_conditions.c:		|| (env->editor.selected_events == 2 && env->sectors[env->
src/events_tab_conditions.c:		|| (env->editor.selected_sector == -1
src/events_tab_conditions.c:		&& env->selected_floor == -1 && env->nb_global_events > 1))
src/explosion.c:	if (!(new = ft_lstnew(&env->explosion, sizeof(t_explosion))))
src/explosion.c:	ft_lstpushback(&env->explosions, new);
src/explosion.c:	tmp = env->explosions;
src/explosion.c:	tmp = env->explosions;
src/explosion.c:			distance = distance_two_points_3d(new_v3(env->player.pos.x, env->player.pos.y, env->player.pos.z + env->player.eyesight / 2), ((t_explosion*)tmp->content)->pos);
src/explosion.c:				env->player.hit = 1;
src/explosion.c:				env->player.health -= ft_clamp(damage - env->player.armor, 0, damage);
src/explosion.c:				env->player.armor -= ft_clamp(damage, 0, env->player.armor);
src/explosion.c:			env->nb_explosions--;
src/explosion.c:	tmp = env->explosions;
src/explosion.c:		while (i < env->nb_objects)
src/explosion.c:			if (((t_explosion*)tmp->content)->damage_burst == 1 && env->objects[i].destructible && env->objects[i].health > 0)
src/explosion.c:				distance = distance_two_points_3d(new_v3(env->objects[i].pos.x, env->objects[i].pos.y, env->objects[i].pos.z), ((t_explosion*)tmp->content)->pos);
src/explosion.c:					env->objects[i].health -= damage;
src/explosion.c:					if (env->objects[i].explodes && env->objects[i].health <= 0)
src/explosion.c:							new_explosion_data(env->objects[i].pos, env->objects[i].explosion_size, env->objects[i].damage, env->object_sprites[env->objects[i].sprite].death_counterpart), 0);
src/explosion.c:						env->objects[i].exists = 0;
src/explosion.c:	tmp = env->explosions;
src/explosion.c:		while (i < env->nb_enemies)
src/explosion.c:			if (((t_explosion*)tmp->content)->damage_burst == 1 && env->enemies[i].health > 0)
src/explosion.c:				distance = distance_two_points_3d(new_v3(env->enemies[i].pos.x, env->enemies[i].pos.y, env->enemies[i].pos.z), ((t_explosion*)tmp->content)->pos);
src/explosion.c:					env->enemies[i].health -= damage;
src/explosion.c:					env->enemies[i].hit = 1;
src/explosion_maths.c:	tmp = env->explosions;
src/explosion_maths.c:	erender->screen_pos.y = env->h_h
src/explosion_maths.c:	erender->screen_pos.x = env->h_w
src/fill_new_sector.c:		if (env->editor.reverted)
src/fill_new_sector.c:	tmp = env->editor.current_vertices;
src/fill_new_sector.c:		if (env->editor.reverted)
src/fill_new_sector.c:		sector->textures[index] = env->editor.current_texture;
src/fill_new_sector.c:			* env->wall_textures[sector->textures[index]].nb_maps)))
src/fill_new_sector.c:		env->wall_textures[sector->textures[index]], index, env);
src/fill_new_sector.c:	if (!env->editor.reverted)
src/fill_new_sector.c:			* env->wall_textures[sector->textures[sector->nb_vertices]].nb_maps)))
src/fill_new_sector.c:		env->wall_textures[sector->textures[sector->nb_vertices]],
src/fill_new_sector.c:			* env->wall_textures[sector->textures[0]].nb_maps)))
src/fill_new_sector.c:		env->wall_textures[sector->textures[0]],
src/fill_new_sector.c:	while (j < env->wall_textures[sector->ceiling_texture].nb_maps)
src/fill_new_sector.c:		sector->ceiling_scale[j].x = (env->wall_textures[sector->ceiling_texture].surface->w / sector->ceiling_map_scale.x)
src/fill_new_sector.c:		/ pow(2, env->wall_textures[sector->ceiling_texture].nb_maps - 1 - j);
src/fill_new_sector.c:		sector->ceiling_scale[j].y = (env->wall_textures[sector->ceiling_texture].surface->h / sector->ceiling_map_scale.y)
src/fill_new_sector.c:		/ pow(2, env->wall_textures[sector->ceiling_texture].nb_maps - 1 - j);
src/fill_new_sector.c:	while (j < env->wall_textures[sector->floor_texture].nb_maps)
src/fill_new_sector.c:		sector->floor_scale[j].x = (env->wall_textures[sector->floor_texture].surface->w / sector->floor_map_scale.x)
src/fill_new_sector.c:		/ pow(2, env->wall_textures[sector->floor_texture].nb_maps - 1 - j);
src/fill_new_sector.c:		sector->floor_scale[j].y = (env->wall_textures[sector->floor_texture].surface->h / sector->floor_map_scale.y)
src/fill_new_sector.c:		/ pow(2, env->wall_textures[sector->floor_texture].nb_maps - 1 - j);
src/floor_sprite_parser.c:		|| eparser->current_sector >= env->nb_sectors)
src/floor_sprite_parser.c:		env->sectors[eparser->current_sector].floor_sprites.nb_sprites)
src/fps.c:	//ft_printf("time = %d\n", (int)(new_time - env->sdl.time));
src/fps.c:	fps = 1000 / (new_time - env->sdl.time);
src/fps.c:	env->fps_count++;
src/fps.c:	if (new_time - env->frame_timer >= 1000)
src/fps.c:		env->frame_timer = new_time;
src/fps.c:		env->fps = env->fps_count;
src/fps.c:		env->fps_count = 0;
src/fps.c:				ft_sitoa(env->fps),
src/fps.c:				env->sdl.fonts.lato20,
src/fps.c:	env->sdl.time = new_time;
src/free_all.c:		if (env->sprite_textures[i].surface)
src/free_all.c:			SDL_FreeSurface(env->sprite_textures[i].surface);
src/free_all.c:	while (i < env->nb_sectors)
src/free_all.c:		free_sector(&env->sectors[i]);
src/free_all.c:	ft_memdel((void**)&env->sectors);
src/free_all.c:	if (env->sdl.window)
src/free_all.c:		SDL_DestroyWindow(env->sdl.window);
src/free_all.c:	if (env->sdl.renderer)
src/free_all.c:		SDL_DestroyRenderer(env->sdl.renderer);
src/free_all.c:	if (env->sdl.texture)
src/free_all.c:		SDL_DestroyTexture(env->sdl.texture);
src/free_all.c:	if (env->sdl.texture_pixels)
src/free_all.c:		ft_memdel((void**)&env->sdl.texture_pixels);
src/free_all.c:	if (env->zbuffer)
src/free_all.c:		ft_memdel((void**)&env->zbuffer);
src/free_all.c:	if (env->ymin)
src/free_all.c:		ft_memdel((void**)&env->ymin);
src/free_all.c:	if (env->ymax)
src/free_all.c:		ft_memdel((void**)&env->ymax);
src/free_all.c:		FMOD_Sound_Release(env->weapons[i].shot);
src/free_all.c:	FMOD_Sound_Release(env->sound.footstep);
src/free_all.c:	FMOD_Sound_Release(env->sound.at_dooms_gate);
src/free_all.c:	FMOD_Sound_Release(env->sound.mt_erebus);
src/free_all.c:	FMOD_System_Close(env->sound.system);
src/free_all.c:	FMOD_System_Release(env->sound.system);
src/free_all.c:	if (env->sdl.fonts.amazdoom70)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.amazdoom70);
src/free_all.c:	if (env->sdl.fonts.amazdoom50)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.amazdoom50);
src/free_all.c:	if (env->sdl.fonts.amazdoom20)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.amazdoom20);
src/free_all.c:	if (env->sdl.fonts.alice30)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.alice30);
src/free_all.c:	if (env->sdl.fonts.alice70)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.alice70);
src/free_all.c:	if (env->sdl.fonts.lato10)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.lato10);
src/free_all.c:	if (env->sdl.fonts.lato15)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.lato15);
src/free_all.c:	if (env->sdl.fonts.lato20)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.lato20);
src/free_all.c:	if (env->sdl.fonts.lato50)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.lato50);
src/free_all.c:	if (env->sdl.fonts.bebasneue)
src/free_all.c:		TTF_CloseFont(env->sdl.fonts.bebasneue);
src/free_all.c:	free_camera(&env->player.camera, env);
src/free_all.c:	if (env->sectors)
src/free_all.c:		if (env->skybox[i].texture_scale)
src/free_all.c:			ft_memdel((void**)&env->skybox[i].texture_scale);
src/free_all.c:	if (env->vertices)
src/free_all.c:		ft_memdel((void**)&env->vertices);
src/free_all.c:	if (env->objects)
src/free_all.c:		ft_memdel((void**)&env->objects);
src/free_all.c:	if (env->save_file)
src/free_all.c:		ft_strdel(&env->save_file);
src/free_all.c:	if (env->sector_list)
src/free_all.c:		ft_memdel((void**)&env->sector_list);
src/free_all.c:	if (env->events)
src/free_all.c:		ft_lstdelfront(&env->events);
src/free_all.c:	if (env->queued_values)
src/free_all.c:		ft_lstdelfront(&env->queued_values);
src/free_all.c:	if (env->res[0])
src/free_all.c:		ft_strdel(&env->res[0]);
src/free_all.c:	if (env->res[1])
src/free_all.c:		ft_strdel(&env->res[1]);
src/free_all.c:	if (env->res[2])
src/free_all.c:		ft_strdel(&env->res[2]);
src/free_all.c:	if (env->input_box.str)
src/free_all.c:		ft_strdel(&env->input_box.str);
src/free_all.c:	free_events(env->global_events, env->nb_global_events);
src/free_all.c:	free_events(env->wall_bullet_holes_events,
src/free_all.c:	env->nb_wall_bullet_holes_events);
src/free_all.c:	free_events(env->floor_bullet_holes_events,
src/free_all.c:	env->nb_floor_bullet_holes_events);
src/free_all.c:	free_events(env->ceiling_bullet_holes_events,
src/free_all.c:	env->nb_ceiling_bullet_holes_events);
src/free_all.c:	if (env->projectiles)
src/free_all.c:		while (env->projectiles)
src/free_all.c:			tmplst = env->projectiles;
src/free_all.c:			free(env->projectiles);
src/free_all.c:			env->projectiles = tmplst;
src/game_menu.c:	print_text(new_point(780, 850), new_printable_text("START", env->sdl.fonts.amazdoom70, 0xFFFFFFFF, 70), env);
src/generate_mipmaps.c:		texture = &env->wall_textures[i];
src/generate_mipmaps.c:		env->wall_textures[i].nb_maps = nb_maps;
src/get_bullet_hole_pos.c:	new_plane(new_v3(env->vertices[sector->vertices[0]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[0]].y,
src/get_bullet_hole_pos.c:	new_v3(env->vertices[sector->vertices[1]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[1]].y,
src/get_bullet_hole_pos.c:	new_v3(env->vertices[sector->vertices[2]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[2]].y,
src/get_bullet_hole_pos.c:	new_v3(env->vertices[sector->vertices[0]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[0]].y,
src/get_bullet_hole_pos.c:	new_plane(new_v3(env->vertices[sector->vertices[0]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[0]].y,
src/get_bullet_hole_pos.c:	new_v3(env->vertices[sector->vertices[1]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[1]].y,
src/get_bullet_hole_pos.c:	new_v3(env->vertices[sector->vertices[2]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[2]].y,
src/get_bullet_hole_pos.c:	new_v3(env->vertices[sector->vertices[0]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[0]].y,
src/get_bullet_hole_pos.c:	new_plane(new_v3(env->vertices[sector->vertices[i]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[i]].y,
src/get_bullet_hole_pos.c:	new_v3(env->vertices[sector->vertices[i]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[i]].y,
src/get_bullet_hole_pos.c:	new_v3(env->vertices[sector->vertices[i + 1]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[i + 1]].y,
src/get_bullet_hole_pos.c:	new_v3(env->vertices[sector->vertices[i]].x,
src/get_bullet_hole_pos.c:	env->vertices[sector->vertices[i]].y,
src/get_bullet_hole_pos.c:	dist = sqrt(pow((inter.x - env->vertices[sector->vertices[i]].x), 2)
src/get_bullet_hole_pos.c:	+ pow((inter.y - env->vertices[sector->vertices[i]].y), 2));
src/get_clockwise_order.c:	vertex2 = env->vertices[0];
src/get_clockwise_order.c:	while (i < env->sectors[index].nb_vertices - 1)
src/get_clockwise_order.c:		num = env->sectors[index].vertices[i];
src/get_clockwise_order.c:		vertex1 = env->vertices[num];
src/get_clockwise_order.c:		num = env->sectors[index].vertices[i + 1];
src/get_clockwise_order.c:		vertex2 = env->vertices[num];
src/get_clockwise_order.c:	num = env->sectors[index].vertices[0];
src/get_clockwise_order.c:	vertex2 = env->vertices[num];
src/get_clockwise_order.c:	tmp = env->editor.current_vertices;
src/get_clockwise_order.c:	vertex2 = (t_vertex*)env->editor.current_vertices->content;
src/get_current_ceiling_map.c:	if (sector->ceiling_map_scale.x * env->w >
src/get_current_ceiling_map.c:			sector->ceiling_map_scale.y * env->h)
src/get_current_ceiling_map.c:		size = sector->ceiling_map_scale.x * env->w;
src/get_current_ceiling_map.c:		size = sector->ceiling_map_scale.y * env->h;
src/get_current_ceiling_map.c:		text = env->skyboxes[0].textures[0];
src/get_current_ceiling_map.c:		text = env->wall_textures[texture];
src/get_current_ceiling_map.c:	sector = env->sectors[render->sector];
src/get_current_ceiling_map.c:	if (env->options.o)
src/get_current_ceiling_map.c:			env->w * sector.ceiling_map_scale.x
src/get_current_ceiling_map.c:			env->h * sector.ceiling_map_scale.y
src/get_current_floor_map.c:	if (sector->floor_map_scale.x * env->w >
src/get_current_floor_map.c:			sector->floor_map_scale.y * env->h)
src/get_current_floor_map.c:		size = sector->floor_map_scale.x * env->w;
src/get_current_floor_map.c:		size = sector->floor_map_scale.y * env->h;
src/get_current_floor_map.c:		text = env->skyboxes[0].textures[0];
src/get_current_floor_map.c:		text = env->wall_textures[texture];
src/get_current_floor_map.c:	sector = env->sectors[render->sector];
src/get_current_floor_map.c:	if (env->options.o)
src/get_current_floor_map.c:			env->w * sector.floor_map_scale.x
src/get_current_floor_map.c:			env->h * sector.floor_map_scale.y
src/get_current_map.c:		/*	text = env->skyboxes[0].textures[0];
src/get_current_map.c:		text = env->wall_textures[texture];
src/get_current_map.c:		env->w * env->sectors[render->sector].map_scale[render->i].x
src/get_current_map.c:		env->h * env->sectors[render->sector].map_scale[render->i].y
src/get_current_wall_map.c:	if (sector->scale[i].x * env->w >
src/get_current_wall_map.c:			sector->scale[i].y * env->h)
src/get_current_wall_map.c:		size = sector->scale[i].x * env->w;
src/get_current_wall_map.c:		size = sector->scale[i].y * env->h;
src/get_current_wall_map.c:	text = env->wall_textures[texture];
src/get_current_wall_map.c:	sector = env->sectors[render->sector];
src/get_current_wall_map.c:	if (env->options.o)
src/get_current_wall_map.c:			env->w * sector.scale[render->i].x
src/get_current_wall_map.c:			env->h * sector.scale[render->i].y
src/get_event_array.c:		return (&env->global_events[eparser->source_index]);
src/get_event_array.c:		return (&env->global_events[eparser->target_index]);
src/get_event_array.c:		return (&env->sectors[eparser->source_sector]
src/get_event_array.c:		return (&env->sectors[eparser->target_sector]
src/get_event_array.c:		return (&env->sectors[eparser->source_sector]
src/get_event_array.c:		return (&env->sectors[eparser->target_sector]
src/get_event_array.c:		return (&env->sectors[eparser->source_sector]
src/get_event_array.c:		return (&env->sectors[eparser->target_sector]
src/get_event_array.c:		return (&env->sectors[eparser->source_sector]
src/get_event_array.c:		return (&env->sectors[eparser->target_sector]
src/get_event_array.c:		return (&env->sectors[eparser->source_sector]
src/get_event_array.c:		return (&env->sectors[eparser->target_sector]
src/get_event_nb.c:		return (&env->global_events[eparser->source_index].nb_launch_conditions);
src/get_event_nb.c:		return (&env->global_events[eparser->target_index].nb_launch_conditions);
src/get_event_nb.c:		return (&env->sectors[eparser->source_sector]
src/get_event_nb.c:		return (&env->sectors[eparser->target_sector]
src/get_event_nb.c:		return (&env->sectors[eparser->source_sector]
src/get_event_nb.c:		return (&env->sectors[eparser->target_sector]
src/get_event_nb.c:		return (&env->sectors[eparser->source_sector]
src/get_event_nb.c:		return (&env->sectors[eparser->target_sector]
src/get_event_nb.c:		return (&env->sectors[eparser->source_sector]
src/get_event_nb.c:		return (&env->sectors[eparser->target_sector]
src/get_event_nb.c:		return (&env->sectors[eparser->source_sector]
src/get_event_nb.c:		return (&env->sectors[eparser->target_sector]
src/get_existing_vertex.c:	while (i < env->nb_vertices)
src/get_existing_vertex.c:		vertex = env->vertices[i];
src/get_existing_vertex.c:		if (round((env->sdl.mx - env->editor.center.x) / env->editor.scale) == vertex.x
src/get_existing_vertex.c:				&& round((env->sdl.my - env->editor.center.y) / env->editor.scale) == vertex.y
src/get_existing_vertex.c:				&& vertex.num != env->vertices[env->editor.selected_vertex].num)
src/get_existing_vertex.c:	while (i < env->nb_vertices)
src/get_existing_vertex.c:		vertex = env->vertices[i];
src/get_existing_vertex.c:		if (round((env->sdl.mx - env->editor.center.x) / env->editor.scale) == vertex.x
src/get_existing_vertex.c:				&& round((env->sdl.my - env->editor.center.y) / env->editor.scale) == vertex.y)
src/get_screen_sectors.c:		tmp = (x / (double)(env->w - 1)) * camera->range + camera->near_left;
src/get_screen_sectors.c:		curr.y = -env->player.camera.near_z;
src/get_screen_sectors.c:		camera->screen_pos[x] = get_sector(env, curr, env->player.sector);
src/get_screen_sectors.c:	size = env->screen_sectors_size;
src/get_screen_sectors.c:	while (x < env->w)
src/get_screen_sectors.c:		pt[i].start = env->w / (double)THREADS * i;
src/get_screen_sectors.c:		pt[i].end = env->w / (double)THREADS * (i + 1);
src/get_sector.c:	if (origin < 0 || origin >= env->nb_sectors)
src/get_sector.c:	while (i < env->sectors[origin].nb_vertices)
src/get_sector.c:		if (env->sectors[origin].neighbors[i] >= 0)
src/get_sector.c:			if (is_in_sector(env, env->sectors[origin].neighbors[i], pos))
src/get_sector.c:				return (env->sectors[origin].neighbors[i]);
src/get_sector.c:	while (i < env->nb_sectors)
src/get_sector.c:	while (i < env->nb_sectors)
src/get_sector.c:	while (i < env->nb_sectors)
src/get_sector.c:	if (origin < 0 || origin >= env->nb_sectors)
src/get_sector.c:	while (i < env->sectors[origin].nb_vertices)
src/get_sector.c:		if (env->sectors[origin].neighbors[i] >= 0)
src/get_sector.c:			if (is_in_sector_no_z(env, env->sectors[origin].neighbors[i], new_v2(pos.x, pos.y)))
src/get_sector.c:				return (env->sectors[origin].neighbors[i]);
src/get_sector.c:	while (i < env->nb_sectors)
src/get_slope.c:	sector = env->sectors[index];
src/get_slope.c:	v1 = env->vertices[sector.vertices[0]];
src/get_slope.c:	v2 = env->vertices[sector.vertices[1]];
src/get_slope.c:	v0 = env->vertices[sector.vertices[0]];
src/get_slope.c:	v1 = env->vertices[sector.vertices[1]];
src/get_slope.c:	vi = env->vertices[sector.vertices[vertex_nb]];
src/get_slope.c:	v0 = env->vertices[sector.vertices[0]];
src/get_slope.c:	v0 = env->vertices[sector.vertices[0]];
src/get_slope.c:	while (i < env->nb_sectors)
src/get_slope.c:		ft_printf("sector %d normal = [%f,%f]\n", i, env->sectors[i].normal.x, env->sectors[i].normal.y);
src/get_slope.c:		ft_printf("floor = %f\nceiling = %f\n", env->sectors[i].floor, env->sectors[i].ceiling);
src/get_slope.c:		ft_printf("floor_slope = %f\nceiling_slope = %f\n", env->sectors[i].floor_slope, env->sectors[i].ceiling_slope);
src/get_slope.c:		while (j < env->sectors[i].nb_vertices)
src/get_slope.c:			printf("vertex %d floor = %f ceiling = %f\n", j, env->sectors[i].floors[j], env->sectors[i].ceilings[j]);
src/get_slope.c:	if (sector->num < 0 || sector->num > env->nb_sectors)
src/get_slope.c:		v1 = env->vertices[sector->vertices[i]];
src/get_slope.c:				pow(env->vertices[sector->vertices[i + 1]].x
src/get_slope.c:					- env->vertices[sector->vertices[i]].x, 2)
src/get_slope.c:				+ pow(env->vertices[sector->vertices[i + 1]].y
src/get_slope.c:					- env->vertices[sector->vertices[i]].y, 2));
src/get_slope.c:	while (i < env->nb_sectors)
src/get_slope.c:		env->sectors[i].normal = get_sector_normal(env->sectors[i], env);
src/get_slope.c:		update_sector_slope(env, &env->sectors[i]);
src/gravity.c:	pos.x = env->player.pos.x;
src/gravity.c:	pos.y = env->player.pos.y;
src/gravity.c:	slope = get_floor_at_pos(env->sectors[env->player.highest_sect], pos, env);
src/gravity.c:	env->gravity.force = env->sectors[env->player.highest_sect].gravity;
src/gravity.c:	if ((!env->player.state.fall
src/gravity.c:	&& env->player.pos.z > slope + 2)
src/gravity.c:	|| (env->player.state.jump && !env->player.state.fall && !env->player.state.fly))
src/gravity.c:		env->player.state.walk = 0;
src/gravity.c:		env->time.last_fall = SDL_GetTicks() / 1000.0;
src/gravity.c:		env->player.state.fall = 1;
src/gravity.c:		env->player.start_pos = env->player.pos.z;
src/gravity.c:		env->player.velocity_start = env->gravity.velocity;
src/gravity.c:	if (env->player.state.fall)
src/gravity.c:		env->time.d_time = time - env->time.last_fall;
src/gravity.c:		env->gravity.acceleration = env->gravity.force * 3.3;
src/gravity.c:		new_pos = env->player.start_pos +  (env->gravity.velocity * env->time.d_time)
src/gravity.c:			+ env->gravity.acceleration * env->time.d_time * env->time.d_time * 0.5;
src/gravity.c:		new_velocity = env->player.velocity_start + env->gravity.acceleration * env->time.d_time;
src/gravity.c:		env->gravity.velocity = new_velocity;
src/gravity.c:		if (new_pos + env->player.eyesight > get_ceiling_at_pos(env->sectors[env->player.sector], pos, env) - 1)
src/gravity.c:			new_pos = get_ceiling_at_pos(env->sectors[env->player.sector], pos, env) - 1 - env->player.eyesight;
src/gravity.c:			env->time.d_time = 0;
src/gravity.c:			env->gravity.velocity = 0;
src/gravity.c:			env->player.velocity_start = 0;
src/gravity.c:			env->gravity.acceleration = 0;
src/gravity.c:			env->player.state.jump = 0;
src/gravity.c:			env->player.start_pos = env->player.pos.z;
src/gravity.c:			env->time.last_fall = SDL_GetTicks() / 1000.0;
src/gravity.c:		env->player.pos.z = new_pos;
src/gravity.c:	if (env->player.pos.z < slope && env->player.state.fall && env->time.d_time)
src/gravity.c:		env->player.pos.z = slope;
src/gravity.c:		env->gravity.velocity = 0;
src/gravity.c:		env->gravity.acceleration = 0;
src/gravity.c:		env->player.state.jump = 0;
src/gravity.c:		env->time.d_time = 0;
src/gravity.c:		env->player.state.fall = 0;
src/gravity.c:	env->player.head_z = env->player.pos.z + env->player.eyesight;
src/grid_tools.c:	while (x < env->w)
src/grid_tools.c:		env->sdl.texture_pixels[x + y * env->w] = 0xFF888888;
src/grid_tools.c:	while (y < env->h)
src/grid_tools.c:		env->sdl.texture_pixels[x + y * env->w] = 0xFF888888;
src/grid_tools.c:	i = env->editor.center.y;
src/grid_tools.c:		i += env->editor.scale;
src/grid_tools.c:	while (i < env->h)
src/grid_tools.c:		i += env->editor.scale;
src/grid_tools.c:	i = env->editor.center.y - env->editor.scale;
src/grid_tools.c:	while (i >= env->h)
src/grid_tools.c:		i -= env->editor.scale;
src/grid_tools.c:		i -= env->editor.scale;
src/grid_tools.c:	i = env->editor.center.x;
src/grid_tools.c:		i += env->editor.scale;
src/grid_tools.c:	while (i < env->w)
src/grid_tools.c:		i += env->editor.scale;
src/grid_tools.c:	i = env->editor.center.x - env->editor.scale;
src/grid_tools.c:	while (i >= env->w)
src/grid_tools.c:		i -= env->editor.scale;
src/grid_tools.c:		i -= env->editor.scale;
src/init_add_buttons.c:	env->editor.next_sprite = new_next_button(WHEN_DOWN, &change_sprite, env, env);
src/init_add_buttons.c:	env->editor.next_sprite_env.env = env;
src/init_add_buttons.c:	env->editor.next_sprite.pos = new_point(350, 470);
src/init_add_buttons.c:	env->editor.next_sprite_env.button_type = NEXT;
src/init_add_buttons.c:	env->editor.previous_sprite = new_previous_button(WHEN_DOWN, &change_sprite, env, env);
src/init_add_buttons.c:	env->editor.previous_sprite_env.button_type = PREVIOUS;
src/init_add_buttons.c:	env->editor.previous_sprite_env.env = env;
src/init_add_buttons.c:	env->editor.previous_sprite.pos	 = new_point(30, 470);
src/init_add_buttons.c:	env->editor.add_object = new_image_button(WHEN_DOWN, &add_object_button, env, env);
src/init_add_buttons.c:	env->editor.add_object.img_up = env->ui_textures[12].surface;
src/init_add_buttons.c:	env->editor.add_object.img_pressed = env->ui_textures[13].surface;
src/init_add_buttons.c:	env->editor.add_object.img_down = env->ui_textures[13].surface;
src/init_add_buttons.c:	env->editor.add_object.img_hover = env->ui_textures[14].surface;
src/init_add_buttons.c:	env->editor.add_object.size_up = new_point(64, 64);
src/init_add_buttons.c:	env->editor.add_object.size_down = new_point(64, 64);
src/init_add_buttons.c:    env->editor.add_object.size_hover = new_point(64, 64);
src/init_add_buttons.c:    env->editor.add_object.size_pressed = new_point(64, 64);	
src/init_add_buttons.c:    env->editor.add_object.pos = new_point(102, 152);
src/init_add_buttons.c:	env->editor.add_enemy = new_image_button(WHEN_DOWN, &add_enemy_button, env, env);
src/init_add_buttons.c:	env->editor.add_enemy.img_up = env->ui_textures[12].surface;
src/init_add_buttons.c:	env->editor.add_enemy.img_pressed = env->ui_textures[13].surface;
src/init_add_buttons.c:	env->editor.add_enemy.img_down = env->ui_textures[13].surface;
src/init_add_buttons.c:	env->editor.add_enemy.img_hover = env->ui_textures[14].surface;
src/init_add_buttons.c:	env->editor.add_enemy.size_up = new_point(64, 64);
src/init_add_buttons.c:	env->editor.add_enemy.size_down = new_point(64, 64);
src/init_add_buttons.c:    env->editor.add_enemy.size_hover = new_point(64, 64);
src/init_add_buttons.c:    env->editor.add_enemy.size_pressed = new_point(64, 64);	
src/init_add_buttons.c:    env->editor.add_enemy.pos = new_point(102, 252);
src/init_animations.c:	env->time.start = 0;
src/init_animations.c:	env->time.end = 0;
src/init_animations.c:	env->jump.start = 0;
src/init_animations.c:	env->jump.nb_frame = 15;
src/init_animations.c:	env->jump.end = 300;
src/init_animations.c:	env->crouch.on_going = 0;
src/init_animations.c:	env->crouch.start = 0;
src/init_animations.c:	env->crouch.end = 150;
src/init_animations.c:	env->crouch.nb_frame = 6;
src/init_animations.c:	env->crouch.tick = env->crouch.end / env->crouch.nb_frame;
src/init_animations.c:	env->shot.on_going = 0;
src/init_animations.c:	env->shot.start = 0;
src/init_animations.c:	env->player_hurt.start = 0;
src/init_animations.c:	env->weapon_change.on_going = 0;
src/init_animations.c:	env->weapon_change.start = 0;
src/init_animations.c:	while (i < env->nb_enemies)
src/init_animations.c:		env->enemies[i].death.start = 0;
src/init_animations.c:		env->enemies[i].rest.start = 0;
src/init_animations.c:		env->enemies[i].hurt.start = 0;
src/init_animations.c:		env->enemies[i].pursue.start = 0;
src/init_animations.c:		env->enemies[i].rand_dir.start = 0;
src/init_animations.c:		env->enemies[i].fire.start = 0;
src/init_animations.c:	while (i < env->nb_objects)
src/init_animations.c:		env->objects[i].rest.start = 0;
src/init_animations.c:		env->objects[i].death.start = 0;
src/init_editor_data.c:	env->editor.scale = 10;
src/init_editor_data.c:	env->editor.current_vertices = NULL;
src/init_editor_data.c:	env->editor.start_vertex = -1;
src/init_editor_data.c:	env->player.sector = -1;
src/init_editor_data.c:	env->editor.selected_sector = -1;
src/init_editor_data.c:	env->editor.selected_object = -1;
src/init_editor_data.c:	env->editor.selected_vertex = -1;
src/init_editor_data.c:	env->editor.selected_player = -1;
src/init_editor_data.c:	env->editor.selected_wall = -1;
src/init_editor_data.c:	env->editor.selected_wall_sprite = -1;
src/init_editor_data.c:	env->editor.dragged_object = -1;
src/init_editor_data.c:	env->editor.dragged_vertex = -1;
src/init_editor_data.c:	env->editor.dragged_player = -1;
src/init_editor_data.c:	env->editor.dragged_enemy = -1;
src/init_editor_data.c:	env->selected_wall1 = -1;
src/init_editor_data.c:	env->selected_wall2 = -1;
src/init_editor_data.c:	env->selected_floor = -1;
src/init_editor_data.c:	env->selected_floor_sprite = -1;
src/init_editor_data.c:	env->selected_ceiling = -1;
src/init_editor_data.c:	env->selected_floor_sprite = -1;
src/init_editor_data.c:	env->selected_ceiling_sprite = -1;
src/init_editor_data.c:	env->selected_wall_sprite_sprite = -1;
src/init_editor_data.c:	env->selected_wall_sprite_wall = -1;
src/init_editor_data.c:	env->hovered_wall_sprite_sprite = -1;
src/init_editor_data.c:	env->hovered_wall_sprite_wall = -1;
src/init_editor_data.c:	env->hovered_wall_sprite_sector = -1;
src/init_editor_data.c:	env->selected_enemy = -1;
src/init_editor_data.c:	env->selected_object = -1;
src/init_editor_data.c:	env->editor.current_texture = 7;
src/init_editor_data.c:	env->editor.current_enemy = 0;
src/init_editor_data.c:	env->editor.current_sprite = 0;
src/init_editor_data.c:	env->editor.selection_tab = 0;
src/init_editor_tab_buttons.c:	new_input_var(&env->input_box, button->pos, button->type, button->target);
src/init_event_links_types.c:	env->event_links_types[GLOBAL] = "Global event";
src/init_event_links_types.c:	env->event_links_types[PRESS] = "press event";
src/init_event_links_types.c:	env->event_links_types[SHOOT] = "shoot event";
src/init_event_links_types.c:	env->event_links_types[STAND] = "stand event";
src/init_event_links_types.c:	env->event_links_types[WALK_IN] = "walk in event";
src/init_event_links_types.c:	env->event_links_types[WALK_OUT] = "walk out event";
src/init_event_links_types.c:	env->event_links_types[DEATH] = "death event";
src/init_event_links_types.c:	env->print_link_target_data[GLOBAL] = &print_global_link_target;
src/init_event_links_types.c:	env->print_link_target_data[PRESS] = &print_wall_sprite_link_target;
src/init_event_links_types.c:	env->print_link_target_data[SHOOT] = &print_wall_sprite_link_target;
src/init_event_links_types.c:	env->print_link_target_data[STAND] = &print_sector_link_target;
src/init_event_links_types.c:	env->print_link_target_data[WALK_IN] = &print_sector_link_target;
src/init_event_links_types.c:	env->print_link_target_data[WALK_OUT] = &print_sector_link_target;
src/init_event_links_types.c:	env->print_link_target_data[DEATH] = &print_enemy_link_target;
src/init_event_types.c:	env->event_types[PLAYER_SPEED] = "Player speed";
src/init_event_types.c:	env->event_types[PLAYER_INVINCIBLE] = "Invincible mode";
src/init_event_types.c:	env->event_types[PLAYER_INFINITE_AMMO] = "Infinite ammo mode";
src/init_event_types.c:	env->event_types[PLAYER_SECTOR] = "Player sector";
src/init_event_types.c:	env->event_types[WEAPON_DAMAGE] = "damage";
src/init_event_types.c:	env->event_types[WEAPON_RANGE] = "range";
src/init_event_types.c:	env->event_types[ENEMY_SPRITE] = "sprite";
src/init_event_types.c:	env->event_types[ENEMY_SCALE] = "scale";
src/init_event_types.c:	env->event_types[ENEMY_DAMAGE] = "damage";
src/init_event_types.c:	env->event_types[ENEMY_HP] = "HP";
src/init_event_types.c:	env->event_types[ENEMY_SPEED] = "speed";
src/init_event_types.c:	env->event_types[ENEMY_X] = "X";
src/init_event_types.c:	env->event_types[ENEMY_Y] = "Y";
src/init_event_types.c:	env->event_types[ENEMY_Z] = "Z";
src/init_event_types.c:	env->event_types[OBJECT_SPRITE] = "sprite";
src/init_event_types.c:	env->event_types[OBJECT_SCALE] = "scale";
src/init_event_types.c:	env->event_types[OBJECT_DAMAGE] = "damage";
src/init_event_types.c:	env->event_types[OBJECT_HP] = "HP";
src/init_event_types.c:	env->event_types[OBJECT_X] = "X";
src/init_event_types.c:	env->event_types[OBJECT_Y] = "Y";
src/init_event_types.c:	env->event_types[OBJECT_Z] = "Z";
src/init_event_types.c:	env->event_types[END_OF_EVENT] = "End of event";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_SPRITES_SPRITE] = "sprite";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_SPRITES_POS_X] = "pos X";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_SPRITES_POS_Y] = "pos Y";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_SPRITES_SCALE_X] = "scale X";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_SPRITES_SCALE_Y] = "scale Y";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_SPRITES_SPRITE] = "sprite";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_SPRITES_POS_X] = "pos X";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_SPRITES_POS_Y] = "pos Y";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_SPRITES_SCALE_X] = "scale X";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_SPRITES_SCALE_Y] = "scale Y";
src/init_event_types.c:	env->event_types[SECTOR_BRIGHTNESS] = " light brightness";
src/init_event_types.c:	env->event_types[SECTOR_LIGHT_COLOR] = "light color";
src/init_event_types.c:	env->event_types[SECTOR_INTENSITY] = "light intensity";
src/init_event_types.c:	env->event_types[SECTOR_GRAVITY] = "gravity";
src/init_event_types.c:	env->event_types[VERTEX_X] = "X";
src/init_event_types.c:	env->event_types[VERTEX_Y] = "Y";
src/init_event_types.c:	env->event_types[PLAYER_X] = "Player X";
src/init_event_types.c:	env->event_types[PLAYER_Y] = "Player Y";
src/init_event_types.c:	env->event_types[PLAYER_Z] = "Player Z";
src/init_event_types.c:	env->event_types[PLAYER_HP] = "Player HP";
src/init_event_types.c:	env->event_types[PLAYER_ARMOR] = "Player armor";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_HEIGHT] = "floor height";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_SLOPE] = "floor slope";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_TEXTURE] = "floor texture";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_ALIGN_X] = "floor texture align X";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_ALIGN_Y] = "floor texture align Y";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_SCALE_X] = "floor texture scale X";
src/init_event_types.c:	env->event_types[SECTOR_FLOOR_SCALE_Y] = "floor texture scale Y";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_HEIGHT] = "ceiling height";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_SLOPE] = "ceiling slope";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_TEXTURE] = "ceiling texture";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_ALIGN_X] = "ceiling texture align X";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_ALIGN_Y] = "ceiling texture align Y";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_SCALE_X] = "ceiling texture scale X";
src/init_event_types.c:	env->event_types[SECTOR_CEILING_SCALE_Y] = "ceiling texture scale Y";
src/init_event_types.c:	env->event_types[SECTOR_WALL_TEXTURE] = "texture";
src/init_event_types.c:	env->event_types[SECTOR_WALL_ALIGN_X] = "texture align X";
src/init_event_types.c:	env->event_types[SECTOR_WALL_ALIGN_Y] = "texture align Y";
src/init_event_types.c:	env->event_types[SECTOR_WALL_SCALE_X] = "texture scale X";
src/init_event_types.c:	env->event_types[SECTOR_WALL_SCALE_Y] = "texture scale Y";
src/init_event_types.c:	env->event_types[SECTOR_WALL_PORTAL] = "portal";
src/init_event_types.c:	env->event_types[SECTOR_WALL_SPRITES_SPRITE] = "sprite";
src/init_event_types.c:	env->event_types[SECTOR_WALL_SPRITES_POS_X] = "pos X";
src/init_event_types.c:	env->event_types[SECTOR_WALL_SPRITES_POS_Y] = "pos Y";
src/init_event_types.c:	env->event_types[SECTOR_WALL_SPRITES_SCALE_X] = "scale X";
src/init_event_types.c:	env->event_types[SECTOR_WALL_SPRITES_SCALE_Y] = "scale Y";
src/init_events_map.c:		env->nb_global_events = 5;
src/init_events_map.c:		env->global_events =
src/init_events_map.c:		(t_event*)ft_memalloc(sizeof(t_event) * env->nb_global_events);
src/init_events_map.c:		env->global_events[0] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[2].intensity, 50, 0);
src/init_events_map.c:		env->global_events[0].delay = 1000;
src/init_events_map.c:		env->global_events[1] =
src/init_events_map.c:		new_fixed_event(UINT32, &env->sectors[2].light_color, 0xFFFF0000, 0);
src/init_events_map.c:		env->global_events[1].delay = 1000;
src/init_events_map.c:		env->global_events[1].nb_launch_conditions = 1;
src/init_events_map.c:		env->global_events[1].launch_conditions =
src/init_events_map.c:		* env->global_events[1].nb_launch_conditions);
src/init_events_map.c:		env->global_events[1].launch_conditions[0].target =
src/init_events_map.c:		&env->global_events[4];
src/init_events_map.c:		env->global_events[1].launch_conditions[0].type = EVENT_ENDED_START;
src/init_events_map.c:		env->global_events[2] =
src/init_events_map.c:		new_fixed_event(UINT32, &env->sectors[2].light_color, 0xFF0000FF, 0);
src/init_events_map.c:		env->global_events[2].delay = 1000;
src/init_events_map.c:		env->global_events[2].nb_launch_conditions = 1;
src/init_events_map.c:		env->global_events[2].launch_conditions =
src/init_events_map.c:		* env->global_events[2].nb_launch_conditions);
src/init_events_map.c:		env->global_events[2].launch_conditions[0].target =
src/init_events_map.c:		&env->global_events[1];
src/init_events_map.c:		env->global_events[2].launch_conditions[0].type = EVENT_ENDED;
src/init_events_map.c:		env->global_events[3] =
src/init_events_map.c:		new_fixed_event(UINT32, &env->sectors[2].light_color, 0xFF00FF00, 0);
src/init_events_map.c:		env->global_events[3].delay = 1000;
src/init_events_map.c:		env->global_events[3].nb_launch_conditions = 1;
src/init_events_map.c:		env->global_events[3].launch_conditions =
src/init_events_map.c:		* env->global_events[3].nb_launch_conditions);
src/init_events_map.c:		env->global_events[3].launch_conditions[0].target =
src/init_events_map.c:		&env->global_events[2];
src/init_events_map.c:		env->global_events[3].launch_conditions[0].type = EVENT_ENDED;
src/init_events_map.c:		env->global_events[4] =
src/init_events_map.c:		new_fixed_event(UINT32, &env->sectors[2].light_color, 0xFFFFFF00, 0);
src/init_events_map.c:		env->global_events[4].delay = 1000;
src/init_events_map.c:		env->global_events[4].nb_launch_conditions = 1;
src/init_events_map.c:		env->global_events[4].launch_conditions =
src/init_events_map.c:		* env->global_events[4].nb_launch_conditions);
src/init_events_map.c:		env->global_events[4].launch_conditions[0].target =
src/init_events_map.c:		&env->global_events[3];
src/init_events_map.c:		env->global_events[4].launch_conditions[0].type = EVENT_ENDED;
src/init_events_map.c:		env->sectors[1].nb_walk_in_events = 2;
src/init_events_map.c:		env->sectors[1].walk_in_events =
src/init_events_map.c:		(t_event*)ft_memalloc(sizeof(t_event) * env->sectors[1].nb_walk_in_events);
src/init_events_map.c:		env->sectors[1].walk_in_events[0] = new_fixed_event(DOUBLE,
src/init_events_map.c:		&env->sectors[1].floor, 10, 500);
src/init_events_map.c:		env->sectors[1].walk_in_events[0].update_func = &update_sector_event;
src/init_events_map.c:		env->sectors[1].walk_in_events[0].update_param.num = 1;
src/init_events_map.c:		env->sectors[1].walk_in_events[1] = new_fixed_event(DOUBLE,
src/init_events_map.c:		&env->sectors[1].floor, 0, 500);
src/init_events_map.c:		env->sectors[1].walk_in_events[1].update_func = &update_sector_event;
src/init_events_map.c:		env->sectors[1].walk_in_events[1].update_param.num = 1;
src/init_events_map.c:		env->sectors[4].nb_stand_events = 3;
src/init_events_map.c:		env->sectors[4].stand_events =
src/init_events_map.c:		(t_event*)ft_memalloc(sizeof(t_event) * env->sectors[4].nb_stand_events);
src/init_events_map.c:		env->sectors[4].stand_events[0] = new_incr_event(DOUBLE,
src/init_events_map.c:		&env->sectors[4].floor, -0.45, 500);
src/init_events_map.c:		env->sectors[4].stand_events[0].update_func = &update_sector_event;
src/init_events_map.c:		env->sectors[4].stand_events[0].update_param.num = 4;
src/init_events_map.c:		/*env->sectors[4].stand_events[0].check_func = &check_equ_value_event;
src/init_events_map.c:		env->sectors[4].stand_events[0].check_param.target = &env->player.sector;
src/init_events_map.c:		env->sectors[4].stand_events[0].check_param.target_type = INT;
src/init_events_map.c:		env->sectors[4].stand_events[0].check_param.equ_value = 4;*/
src/init_events_map.c:		env->sectors[4].stand_events[0].nb_exec_conditions = 2;
src/init_events_map.c:		env->sectors[4].stand_events[0].exec_conditions =
src/init_events_map.c:		* env->sectors[4].stand_events[0].nb_exec_conditions);
src/init_events_map.c:		env->sectors[4].stand_events[0].exec_conditions[0].target =
src/init_events_map.c:		&env->sectors[4].floor;
src/init_events_map.c:		env->sectors[4].stand_events[0].exec_conditions[0].type =
src/init_events_map.c:		env->sectors[4].stand_events[0].exec_conditions[0].target_type =
src/init_events_map.c:		env->sectors[4].stand_events[0].exec_conditions[0].value = 10;
src/init_events_map.c:		env->sectors[4].stand_events[0].exec_conditions[1].target =
src/init_events_map.c:		&env->player.sector;
src/init_events_map.c:		env->sectors[4].stand_events[0].exec_conditions[1].type =
src/init_events_map.c:		env->sectors[4].stand_events[0].exec_conditions[1].target_type =
src/init_events_map.c:		env->sectors[4].stand_events[0].exec_conditions[1].value = 4;
src/init_events_map.c:		env->sectors[4].stand_events[1] = new_incr_event(DOUBLE,
src/init_events_map.c:		&env->sectors[7].floor, -10.0, 1000);
src/init_events_map.c:		/*env->sectors[4].stand_events[1].check_func = &check_equ_value_event;
src/init_events_map.c:		env->sectors[4].stand_events[1].check_param.target = &env->player.sector;
src/init_events_map.c:		env->sectors[4].stand_events[1].check_param.equ_value = 4;*/
src/init_events_map.c:		env->sectors[4].stand_events[1].nb_exec_conditions = 2;
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions =
src/init_events_map.c:		* env->sectors[4].stand_events[1].nb_exec_conditions);
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions[0].target =
src/init_events_map.c:		&env->sectors[7].floor;
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions[0].type =
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions[0].target_type =
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions[0].value = 10;
src/init_events_map.c:		env->sectors[4].stand_events[1].update_func = &update_sector_event;
src/init_events_map.c:		env->sectors[4].stand_events[1].update_param.num = 7;
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions[1].target =
src/init_events_map.c:		&env->player.sector;
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions[1].type =
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions[1].target_type =
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions[1].value = 4;
src/init_events_map.c:		env->sectors[4].stand_events[2] = new_incr_event(DOUBLE,
src/init_events_map.c:		&env->sectors[6].align[5].y, 10, 1000);
src/init_events_map.c:		env->sectors[4].stand_events[2].nb_exec_conditions = 2;
src/init_events_map.c:		env->sectors[4].stand_events[2].exec_conditions =
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions;
src/init_events_map.c:		/*env->sectors[4].stand_events[2].nb_exec_conditions = 2;
src/init_events_map.c:		env->sectors[4].stand_events[2].exec_conditions =
src/init_events_map.c:		env->sectors[4].stand_events[2].exec_conditions =
src/init_events_map.c:		* env->sectors[4].stand_events[2].nb_exec_conditions);
src/init_events_map.c:		env->sectors[4].stand_events[2].exec_conditions[0].target =
src/init_events_map.c:		&env->sectors[6].align[5].y;
src/init_events_map.c:		env->sectors[4].stand_events[2].exec_conditions[0].type =
src/init_events_map.c:		env->sectors[4].stand_events[2].exec_conditions[0].target_type =
src/init_events_map.c:		env->sectors[4].stand_events[2].exec_conditions[0].value = 10;
src/init_events_map.c:		env->sectors[4].stand_events[2].exec_conditions[1] =
src/init_events_map.c:		env->sectors[4].stand_events[1].exec_conditions[1];*/
src/init_events_map.c:		env->sectors[4].nb_walk_out_events = 3;
src/init_events_map.c:		env->sectors[4].walk_out_events =
src/init_events_map.c:		(t_event*)ft_memalloc(sizeof(t_event) * env->sectors[4].nb_walk_out_events);
src/init_events_map.c:		env->sectors[4].walk_out_events[0] = new_incr_event(DOUBLE,
src/init_events_map.c:		&env->sectors[4].floor, 0.45, 500);
src/init_events_map.c:		env->sectors[4].walk_out_events[0].update_func = &update_sector_event;
src/init_events_map.c:		env->sectors[4].walk_out_events[0].update_param.num = 4;
src/init_events_map.c:		env->sectors[4].walk_out_events[0].nb_exec_conditions = 2;
src/init_events_map.c:		env->sectors[4].walk_out_events[0].exec_conditions =
src/init_events_map.c:		* env->sectors[4].walk_out_events[0].nb_exec_conditions);
src/init_events_map.c:		env->sectors[4].walk_out_events[0].exec_conditions[0].target =
src/init_events_map.c:		&env->sectors[4].floor;
src/init_events_map.c:		env->sectors[4].walk_out_events[0].exec_conditions[0].type =
src/init_events_map.c:		env->sectors[4].walk_out_events[0].exec_conditions[0].target_type =
src/init_events_map.c:		env->sectors[4].walk_out_events[0].exec_conditions[0].value = 10.45;
src/init_events_map.c:		env->sectors[4].walk_out_events[0].exec_conditions[1].target =
src/init_events_map.c:		&env->player.sector;
src/init_events_map.c:		env->sectors[4].walk_out_events[0].exec_conditions[1].type =
src/init_events_map.c:		env->sectors[4].walk_out_events[0].exec_conditions[1].target_type =
src/init_events_map.c:		env->sectors[4].walk_out_events[0].exec_conditions[1].value = 4;
src/init_events_map.c:		env->sectors[4].walk_out_events[1] = new_incr_event(DOUBLE,
src/init_events_map.c:		&env->sectors[7].floor, 10, 1000);
src/init_events_map.c:		env->sectors[4].walk_out_events[1].update_func = &update_sector_event;
src/init_events_map.c:		env->sectors[4].walk_out_events[1].update_param.num = 7;
src/init_events_map.c:		env->sectors[4].walk_out_events[1].nb_exec_conditions = 2;
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions =
src/init_events_map.c:		* env->sectors[4].walk_out_events[1].nb_exec_conditions);
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions[0].target =
src/init_events_map.c:		&env->sectors[7].floor;
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions[0].type =
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions[0].target_type =
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions[0].value = 20;
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions[1].target =
src/init_events_map.c:		&env->player.sector;
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions[1].type =
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions[1].target_type =
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions[1].value = 4;
src/init_events_map.c:		env->sectors[4].walk_out_events[2] = new_incr_event(DOUBLE,
src/init_events_map.c:		&env->sectors[6].align[5].y, -10, 1000);
src/init_events_map.c:		env->sectors[4].walk_out_events[2].nb_exec_conditions = 2;
src/init_events_map.c:		env->sectors[4].walk_out_events[2].exec_conditions =
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions;
src/init_events_map.c:		/*env->sectors[4].walk_out_events[2].nb_exec_conditions = 2;
src/init_events_map.c:		env->sectors[4].walk_out_events[2].exec_conditions =
src/init_events_map.c:		* env->sectors[4].walk_out_events[2].nb_exec_conditions);
src/init_events_map.c:		env->sectors[4].walk_out_events[2].exec_conditions[0].target =
src/init_events_map.c:		&env->sectors[6].align[5].y;
src/init_events_map.c:		env->sectors[4].walk_out_events[2].exec_conditions[0].type =
src/init_events_map.c:		env->sectors[4].walk_out_events[2].exec_conditions[0].target_type =
src/init_events_map.c:		env->sectors[4].walk_out_events[2].exec_conditions[0].value = 10;
src/init_events_map.c:		env->sectors[4].walk_out_events[2].exec_conditions[1] =
src/init_events_map.c:		env->sectors[4].walk_out_events[1].exec_conditions[1];*/
src/init_events_map.c:		env->sectors[10].wall_sprites[1].nb_press_events[0] = 5;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0] =
src/init_events_map.c:		* env->sectors[10].wall_sprites[1].nb_press_events[0]);
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][0] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[10].wall_sprites[1].sprite[0],
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][1] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[10].wall_sprites[1].sprite[0],
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2] =
src/init_events_map.c:		new_fixed_event(DOUBLE, &env->sectors[15].wall_sprites[1].pos[0].x,
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][3] =
src/init_events_map.c:		new_fixed_event(DOUBLE, &env->sectors[18].wall_sprites[0].pos[0].x,
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][4] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[15].portals[1],
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].nb_launch_conditions = 2;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions =
src/init_events_map.c:		* env->sectors[10].wall_sprites[1].press_events[0][2].nb_launch_conditions);
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions[0].type = EQUALS;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions[0].target_type = INT;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions[0].target = &env->sectors[12].wall_sprites[1].sprite[0];
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions[0].value = 2;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions[1].type = EQUALS;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions[1].target_type = INT;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions[1].target = &env->sectors[17].wall_sprites[1].sprite[0];
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions[1].value = 2;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][3].nb_launch_conditions = 2;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][4].nb_launch_conditions = 2;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][3].launch_conditions =
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions;
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][4].launch_conditions =
src/init_events_map.c:		env->sectors[10].wall_sprites[1].press_events[0][2].launch_conditions;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].nb_press_events[0] = 5;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0] =
src/init_events_map.c:		* env->sectors[12].wall_sprites[1].nb_press_events[0]);
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][0] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[12].wall_sprites[1].sprite[0],
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][1] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[12].wall_sprites[1].sprite[0],
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2] =
src/init_events_map.c:		new_fixed_event(DOUBLE, &env->sectors[15].wall_sprites[1].pos[0].x,
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][3] =
src/init_events_map.c:		new_fixed_event(DOUBLE, &env->sectors[18].wall_sprites[0].pos[0].x,
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][4] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[15].portals[1],
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].nb_launch_conditions = 2;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions =
src/init_events_map.c:		* env->sectors[12].wall_sprites[1].press_events[0][2].nb_launch_conditions);
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions[0].type = EQUALS;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions[0].target_type = INT;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions[0].target = &env->sectors[10].wall_sprites[1].sprite[0];
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions[0].value = 2;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions[1].type = EQUALS;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions[1].target_type = INT;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions[1].target = &env->sectors[17].wall_sprites[1].sprite[0];
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions[1].value = 2;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][3].nb_launch_conditions = 2;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][4].nb_launch_conditions = 2;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][3].launch_conditions =
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions;
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][4].launch_conditions =
src/init_events_map.c:		env->sectors[12].wall_sprites[1].press_events[0][2].launch_conditions;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].nb_press_events[0] = 5;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0] =
src/init_events_map.c:		* env->sectors[17].wall_sprites[1].nb_press_events[0]);
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][0] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[17].wall_sprites[1].sprite[0],
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][1] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[17].wall_sprites[1].sprite[0],
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2] =
src/init_events_map.c:		new_fixed_event(DOUBLE, &env->sectors[15].wall_sprites[1].pos[0].x,
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][3] =
src/init_events_map.c:		new_fixed_event(DOUBLE, &env->sectors[18].wall_sprites[0].pos[0].x,
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][4] =
src/init_events_map.c:		new_fixed_event(INT, &env->sectors[15].portals[1],
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].nb_launch_conditions = 2;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions =
src/init_events_map.c:		* env->sectors[17].wall_sprites[1].press_events[0][2].nb_launch_conditions);
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions[0].type = EQUALS;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions[0].target_type = INT;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions[0].target = &env->sectors[10].wall_sprites[1].sprite[0];
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions[0].value = 2;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions[1].type = EQUALS;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions[1].target_type = INT;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions[1].target = &env->sectors[12].wall_sprites[1].sprite[0];
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions[1].value = 2;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][3].nb_launch_conditions = 2;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][4].nb_launch_conditions = 2;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][3].launch_conditions =
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions;
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][4].launch_conditions =
src/init_events_map.c:		env->sectors[17].wall_sprites[1].press_events[0][2].launch_conditions;
src/init_events_selection_buttons.c:	if (env->selected_wall_sprite_wall != -1)
src/init_events_selection_buttons.c:		env->editor.selected_events = env->editor.selected_events >= 1 ? 0 : 1;
src/init_events_selection_buttons.c:	else if (env->selected_floor != -1 || env->editor.selected_sector != -1)
src/init_events_selection_buttons.c:		env->editor.selected_events++;
src/init_events_selection_buttons.c:		if (env->editor.selected_events == 3)
src/init_events_selection_buttons.c:			env->editor.selected_events = 0;
src/init_events_selection_buttons.c:	env->editor.selected_event = 0;
src/init_events_selection_buttons.c:	env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:	env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:	if (env->selected_wall_sprite_wall != -1)
src/init_events_selection_buttons.c:		env->editor.selected_events = env->editor.selected_events >= 1 ? 0 : 1;
src/init_events_selection_buttons.c:	else if (env->selected_floor != -1 || env->editor.selected_sector != -1)
src/init_events_selection_buttons.c:		env->editor.selected_events--;
src/init_events_selection_buttons.c:		if (env->editor.selected_events < 0)
src/init_events_selection_buttons.c:			env->editor.selected_events = 2;
src/init_events_selection_buttons.c:	env->editor.selected_event = 0;
src/init_events_selection_buttons.c:	env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:	env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:	env->editor.selected_event++;
src/init_events_selection_buttons.c:	if (env->selected_wall_sprite_wall != -1)
src/init_events_selection_buttons.c:		if ((env->editor.selected_events == 0
src/init_events_selection_buttons.c:			&& env->editor.selected_event >= env->sectors[env->
src/init_events_selection_buttons.c:			editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:			.nb_press_events[env->selected_wall_sprite_sprite])
src/init_events_selection_buttons.c:			|| (env->editor.selected_events == 1
src/init_events_selection_buttons.c:			&& env->editor.selected_event >= env->sectors[env->
src/init_events_selection_buttons.c:			editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:			.nb_shoot_events[env->selected_wall_sprite_sprite]))
src/init_events_selection_buttons.c:			env->editor.selected_event = 0;
src/init_events_selection_buttons.c:	else if (env->selected_floor != -1 || env->editor.selected_sector != -1)
src/init_events_selection_buttons.c:		if ((env->editor.selected_events == 0
src/init_events_selection_buttons.c:			&& env->editor.selected_event >= env->sectors[env->
src/init_events_selection_buttons.c:			|| (env->editor.selected_events == 1
src/init_events_selection_buttons.c:			&& env->editor.selected_event >= env->sectors[env->
src/init_events_selection_buttons.c:			|| (env->editor.selected_events == 2
src/init_events_selection_buttons.c:			&& env->editor.selected_event >= env->sectors[env->
src/init_events_selection_buttons.c:			env->editor.selected_event = 0;
src/init_events_selection_buttons.c:	else if (env->selected_floor == -1 && env->editor.selected_sector == -1
src/init_events_selection_buttons.c:			&& env->editor.selected_event >= env->nb_global_events)
src/init_events_selection_buttons.c:		env->editor.selected_event = 0;
src/init_events_selection_buttons.c:	env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:	env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:	if (env->editor.selected_event > 0)
src/init_events_selection_buttons.c:		env->editor.selected_event--;
src/init_events_selection_buttons.c:		if (env->selected_wall_sprite_wall != -1)
src/init_events_selection_buttons.c:			if (env->editor.selected_events == 0)
src/init_events_selection_buttons.c:				env->editor.selected_event = env->sectors[env->
src/init_events_selection_buttons.c:					editor.selected_sector].wall_sprites[env->
src/init_events_selection_buttons.c:					selected_wall_sprite_wall].nb_press_events[env->
src/init_events_selection_buttons.c:			else if (env->editor.selected_events == 1)
src/init_events_selection_buttons.c:				env->editor.selected_event = env->sectors[env->
src/init_events_selection_buttons.c:					editor.selected_sector].wall_sprites[env->
src/init_events_selection_buttons.c:					selected_wall_sprite_wall].nb_shoot_events[env->
src/init_events_selection_buttons.c:		else if (env->selected_floor != -1 || env->editor.selected_sector != -1)
src/init_events_selection_buttons.c:			if (env->editor.selected_events == 0)
src/init_events_selection_buttons.c:				env->editor.selected_event = env->sectors[env->
src/init_events_selection_buttons.c:			else if (env->editor.selected_events == 1)
src/init_events_selection_buttons.c:				env->editor.selected_event = env->sectors[env->
src/init_events_selection_buttons.c:			else if (env->editor.selected_events == 2)
src/init_events_selection_buttons.c:				env->editor.selected_event = env->sectors[env->
src/init_events_selection_buttons.c:		else if (env->selected_floor == -1 && env->editor.selected_sector == -1)
src/init_events_selection_buttons.c:			env->editor.selected_event = env->nb_global_events - 1;
src/init_events_selection_buttons.c:	env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:	env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:	env->editor.selected_launch_condition++;
src/init_events_selection_buttons.c:	if (env->selected_wall_sprite_wall != -1)
src/init_events_selection_buttons.c:		if (env->editor.selected_events == 0
src/init_events_selection_buttons.c:		&& env->editor.selected_launch_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:		.press_events[env->selected_wall_sprite_sprite]
src/init_events_selection_buttons.c:		[env->editor.selected_event].nb_launch_conditions)
src/init_events_selection_buttons.c:			env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:		else if (env->editor.selected_events == 1
src/init_events_selection_buttons.c:		&& env->editor.selected_launch_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:		.shoot_events[env->selected_wall_sprite_sprite]
src/init_events_selection_buttons.c:		[env->editor.selected_event].nb_launch_conditions)
src/init_events_selection_buttons.c:			env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:	else if (env->selected_floor != -1 || env->editor.selected_sector != -1)
src/init_events_selection_buttons.c:		if (env->editor.selected_events == 0
src/init_events_selection_buttons.c:		&& env->editor.selected_launch_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].stand_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:		else if (env->editor.selected_events == 1
src/init_events_selection_buttons.c:		&& env->editor.selected_launch_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].walk_in_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:		else if (env->editor.selected_events == 2
src/init_events_selection_buttons.c:		&& env->editor.selected_launch_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].walk_out_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:	else if (env->selected_floor == -1 && env->editor.selected_sector == -1
src/init_events_selection_buttons.c:		&& env->editor.selected_launch_condition >=
src/init_events_selection_buttons.c:		env->global_events[env->editor.selected_event].nb_launch_conditions)
src/init_events_selection_buttons.c:		env->editor.selected_launch_condition = 0;
src/init_events_selection_buttons.c:	if (env->editor.selected_launch_condition > 0)
src/init_events_selection_buttons.c:		env->editor.selected_launch_condition--;
src/init_events_selection_buttons.c:		if (env->selected_wall_sprite_wall != -1)
src/init_events_selection_buttons.c:			if (env->editor.selected_events == 0)
src/init_events_selection_buttons.c:				env->editor.selected_launch_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:				.press_events[env->selected_wall_sprite_sprite]
src/init_events_selection_buttons.c:				[env->editor.selected_event].nb_launch_conditions - 1;
src/init_events_selection_buttons.c:			else if (env->editor.selected_events == 1)
src/init_events_selection_buttons.c:				env->editor.selected_launch_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:				.shoot_events[env->selected_wall_sprite_sprite]
src/init_events_selection_buttons.c:				[env->editor.selected_event].nb_launch_conditions - 1;
src/init_events_selection_buttons.c:		else if (env->selected_floor != -1 || env->editor.selected_sector != -1)
src/init_events_selection_buttons.c:			if (env->editor.selected_events == 0)
src/init_events_selection_buttons.c:				env->editor.selected_launch_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.stand_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			else if (env->editor.selected_events == 1)
src/init_events_selection_buttons.c:				env->editor.selected_launch_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.walk_in_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			else if (env->editor.selected_events == 2)
src/init_events_selection_buttons.c:				env->editor.selected_launch_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.walk_out_events[env->editor.selected_event]
src/init_events_selection_buttons.c:		else if (env->selected_floor == -1 && env->editor.selected_sector == -1)
src/init_events_selection_buttons.c:			env->editor.selected_launch_condition =
src/init_events_selection_buttons.c:			env->global_events[env->editor.selected_event].nb_launch_conditions - 1;
src/init_events_selection_buttons.c:	env->editor.selected_exec_condition++;
src/init_events_selection_buttons.c:	if (env->selected_wall_sprite_wall != -1)
src/init_events_selection_buttons.c:		if (env->editor.selected_events == 0
src/init_events_selection_buttons.c:		&& env->editor.selected_exec_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:		.press_events[env->selected_wall_sprite_sprite]
src/init_events_selection_buttons.c:		[env->editor.selected_event].nb_exec_conditions)
src/init_events_selection_buttons.c:			env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:		else if (env->editor.selected_events == 1
src/init_events_selection_buttons.c:		&& env->editor.selected_exec_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:		.shoot_events[env->selected_wall_sprite_sprite]
src/init_events_selection_buttons.c:		[env->editor.selected_event].nb_exec_conditions)
src/init_events_selection_buttons.c:			env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:	else if (env->selected_floor != -1 || env->editor.selected_sector != -1)
src/init_events_selection_buttons.c:		if (env->editor.selected_events == 0
src/init_events_selection_buttons.c:		&& env->editor.selected_exec_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].stand_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:		else if (env->editor.selected_events == 1
src/init_events_selection_buttons.c:		&& env->editor.selected_exec_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].walk_in_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:		else if (env->editor.selected_events == 2
src/init_events_selection_buttons.c:		&& env->editor.selected_exec_condition >= env->sectors[env->
src/init_events_selection_buttons.c:		editor.selected_sector].walk_out_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:	else if (env->selected_floor == -1 && env->editor.selected_sector == -1
src/init_events_selection_buttons.c:		&& env->editor.selected_exec_condition >=
src/init_events_selection_buttons.c:		env->global_events[env->editor.selected_event].nb_exec_conditions)
src/init_events_selection_buttons.c:		env->editor.selected_exec_condition = 0;
src/init_events_selection_buttons.c:	if (env->editor.selected_exec_condition > 0)
src/init_events_selection_buttons.c:		env->editor.selected_exec_condition--;
src/init_events_selection_buttons.c:		if (env->selected_wall_sprite_wall != -1)
src/init_events_selection_buttons.c:			if (env->editor.selected_events == 0)
src/init_events_selection_buttons.c:				env->editor.selected_exec_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:				.press_events[env->selected_wall_sprite_sprite]
src/init_events_selection_buttons.c:				[env->editor.selected_event].nb_exec_conditions - 1;
src/init_events_selection_buttons.c:			else if (env->editor.selected_events == 1)
src/init_events_selection_buttons.c:				env->editor.selected_exec_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.wall_sprites[env->selected_wall_sprite_wall]
src/init_events_selection_buttons.c:				.shoot_events[env->selected_wall_sprite_sprite]
src/init_events_selection_buttons.c:				[env->editor.selected_event].nb_exec_conditions - 1;
src/init_events_selection_buttons.c:		else if (env->selected_floor != -1 || env->editor.selected_sector != -1)
src/init_events_selection_buttons.c:			if (env->editor.selected_events == 0)
src/init_events_selection_buttons.c:				env->editor.selected_exec_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.stand_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			else if (env->editor.selected_events == 1)
src/init_events_selection_buttons.c:				env->editor.selected_exec_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.walk_in_events[env->editor.selected_event]
src/init_events_selection_buttons.c:			else if (env->editor.selected_events == 2)
src/init_events_selection_buttons.c:				env->editor.selected_exec_condition =
src/init_events_selection_buttons.c:				env->sectors[env->editor.selected_sector]
src/init_events_selection_buttons.c:				.walk_out_events[env->editor.selected_event]
src/init_events_selection_buttons.c:		else if (env->selected_floor == -1 && env->editor.selected_sector == -1)
src/init_events_selection_buttons.c:			env->editor.selected_exec_condition =
src/init_events_selection_buttons.c:			env->global_events[env->editor.selected_event].nb_exec_conditions - 1;
src/init_events_selection_buttons.c:	env->editor.next_events = new_next_button(ON_RELEASE,
src/init_events_selection_buttons.c:	env->editor.next_events.pos = new_point(290, 470);
src/init_events_selection_buttons.c:	env->editor.previous_events = new_previous_button(ON_RELEASE,
src/init_events_selection_buttons.c:	env->editor.previous_events.pos = new_point(90, 470);
src/init_events_selection_buttons.c:	env->editor.next_event = new_next_button(ON_RELEASE,
src/init_events_selection_buttons.c:	env->editor.next_event.pos = new_point(290, 500);
src/init_events_selection_buttons.c:	env->editor.previous_event = new_previous_button(ON_RELEASE,
src/init_events_selection_buttons.c:	env->editor.previous_event.pos = new_point(90, 500);
src/init_events_selection_buttons.c:	env->editor.next_launch_condition = new_next_button(ON_RELEASE,
src/init_events_selection_buttons.c:	env->editor.next_launch_condition.pos = new_point(290, 680);
src/init_events_selection_buttons.c:	env->editor.previous_launch_condition = new_previous_button(ON_RELEASE,
src/init_events_selection_buttons.c:	env->editor.previous_launch_condition.pos = new_point(90, 680);
src/init_events_selection_buttons.c:	env->editor.next_exec_condition = new_next_button(ON_RELEASE,
src/init_events_selection_buttons.c:	env->editor.next_exec_condition.pos = new_point(300, 800);
src/init_events_selection_buttons.c:	env->editor.previous_exec_condition = new_previous_button(ON_RELEASE,
src/init_events_selection_buttons.c:	env->editor.previous_exec_condition.pos = new_point(90, 800);
src/init_game.c:	while (i < env->nb_enemies)
src/init_game.c:		env->enemies[i].enemies_init_data.pos = env->enemies[i].pos;
src/init_game.c:		env->enemies[i].enemies_init_data.health = env->enemies[i].health;
src/init_game.c:		env->enemies[i].enemies_init_data.sector = env->enemies[i].sector;
src/init_game.c:		env->enemies[i].enemies_init_data.angle = env->enemies[i].angle;
src/init_game.c:		env->enemies[i].enemies_init_data.main_sprite = env->enemies[i].main_sprite;
src/init_game.c:	env->player.player_init_data.pos = env->player.pos;
src/init_game.c:	env->player.player_init_data.health = env->player.health;
src/init_game.c:	env->player.player_init_data.sector = env->player.sector;
src/init_game.c:	env->player.player_init_data.camera = env->player.camera;
src/init_game.c:	while (i < env->nb_objects)
src/init_game.c:		env->objects[i].object_init_data.main_sprite = env->objects[i].main_sprite;
src/init_game.c:		env->objects[i].object_init_data.pos = env->objects[i].pos;
src/init_game.c:		env->objects[i].object_init_data.sector = env->objects[i].sector;
src/init_game.c:		env->objects[i].object_init_data.angle = env->objects[i].angle;
src/init_game.c:	while (i < env->nb_enemies)
src/init_game.c:		if (env->enemies[i].exists)
src/init_game.c:			env->enemies[i].health = env->enemies[i].map_hp *
src/init_game.c:				env->difficulty;
src/init_hud_button.c:		env->editor.textures[i] = new_image_button(ON_RELEASE, &save_texture, new_button_target(env, i), env);
src/init_hud_button.c:		env->editor.textures[i].img_up = env->wall_textures[i].maps[6];
src/init_hud_button.c:		env->editor.textures[i].img_pressed = env->wall_textures[i].maps[6];
src/init_hud_button.c:		env->editor.textures[i].img_down = env->wall_textures[i].maps[6];
src/init_hud_button.c:		env->editor.textures[i].img_hover = env->wall_textures[i].maps[6];
src/init_hud_button.c:		env->editor.textures[i].size_up = new_point(64, 64);
src/init_hud_button.c:		env->editor.textures[i].size_down = new_point(64, 64);
src/init_hud_button.c:		env->editor.textures[i].size_hover = new_point(64, 64);
src/init_hud_button.c:		env->editor.textures[i].size_pressed = new_point(64, 64);
src/init_hud_button.c:		env->editor.textures[i].pos = new_point(60 + (64 * (i % mod)) + 5, 370 + 5 + (64 * (i / mod)));
src/init_hud_button.c:     	env->editor.current_texture_selection = new_image_button(ON_RELEASE, &save_texture, &env->editor.current_texture_selection, env);
src/init_hud_button.c:		env->editor.current_texture_selection.img_up = env->wall_textures[env->editor.current_texture].maps[6];
src/init_hud_button.c:		env->editor.current_texture_selection.img_pressed = env->wall_textures[env->editor.current_texture].maps[6];
src/init_hud_button.c:		env->editor.current_texture_selection.img_down = env->wall_textures[env->editor.current_texture].maps[6];
src/init_hud_button.c:		env->editor.current_texture_selection.img_hover = env->wall_textures[env->editor.current_texture].maps[6];
src/init_hud_button.c:		env->editor.current_texture_selection.size_up = new_point(64, 64);
src/init_hud_button.c:		env->editor.current_texture_selection.size_down = new_point(64, 64);
src/init_hud_button.c:		env->editor.current_texture_selection.size_hover = new_point(64, 64);
src/init_hud_button.c:		env->editor.current_texture_selection.size_pressed = new_point(64, 64);
src/init_hud_button.c:        env->editor.current_texture_selection.pos = new_point(13, 353);
src/init_hud_button.c:		env->editor.texture_background = new_background_button(ON_RELEASE, &nothing, &env->editor.texture_background, env);
src/init_hud_button.c:		env->editor.texture_background.pos = new_point(10, 350);
src/init_hud_button.c:		env->editor.enemy_tab[i].img_up = env->wall_textures[i].maps[6];
src/init_hud_button.c:		env->editor.enemy_tab[i] = new_image_button(ON_RELEASE, &save_enemy, new_button_target(env, i), env);
src/init_hud_button.c:		env->editor.enemy_tab[i].img_up = env->mini_enemies_textures[i].surface;
src/init_hud_button.c:		env->editor.enemy_tab[i].img_pressed = env->mini_enemies_textures[i].surface;
src/init_hud_button.c:		env->editor.enemy_tab[i].img_down = env->mini_enemies_textures[i].surface;
src/init_hud_button.c:		env->editor.enemy_tab[i].img_hover = env->mini_enemies_textures[i].surface;
src/init_hud_button.c:		env->editor.enemy_tab[i].size_up = new_point(64, 64);
src/init_hud_button.c:		env->editor.enemy_tab[i].size_down = new_point(64, 64);
src/init_hud_button.c:        env->editor.enemy_tab[i].size_hover = new_point(64, 64);
src/init_hud_button.c:        env->editor.enemy_tab[i].size_pressed = new_point(64, 64);
src/init_hud_button.c:		env->editor.enemy_tab[i].pos = new_point(50 + (64 * (i % mod)) + 5, 290 + 5 + (64 * (i / mod)));
src/init_hud_button.c:	env->editor.current_enemy_selection = new_image_button(ON_RELEASE, &open_enemy_selection, env, env);
src/init_hud_button.c:	env->editor.current_enemy_selection.img_up = env->mini_enemies_textures[env->editor.current_enemy].surface;
src/init_hud_button.c:	env->editor.current_enemy_selection.img_pressed = env->mini_enemies_textures[env->editor.current_enemy].surface;
src/init_hud_button.c:	env->editor.current_enemy_selection.img_down = env->mini_enemies_textures[env->editor.current_enemy].surface;
src/init_hud_button.c:	env->editor.current_enemy_selection.img_hover = env->mini_enemies_textures[env->editor.current_enemy].surface;
src/init_hud_button.c:	env->editor.current_enemy_selection.size_up = new_point(64, 64);
src/init_hud_button.c:	env->editor.current_enemy_selection.size_down = new_point(64, 64);
src/init_hud_button.c:    env->editor.current_enemy_selection.size_hover = new_point(64, 64);
src/init_hud_button.c:    env->editor.current_enemy_selection.size_pressed = new_point(64, 64);	
src/init_hud_button.c:    env->editor.current_enemy_selection.pos = new_point(13, 253);
src/init_hud_button.c:	env->editor.enemy_background = new_background_button(ON_RELEASE, &nothing, &env->editor.enemy_background, env);
src/init_hud_button.c:	env->editor.enemy_background.pos = new_point(10, 250);
src/init_hud_button.c:	env->editor.sector_tab = new_tab_button(WHEN_DOWN, &sector_tab, env, env);
src/init_hud_button.c:    env->editor.sector_tab.str = "Sector";
src/init_hud_button.c:    env->editor.sector_tab.pos = new_point(119,425);
src/init_hud_button.c:	env->editor.general_tab = new_tab_button(WHEN_DOWN, &general_tab, env, env);
src/init_hud_button.c:	env->editor.general_tab.str = "General";
src/init_hud_button.c:    env->editor.general_tab.pos = new_point(0,425);
src/init_hud_button.c:	env->editor.sprite_tab = new_tab_button(WHEN_DOWN, &sprite_tab, env, env);
src/init_hud_button.c:    env->editor.sprite_tab.str = "Sprites";
src/init_hud_button.c:    env->editor.sprite_tab.pos = new_point(238,425);
src/init_hud_button.c:	env->editor.events_tab = new_tab_button(WHEN_DOWN, &events_tab, env, env);
src/init_hud_button.c:    env->editor.events_tab.str = "Events";
src/init_hud_button.c:    env->editor.events_tab.pos = new_point(357,425);
src/init_hud_button_function.c:	env->editor.create_object = 1;
src/init_hud_button_function.c:	if (!env->editor.draw_object_tab)
src/init_hud_button_function.c:		env->editor.create_object = 1;
src/init_hud_button_function.c:		env->editor.add_object.state = UP;
src/init_hud_button_function.c:		env->editor.add_object.anim_state = REST;
src/init_hud_button_function.c:	if (!env->editor.draw_enemy_tab)
src/init_hud_button_function.c:		env->editor.create_enemy = 1;
src/init_hud_button_function.c:		env->editor.add_object.state = UP;
src/init_hud_button_function.c:		env->editor.add_object.anim_state = REST;
src/init_hud_button_function.c:	env->editor.draw_enemy_tab = 1;
src/init_hud_button_function.c:	env->editor.draw_sprite_tab = 1;
src/init_hud_button_function.c:	env->editor.current_texture = i;
src/init_hud_button_function.c:		env->editor.current_texture_selection.img_down = env->wall_textures[i].maps[6];
src/init_hud_button_function.c:		env->editor.current_texture_selection.img_pressed = env->wall_textures[i].maps[6];
src/init_hud_button_function.c:		env->editor.current_texture_selection.img_hover = env->wall_textures[i].maps[6];
src/init_hud_button_function.c:		env->editor.current_texture_selection.img_up = env->wall_textures[i].maps[6];
src/init_hud_button_function.c:		env->contains_skybox = 1;
src/init_hud_button_function.c:		env->editor.current_texture = i;
src/init_hud_button_function.c:		env->editor.current_texture_selection.img_down = env->mini_skyboxes[-i - 1].surface;
src/init_hud_button_function.c:		env->editor.current_texture_selection.img_pressed = env->mini_skyboxes[-i - 1].surface;
src/init_hud_button_function.c:		env->editor.current_texture_selection.img_hover = env->mini_skyboxes[-i - 1].surface;
src/init_hud_button_function.c:		env->editor.current_texture_selection.img_up = env->mini_skyboxes[-i - 1].surface;
src/init_hud_button_function.c:	if (env->editor.in_game)
src/init_hud_button_function.c:		if (env->selected_floor != -1)
src/init_hud_button_function.c:			env->sectors[env->selected_floor].floor_texture = i;
src/init_hud_button_function.c:		else if (env->selected_ceiling != -1)
src/init_hud_button_function.c:			env->sectors[env->selected_ceiling].ceiling_texture = i;
src/init_hud_button_function.c:		else if (env->editor.selected_wall != -1)
src/init_hud_button_function.c:			env->sectors[env->editor.selected_sector].
src/init_hud_button_function.c:			textures[env->editor.selected_wall] = i;
src/init_hud_button_function.c:	env->editor.current_texture_selection.state = UP;
src/init_hud_button_function.c:	env->editor.current_texture_selection.anim_state = REST;
src/init_hud_button_function.c:	env->editor.draw_selection_tab = 0;
src/init_hud_button_function.c:	env->editor.current_enemy = env->enemies_main_sprites[i];
src/init_hud_button_function.c:	env->editor.current_enemy_selection.img_down = env->mini_enemies_textures[i].surface;
src/init_hud_button_function.c:	env->editor.current_enemy_selection.img_pressed = env->mini_enemies_textures[i].surface;
src/init_hud_button_function.c:	env->editor.current_enemy_selection.img_hover = env->mini_enemies_textures[i].surface;
src/init_hud_button_function.c:	env->editor.current_enemy_selection.img_up = env->mini_enemies_textures[i].surface;
src/init_hud_button_function.c:	if (env->selected_enemy != -1)
src/init_hud_button_function.c:		env->enemies[env->selected_enemy].sprite = env->enemies_main_sprites[i];
src/init_hud_button_function.c:	env->editor.draw_enemy_tab = 0;
src/init_hud_button_function.c:	env->editor.current_enemy_selection.state = UP;
src/init_hud_button_function.c:	env->editor.current_enemy_selection.anim_state = REST;
src/init_hud_button_function.c:	env->editor.current_sprite = env->objects_main_sprites[i];
src/init_hud_button_function.c:	env->editor.current_sprite_selection.img_down = env->mini_objects_textures[i].surface;
src/init_hud_button_function.c:	env->editor.current_sprite_selection.img_pressed = env->mini_objects_textures[i].surface;
src/init_hud_button_function.c:	env->editor.current_sprite_selection.img_hover = env->mini_objects_textures[i].surface;
src/init_hud_button_function.c:	env->editor.current_sprite_selection.img_up = env->mini_objects_textures[i].surface;
src/init_hud_button_function.c:	if (env->selected_wall_sprite_sprite != -1)
src/init_hud_button_function.c:		sprite = env->sectors[env->editor.selected_sector].wall_sprites;
src/init_hud_button_function.c:		sprite[env->selected_wall_sprite_wall].sprite[env->selected_wall_sprite_sprite] = env->objects_main_sprites[i];
src/init_hud_button_function.c:	if (env->selected_ceiling_sprite != -1)
src/init_hud_button_function.c:		sprite = &env->sectors[env->selected_ceiling].ceiling_sprites;
src/init_hud_button_function.c:		sprite->sprite[env->selected_ceiling_sprite] = env->objects_main_sprites[i];
src/init_hud_button_function.c:		precompute_ceiling_sprite_scales(env->selected_ceiling,
src/init_hud_button_function.c:		env->selected_ceiling_sprite, env);
src/init_hud_button_function.c:	if (env->selected_floor_sprite != -1)
src/init_hud_button_function.c:		sprite = &env->sectors[env->selected_floor].floor_sprites;
src/init_hud_button_function.c:		sprite->sprite[env->selected_floor_sprite] = env->objects_main_sprites[i];
src/init_hud_button_function.c:		precompute_floor_sprite_scales(env->selected_floor,
src/init_hud_button_function.c:		env->selected_floor_sprite, env);
src/init_hud_button_function.c:	env->editor.draw_sprite_tab = 0;
src/init_hud_button_function.c:	env->editor.sprite_tab.state = UP;
src/init_hud_button_function.c:	env->editor.sprite_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.sector_tab.state = UP;
src/init_hud_button_function.c:	env->editor.sector_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.events_tab.state = UP;
src/init_hud_button_function.c:	env->editor.events_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.sprite_tab.state = UP;
src/init_hud_button_function.c:	env->editor.sprite_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.general_tab.state = UP;
src/init_hud_button_function.c:	env->editor.general_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.events_tab.state = UP;
src/init_hud_button_function.c:	env->editor.events_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.general_tab.state = UP;
src/init_hud_button_function.c:	env->editor.general_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.sector_tab.state = UP;
src/init_hud_button_function.c:	env->editor.sector_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.events_tab.state = UP;
src/init_hud_button_function.c:	env->editor.events_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.general_tab.state = UP;
src/init_hud_button_function.c:	env->editor.general_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.sector_tab.state = UP;
src/init_hud_button_function.c:	env->editor.sector_tab.anim_state = REST;
src/init_hud_button_function.c:	env->editor.sprite_tab.state = UP;
src/init_hud_button_function.c:	env->editor.sprite_tab.anim_state = REST;
src/init_keys.c:	env->keys.forward = SDLK_w;
src/init_keys.c:	env->keys.s = SDLK_s;
src/init_keys.c:	env->keys.e = SDLK_e;
src/init_keys.c:	env->keys.left = SDLK_a;
src/init_keys.c:	env->keys.right = SDLK_d;
src/init_keys.c:	env->keys.forward2 = SDLK_UP;
src/init_keys.c:	env->keys.backward2 = SDLK_DOWN;
src/init_keys.c:	env->keys.left2 = SDLK_LEFT;
src/init_keys.c:	env->keys.right2 = SDLK_RIGHT;
src/init_keys.c:	env->keys.plus = SDLK_KP_PLUS;
src/init_keys.c:	env->keys.minus = SDLK_KP_MINUS;
src/init_keys.c:	env->keys.shift = SDLK_LSHIFT;
src/init_keys.c:	env->keys.shift2 = SDLK_RSHIFT;
src/init_keys.c:	env->keys.ctrl = SDLK_LCTRL;
src/init_keys.c:	env->keys.space = SDLK_SPACE;
src/init_keys.c:	env->keys.up = SDLK_PAGEUP;
src/init_keys.c:	env->keys.down = SDLK_PAGEDOWN;
src/init_keys.c:	env->keys.option = SDLK_o;
src/init_keys.c:	env->keys.enter = SDLK_RETURN;
src/init_keys.c:	env->keys.backspace = SDLK_BACKSPACE;
src/init_keys.c:	env->keys.del = SDLK_DELETE;
src/init_keys.c:	env->keys.tab = SDLK_TAB;
src/init_keys.c:	env->keys.comma = SDLK_COMMA;
src/init_keys.c:	env->keys.period = SDLK_PERIOD;
src/init_keys.c:	env->keys.minus1 = SDLK_MINUS;
src/init_keys.c:	env->keys.equals = SDLK_EQUALS;
src/init_keys.c:	env->keys.p = SDLK_p;
src/init_keys.c:	env->keys.end = SDLK_END;
src/init_keys.c:	env->keys.home = SDLK_HOME;
src/init_keys.c:	env->keys.a = 'a';
src/init_keys.c:	env->keys.lgui = SDLK_LGUI;
src/init_obj_enemies_data.c:	while (i < env->nb_enemies)
src/init_obj_enemies_data.c:		env->enemies[i].hit = 0;
src/init_obj_enemies_data.c:		env->enemies[i].state = 0;
src/init_obj_enemies_data.c:		env->enemies[i].shot = 0;
src/init_obj_enemies_data.c:		env->enemies[i].exists = 1;
src/init_obj_enemies_data.c:		env->enemies[i].saw_player = 0;
src/init_obj_enemies_data.c:		if (env->enemies[i].sprite >= 0 && env->enemies[i].sprite < 5)
src/init_obj_enemies_data.c:			env->enemies[i].height_ratio = 2;
src/init_obj_enemies_data.c:			env->enemies[i].width_ratio = 0.5;
src/init_obj_enemies_data.c:			env->enemies[i].main_sprite = LOST_SOUL;
src/init_obj_enemies_data.c:			env->enemies[i].type = AERIAL;
src/init_obj_enemies_data.c:			env->enemies[i].behavior = MELEE_KAMIKAZE;
src/init_obj_enemies_data.c:			env->enemies[i].size_2d = env->enemies[i].scale * env->enemies[i].width_ratio;
src/init_obj_enemies_data.c:			env->enemies[i].eyesight = env->enemies[i].size_2d * env->enemies[i].height_ratio;
src/init_obj_enemies_data.c:			env->enemies[i].nb_rest_state = 2;
src/init_obj_enemies_data.c:			env->enemies[i].nb_pursuit_state = 2;
src/init_obj_enemies_data.c:			env->enemies[i].nb_firing_state = 0;
src/init_obj_enemies_data.c:		else if (env->enemies[i].sprite >= 5 && env->enemies[i].sprite < 10)
src/init_obj_enemies_data.c:			env->enemies[i].height_ratio = 2.5;
src/init_obj_enemies_data.c:			env->enemies[i].width_ratio = 0.375;
src/init_obj_enemies_data.c:			env->enemies[i].main_sprite = CYBER_DEMON;
src/init_obj_enemies_data.c:			env->enemies[i].firing_sprite = 10;
src/init_obj_enemies_data.c:			env->enemies[i].type = TERRESTRIAL;
src/init_obj_enemies_data.c:			env->enemies[i].behavior = RANGED_PROJECTILE;
src/init_obj_enemies_data.c:			env->enemies[i].size_2d =  env->enemies[i].scale * env->enemies[i].width_ratio;
src/init_obj_enemies_data.c:			env->enemies[i].eyesight = env->enemies[i].size_2d * env->enemies[i].height_ratio;
src/init_obj_enemies_data.c:			env->enemies[i].nb_rest_state = 4;
src/init_obj_enemies_data.c:			env->enemies[i].nb_pursuit_state = 4;
src/init_obj_enemies_data.c:			env->enemies[i].nb_firing_state = 3;
src/init_obj_enemies_data.c:		env->enemies[i].seen = 0;
src/init_obj_enemies_data.c:		env->enemies[i].dir = 0;
src/init_obj_enemies_data.c:		env->enemies[i].sector = get_sector_no_z(env, env->enemies[i].pos);
src/init_obj_enemies_data.c:		env->enemies[i].last_player_pos = env->enemies[i].pos;
src/init_obj_enemies_data.c:	while (i < env->nb_objects)
src/init_obj_enemies_data.c:		env->objects[i].exists = 1;
src/init_obj_enemies_data.c:		env->objects[i].size_2d = env->objects[i].scale;
src/init_obj_enemies_data.c:		env->objects[i].health = 1;
src/init_obj_enemies_data.c:		env->objects[i].explosion_size = 0;
src/init_obj_enemies_data.c:		env->objects[i].height = env->objects[i].height_ratio * env->objects[i].scale;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 0)
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 0.5;
src/init_obj_enemies_data.c:			env->objects[i].solid = 0;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = 0;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].type = WEAPON;
src/init_obj_enemies_data.c:			env->objects[i].ammo_type = ENERGY;
src/init_obj_enemies_data.c:			env->objects[i].weapon = RAYGUN;
src/init_obj_enemies_data.c:			env->objects[i].quantity = 15;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 2) // health pack
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 0.5;
src/init_obj_enemies_data.c:			env->objects[i].solid = 0;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = HEALTH_PACK;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].type = HEAL;
src/init_obj_enemies_data.c:			env->objects[i].quantity = 25;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 3) // shotgun ammo
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 0.5;
src/init_obj_enemies_data.c:			env->objects[i].solid = 0;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = SHELL_AMMO;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].type = AMMO;
src/init_obj_enemies_data.c:			env->objects[i].ammo_type = SHELL;
src/init_obj_enemies_data.c:			env->objects[i].quantity = 10;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 4) // rocket ammo
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 0.5;
src/init_obj_enemies_data.c:			env->objects[i].solid = 0;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = ROCKETS_AMMO;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].type = AMMO;
src/init_obj_enemies_data.c:			env->objects[i].ammo_type = ROCKET;
src/init_obj_enemies_data.c:			env->objects[i].quantity = 5;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 5) // regular ammo
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 0.5;
src/init_obj_enemies_data.c:			env->objects[i].solid = 0;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = REGULAR_AMMO;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].type = AMMO;
src/init_obj_enemies_data.c:			env->objects[i].ammo_type = REGULAR;
src/init_obj_enemies_data.c:			env->objects[i].quantity = 40;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 6) // energy cell pack
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 0.5;
src/init_obj_enemies_data.c:			env->objects[i].solid = 0;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = ENERGY_AMMO;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].type = AMMO;
src/init_obj_enemies_data.c:			env->objects[i].ammo_type = ENERGY;
src/init_obj_enemies_data.c:			env->objects[i].quantity = 20;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite >= 7 && env->objects[i].sprite <= 10) // lamp
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 4;
src/init_obj_enemies_data.c:			env->objects[i].solid = 1;
src/init_obj_enemies_data.c:			env->objects[i].size_2d = 2;
src/init_obj_enemies_data.c:			env->objects[i].height = 4.5;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = LAMP;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 4;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].type = DECORATION;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 11)
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 1;
src/init_obj_enemies_data.c:			env->objects[i].solid = 1;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = MONITOR_OFF;
src/init_obj_enemies_data.c:			env->objects[i].health = 40;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 1;
src/init_obj_enemies_data.c:			env->objects[i].type = DECORATION;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite >= 12 && env->objects[i].sprite <= 15) // monitor
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 1;
src/init_obj_enemies_data.c:			env->objects[i].solid = 1;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = MONITOR_ON;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 4;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 1;
src/init_obj_enemies_data.c:			env->objects[i].type = DECORATION;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 16)
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 1;
src/init_obj_enemies_data.c:			env->objects[i].solid = 1;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = MONITOR_ON;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].type = DECORATION;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 17) // green armor
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 0.5;
src/init_obj_enemies_data.c:			env->objects[i].solid = 0;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = GREEN_ARMOR;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].type = ARMOR;
src/init_obj_enemies_data.c:			env->objects[i].quantity = 50;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 18 || env->objects[i].sprite == 19) // candle
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 1;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = CANDLE;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 0;
src/init_obj_enemies_data.c:			env->objects[i].solid = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 1;
src/init_obj_enemies_data.c:			env->objects[i].type = DECORATION;
src/init_obj_enemies_data.c:			env->objects[i].damage = 0;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 20) // barrel
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 1.75;
src/init_obj_enemies_data.c:			env->objects[i].solid = 1;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = BARREL;
src/init_obj_enemies_data.c:			env->objects[i].health = 20;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 1;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 1;
src/init_obj_enemies_data.c:			env->objects[i].explosion_size = env->objects[i].scale;
src/init_obj_enemies_data.c:			env->objects[i].type = DECORATION;
src/init_obj_enemies_data.c:			env->objects[i].damage = 50;
src/init_obj_enemies_data.c:		if (env->objects[i].sprite == 21) // barrel exploding
src/init_obj_enemies_data.c:			env->objects[i].height_ratio = 1.75;
src/init_obj_enemies_data.c:			env->objects[i].solid = 0;
src/init_obj_enemies_data.c:			env->objects[i].main_sprite = BARREL;
src/init_obj_enemies_data.c:			env->objects[i].health = 0;
src/init_obj_enemies_data.c:			env->objects[i].nb_rest_state = 1;
src/init_obj_enemies_data.c:			env->objects[i].destructible = 0;
src/init_obj_enemies_data.c:			env->objects[i].explodes = 1;
src/init_obj_enemies_data.c:			env->objects[i].type = DECORATION;
src/init_obj_enemies_data.c:			env->objects[i].damage = 50;	
src/init_objects_main_sprites.c:	env->objects_main_sprites[0] = HEALTH_PACK;
src/init_objects_main_sprites.c:	env->objects_main_sprites[1] = SHELL_AMMO;
src/init_objects_main_sprites.c:	env->objects_main_sprites[2] = ROCKETS_AMMO;
src/init_objects_main_sprites.c:	env->objects_main_sprites[3] = REGULAR_AMMO;
src/init_objects_main_sprites.c:	env->objects_main_sprites[4] = ENERGY_AMMO;
src/init_objects_main_sprites.c:	env->objects_main_sprites[5] = LAMP;
src/init_objects_main_sprites.c:	env->objects_main_sprites[6] = MONITOR_OFF;
src/init_objects_main_sprites.c:	env->objects_main_sprites[7] = MONITOR_ON;
src/init_objects_main_sprites.c:	env->objects_main_sprites[8] = MONITOR_DESTROYED;
src/init_objects_main_sprites.c:	env->objects_main_sprites[9] = GREEN_ARMOR;
src/init_objects_main_sprites.c:	env->objects_main_sprites[10] = CANDLE;
src/init_objects_main_sprites.c:	env->objects_main_sprites[11] = BARREL;
src/init_objects_main_sprites.c:	env->objects_main_sprites[12] = GRID;
src/init_objects_main_sprites.c:	env->objects_main_sprites[13] = BUTTON_OFF;
src/init_objects_main_sprites.c:	env->objects_main_sprites[14] = BUTTON_ON;
src/init_objects_main_sprites.c:	env->objects_main_sprites[15] = BULLET_HOLE;
src/init_objects_main_sprites.c:	env->objects_main_sprites[16] = LOST_SOUL_OBJECT;
src/init_objects_main_sprites.c:	env->objects_main_sprites[17] = CYBER_DEMON_OBJECT;
src/init_options.c:	env->options.contouring = 0;
src/init_options.c:	env->options.render_sectors = 1;
src/init_options.c:	env->options.lighting = 1;
src/init_options.c:	env->options.show_minimap = 1;
src/init_options.c:	env->options.wall_lover = 0;
src/init_options.c:	env->options.show_fps = 1;
src/init_options.c:	env->options.color_clipping = 0;
src/init_options.c:	env->options.wall_color = 1;
src/init_options.c:	env->options.test = 0;
src/init_options.c:	env->options.minimap_scale = 2.5;
src/init_options.c:	env->options.clipping = 1;
src/init_options.c:	env->option = 0;
src/init_options.c:	env->options.gamma_filter = 1;
src/init_options.c:	env->options.show_ennemies = 1;
src/init_options.c:	env->options.zbuffer = 0;
src/init_options.c:	env->options.p = 1;
src/init_options.c:	env->options.animations = 1;
src/init_options.c:	env->options.mipmapping = 1;
src/init_options.c:	env->minimap_size = new_point(300, 300);
src/init_options.c:	env->minimap_pos = new_point(env->w - env->minimap_size.x / 2 - 20,
src/init_options.c:	env->minimap_size.y / 2 + 20);
src/init_options.c:	env->crosshair_pos = new_point(env->h_w, env->h_h);
src/init_options.c:	env->options.max_floor_sprites = 5;
src/init_options.c:	env->options.max_wall_sprites = 30;
src/init_print_condition_target_data.c:	env->print_condition_target_data[PLAYER_SPEED] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[PLAYER_INVINCIBLE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[PLAYER_INFINITE_AMMO] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[PLAYER_SECTOR] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[WEAPON_DAMAGE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[WEAPON_RANGE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[ENEMY_SPRITE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[ENEMY_SCALE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[ENEMY_DAMAGE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[ENEMY_HP] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[ENEMY_SPEED] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[ENEMY_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[ENEMY_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[ENEMY_Z] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[OBJECT_SPRITE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[OBJECT_SCALE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[OBJECT_DAMAGE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[OBJECT_HP] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[OBJECT_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[OBJECT_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[OBJECT_Z] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_SPRITES_SPRITE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_SPRITES_POS_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_SPRITES_POS_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_SPRITES_SCALE_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_SPRITES_SCALE_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_SPRITES_SPRITE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_SPRITES_POS_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_SPRITES_POS_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_SPRITES_SCALE_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_SPRITES_SCALE_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_BRIGHTNESS] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_LIGHT_COLOR] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_INTENSITY] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_GRAVITY] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[VERTEX_X] = &print_vertex_condition_target;
src/init_print_condition_target_data.c:	env->print_condition_target_data[VERTEX_Y] = &print_vertex_condition_target;
src/init_print_condition_target_data.c:	env->print_condition_target_data[PLAYER_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[PLAYER_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[PLAYER_Z] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[PLAYER_HP] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[PLAYER_ARMOR] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_HEIGHT] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_SLOPE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_TEXTURE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_ALIGN_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_ALIGN_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_SCALE_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_FLOOR_SCALE_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_HEIGHT] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_SLOPE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_TEXTURE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_ALIGN_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_ALIGN_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_SCALE_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_CEILING_SCALE_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_TEXTURE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_ALIGN_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_ALIGN_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_SCALE_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_SCALE_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_PORTAL] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_SPRITES_SPRITE] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_SPRITES_POS_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_SPRITES_POS_Y] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_SPRITES_SCALE_X] =
src/init_print_condition_target_data.c:	env->print_condition_target_data[SECTOR_WALL_SPRITES_SCALE_Y] =
src/init_print_target_data.c:	env->print_target_data[PLAYER_SPEED] = &print_nothing_target;
src/init_print_target_data.c:	env->print_target_data[PLAYER_INVINCIBLE] = &print_nothing_target;
src/init_print_target_data.c:	env->print_target_data[PLAYER_INFINITE_AMMO] = &print_nothing_target;
src/init_print_target_data.c:	env->print_target_data[PLAYER_SECTOR] = &print_nothing_target;
src/init_print_target_data.c:	env->print_target_data[WEAPON_DAMAGE] = &print_weapon_target;
src/init_print_target_data.c:	env->print_target_data[WEAPON_RANGE] = &print_weapon_target;
src/init_print_target_data.c:	env->print_target_data[ENEMY_SPRITE] = &print_enemy_target;
src/init_print_target_data.c:	env->print_target_data[ENEMY_SCALE] = &print_enemy_target;
src/init_print_target_data.c:	env->print_target_data[ENEMY_DAMAGE] = &print_enemy_target;
src/init_print_target_data.c:	env->print_target_data[ENEMY_HP] = &print_enemy_target;
src/init_print_target_data.c:	env->print_target_data[ENEMY_SPEED] = &print_enemy_target;
src/init_print_target_data.c:	env->print_target_data[ENEMY_X] = &print_enemy_target;
src/init_print_target_data.c:	env->print_target_data[ENEMY_Y] = &print_enemy_target;
src/init_print_target_data.c:	env->print_target_data[ENEMY_Z] = &print_enemy_target;
src/init_print_target_data.c:	env->print_target_data[OBJECT_SPRITE] = &print_object_target;
src/init_print_target_data.c:	env->print_target_data[OBJECT_SCALE] = &print_object_target;
src/init_print_target_data.c:	env->print_target_data[OBJECT_DAMAGE] = &print_object_target;
src/init_print_target_data.c:	env->print_target_data[OBJECT_HP] = &print_object_target;
src/init_print_target_data.c:	env->print_target_data[OBJECT_X] = &print_object_target;
src/init_print_target_data.c:	env->print_target_data[OBJECT_Y] = &print_object_target;
src/init_print_target_data.c:	env->print_target_data[OBJECT_Z] = &print_object_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_SPRITES_SPRITE] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_SPRITES_POS_X] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_SPRITES_POS_Y] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_SPRITES_SCALE_X] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_SPRITES_SCALE_Y] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_SPRITES_SPRITE] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_SPRITES_POS_X] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_SPRITES_POS_Y] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_SPRITES_SCALE_X] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_SPRITES_SCALE_Y] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_BRIGHTNESS] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_LIGHT_COLOR] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_INTENSITY] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_GRAVITY] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[VERTEX_X] = &print_vertex_target;
src/init_print_target_data.c:	env->print_target_data[VERTEX_Y] = &print_vertex_target;
src/init_print_target_data.c:	env->print_target_data[PLAYER_X] = &print_nothing_target;
src/init_print_target_data.c:	env->print_target_data[PLAYER_Y] = &print_nothing_target;
src/init_print_target_data.c:	env->print_target_data[PLAYER_Z] = &print_nothing_target;
src/init_print_target_data.c:	env->print_target_data[PLAYER_HP] = &print_nothing_target;
src/init_print_target_data.c:	env->print_target_data[PLAYER_ARMOR] = &print_nothing_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_HEIGHT] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_SLOPE] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_TEXTURE] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_ALIGN_X] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_ALIGN_Y] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_SCALE_X] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_FLOOR_SCALE_Y] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_HEIGHT] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_SLOPE] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_TEXTURE] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_ALIGN_X] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_ALIGN_Y] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_SCALE_X] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_CEILING_SCALE_Y] = &print_sector_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_TEXTURE] = &print_wall_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_ALIGN_X] = &print_wall_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_ALIGN_Y] = &print_wall_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_SCALE_X] = &print_wall_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_SCALE_Y] = &print_wall_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_PORTAL] = &print_wall_target;
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_SPRITES_SPRITE] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_SPRITES_POS_X] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_SPRITES_POS_Y] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_SPRITES_SCALE_X] =
src/init_print_target_data.c:	env->print_target_data[SECTOR_WALL_SPRITES_SCALE_Y] =
src/init_sdl.c:	/*env->w = 1280;
src/init_sdl.c:	env->h = 720;*/
src/init_sdl.c:	if (!(env->sdl.window = SDL_CreateWindow(
src/init_sdl.c:					env->w,
src/init_sdl.c:					env->h,
src/init_sdl.c:	if (!(env->sdl.renderer = SDL_CreateRenderer(
src/init_sdl.c:					env->sdl.window,
src/init_sdl.c:	SDL_GetRendererInfo(env->sdl.renderer, &info);
src/init_sdl.c:	/*if (SDL_SetRenderDrawBlendMode(env->sdl.renderer, SDL_BLENDMODE_NONE))
src/init_sdl.c:	if (!(env->sdl.texture = SDL_CreateTexture(
src/init_sdl.c:					env->sdl.renderer,
src/init_sdl.c:					env->w,
src/init_sdl.c:					env->h)))
src/init_sdl.c:	if (!(env->sdl.texture_pixels = (Uint32*)ft_memalloc(sizeof(Uint32) * env->w * env->h)))
src/init_sdl.c:	if (!(env->zbuffer = (double*)ft_memalloc(sizeof(double) * env->w * env->h)))
src/init_sdl.c:	if (!(env->ymin = (int*)ft_memalloc(sizeof(int) * env->w)))
src/init_sdl.c:	if (!(env->ymax = (int*)ft_memalloc(sizeof(int) * env->w)))
src/init_sdl.c:				env->sdl.renderer,
src/init_sdl.c:				env->sdl.texture,
src/init_sdl.c:	SDL_RenderPresent(env->sdl.renderer);
src/init_sdl.c:	SDL_SetWindowDisplayMode(env->sdl.window, NULL);
src/init_sdl.c:	SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/init_sdl.c:	env->time.milli_s =  0;
src/init_skybox.c:		if (!(env->skybox[j].texture_scale = (t_v2*)ft_memalloc(sizeof(t_v2))))
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i] = new_image_button(WHEN_DOWN, &save_texture, new_button_target(env, (-i -1)), env);
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i].img_up = env->mini_skyboxes[i].surface;
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i].img_hover = env->mini_skyboxes[i].surface;
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i].img_pressed = env->mini_skyboxes[i].surface;
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i].img_down = env->mini_skyboxes[i].surface;
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i].size_up = new_point(64, 64);
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i].size_hover = new_point(64, 64);
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i].size_pressed = new_point(64, 64);
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i].size_down = new_point(64, 64);
src/init_skybox_selection_buttons.c:		env->editor.skyboxes[i].pos = new_point(60 + (64 * (i % mod)) + 5,
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i] = new_image_button(WHEN_DOWN, &save_sprite, new_button_target(env, i), env);
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i].img_up = env->mini_objects_textures[i].surface;
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i].img_pressed = env->mini_objects_textures[i].surface;
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i].img_down = env->mini_objects_textures[i].surface;
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i].img_hover = env->mini_objects_textures[i].surface;
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i].size_up = new_point(64, 64);
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i].size_down = new_point(64, 64);
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i].size_hover = new_point(64, 64);
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i].size_pressed = new_point(64, 64);
src/init_sprite_selection_buttons.c:		env->editor.sprite_selection[i].pos = new_point(180 + (64 * (i % mod)) + 5, 490 + 5 + (64 * (i / mod)));
src/init_sprite_selection_buttons.c:    env->editor.current_sprite_selection = new_image_button(WHEN_DOWN, &open_wall_sprite_selection, new_button_target(env, i), env);
src/init_sprite_selection_buttons.c:	env->editor.current_sprite_selection.img_up = env->mini_objects_textures[env->editor.current_sprite].surface;
src/init_sprite_selection_buttons.c:	env->editor.current_sprite_selection.img_pressed = env->mini_objects_textures[env->editor.current_sprite].surface;
src/init_sprite_selection_buttons.c:	env->editor.current_sprite_selection.img_down = env->mini_objects_textures[env->editor.current_sprite].surface;
src/init_sprite_selection_buttons.c:	env->editor.current_sprite_selection.img_hover = env->mini_objects_textures[env->editor.current_sprite].surface;
src/init_sprite_selection_buttons.c:	env->editor.current_sprite_selection.size_up = new_point(64, 64);
src/init_sprite_selection_buttons.c:	env->editor.current_sprite_selection.size_down = new_point(64, 64);
src/init_sprite_selection_buttons.c:	env->editor.current_sprite_selection.size_hover = new_point(64, 64);
src/init_sprite_selection_buttons.c:	env->editor.current_sprite_selection.size_pressed = new_point(64, 64);
src/init_sprite_selection_buttons.c:	env->editor.current_sprite_selection.pos = new_point(170, 450);
src/init_sprite_selection_buttons.c:	env->editor.sprite_background = new_background_button(WHEN_DOWN, &nothing, &env->editor.texture_background, env);
src/init_sprite_selection_buttons.c:	env->editor.sprite_background.pos = new_point(168, 448);
src/init_sprites.c:	//if (!(env->object_sprites = (t_sprite*)ft_memalloc(sizeof(t_sprite) * 23)))
src/init_sprites.c:	env->object_sprites[0].texture = 22;
src/init_sprites.c:	env->object_sprites[0].death_counterpart = 0;
src/init_sprites.c:	env->object_sprites[0].oriented = 0;
src/init_sprites.c:	env->object_sprites[0].rest_sprite = 0;
src/init_sprites.c:	env->object_sprites[0].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[0].start[0].x = 511;
src/init_sprites.c:	env->object_sprites[0].start[0].y = 78;
src/init_sprites.c:	env->object_sprites[0].end[0].x = 562;
src/init_sprites.c:	env->object_sprites[0].end[0].y = 102;
src/init_sprites.c:	env->object_sprites[0].size[0].x = 51;
src/init_sprites.c:	env->object_sprites[0].size[0].y = 24;
src/init_sprites.c:	env->object_sprites[1].texture = 25;
src/init_sprites.c:	env->object_sprites[1].death_counterpart = 22;
src/init_sprites.c:	env->object_sprites[1].pursuit_sprite = 1;
src/init_sprites.c:	env->object_sprites[1].firing_sprite = 1;
src/init_sprites.c:	env->object_sprites[1].rest_sprite = 1;
src/init_sprites.c:	env->object_sprites[1].curr_sprite = 1;
src/init_sprites.c:	env->object_sprites[1].oriented = 1;
src/init_sprites.c:	env->object_sprites[1].nb_death_sprites = 3;
src/init_sprites.c:	env->object_sprites[1].start[0].x = 1;
src/init_sprites.c:	env->object_sprites[1].start[0].y = 817;
src/init_sprites.c:	env->object_sprites[1].end[0].x = 15;
src/init_sprites.c:	env->object_sprites[1].end[0].y = 830;
src/init_sprites.c:	env->object_sprites[1].size[0].x = 15;
src/init_sprites.c:	env->object_sprites[1].size[0].y = 14;
src/init_sprites.c:	env->object_sprites[1].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[1].start[1].x = 110;
src/init_sprites.c:	env->object_sprites[1].start[1].y = 817;
src/init_sprites.c:	env->object_sprites[1].end[1].x = 141;
src/init_sprites.c:	env->object_sprites[1].end[1].y = 830;
src/init_sprites.c:	env->object_sprites[1].size[1].x = 32;
src/init_sprites.c:	env->object_sprites[1].size[1].y = 14;
src/init_sprites.c:	env->object_sprites[1].reversed[1] = 0;
src/init_sprites.c:	env->object_sprites[1].start[2].x = 60;
src/init_sprites.c:	env->object_sprites[1].start[2].y = 817;
src/init_sprites.c:	env->object_sprites[1].end[2].x = 108;
src/init_sprites.c:	env->object_sprites[1].end[2].y = 830;
src/init_sprites.c:	env->object_sprites[1].size[2].x = 49;
src/init_sprites.c:	env->object_sprites[1].size[2].y = 14;
src/init_sprites.c:	env->object_sprites[1].reversed[2] = 0;
src/init_sprites.c:	env->object_sprites[1].start[3].x = 33;
src/init_sprites.c:	env->object_sprites[1].start[3].y = 817;
src/init_sprites.c:	env->object_sprites[1].end[3].x = 58;
src/init_sprites.c:	env->object_sprites[1].end[3].y = 830;
src/init_sprites.c:	env->object_sprites[1].size[3].x = 26;
src/init_sprites.c:	env->object_sprites[1].size[3].y = 14;
src/init_sprites.c:	env->object_sprites[1].reversed[3] = 0;
src/init_sprites.c:	env->object_sprites[1].start[4].x = 17;
src/init_sprites.c:	env->object_sprites[1].start[4].y = 817;
src/init_sprites.c:	env->object_sprites[1].end[4].x = 31;
src/init_sprites.c:	env->object_sprites[1].end[4].y = 830;
src/init_sprites.c:	env->object_sprites[1].size[4].x = 15;
src/init_sprites.c:	env->object_sprites[1].size[4].y = 14;
src/init_sprites.c:	env->object_sprites[1].reversed[4] = 0;
src/init_sprites.c:	env->object_sprites[1].start[5].x = 33;
src/init_sprites.c:	env->object_sprites[1].start[5].y = 817;
src/init_sprites.c:	env->object_sprites[1].end[5].x = 58;
src/init_sprites.c:	env->object_sprites[1].end[5].y = 830;
src/init_sprites.c:	env->object_sprites[1].size[5].x = 26;
src/init_sprites.c:	env->object_sprites[1].size[5].y = 14;
src/init_sprites.c:	env->object_sprites[1].reversed[5] = 1;
src/init_sprites.c:	env->object_sprites[1].start[6].x = 60;
src/init_sprites.c:	env->object_sprites[1].start[6].y = 817;
src/init_sprites.c:	env->object_sprites[1].end[6].x = 108;
src/init_sprites.c:	env->object_sprites[1].end[6].y = 830;
src/init_sprites.c:	env->object_sprites[1].size[6].x = 49;
src/init_sprites.c:	env->object_sprites[1].size[6].y = 14;
src/init_sprites.c:	env->object_sprites[1].reversed[6] = 1;
src/init_sprites.c:	env->object_sprites[1].start[7].x = 110;
src/init_sprites.c:	env->object_sprites[1].start[7].y = 817;
src/init_sprites.c:	env->object_sprites[1].end[7].x = 141;
src/init_sprites.c:	env->object_sprites[1].end[7].y = 830;
src/init_sprites.c:	env->object_sprites[1].size[7].x = 32;
src/init_sprites.c:	env->object_sprites[1].size[7].y = 14;
src/init_sprites.c:	env->object_sprites[1].reversed[7] = 1;
src/init_sprites.c:	env->object_sprites[2].texture = 22;
src/init_sprites.c:	env->object_sprites[2].death_counterpart = 2;
src/init_sprites.c:	env->object_sprites[2].oriented = 0;
src/init_sprites.c:	env->object_sprites[2].rest_sprite = 2;
src/init_sprites.c:	env->object_sprites[2].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[2].start[0].x = 47;
src/init_sprites.c:	env->object_sprites[2].start[0].y = 70;
src/init_sprites.c:	env->object_sprites[2].end[0].x = 80;
src/init_sprites.c:	env->object_sprites[2].end[0].y = 88;
src/init_sprites.c:	env->object_sprites[2].size[0].x = 34;
src/init_sprites.c:	env->object_sprites[2].size[0].y = 19;
src/init_sprites.c:	env->object_sprites[3].texture = 22;
src/init_sprites.c:	env->object_sprites[3].death_counterpart = 3;
src/init_sprites.c:	env->object_sprites[3].oriented = 0;
src/init_sprites.c:	env->object_sprites[3].rest_sprite = 3;
src/init_sprites.c:	env->object_sprites[3].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[3].start[0].x = 426;
src/init_sprites.c:	env->object_sprites[3].start[0].y = 179;
src/init_sprites.c:	env->object_sprites[3].end[0].x = 452;
src/init_sprites.c:	env->object_sprites[3].end[0].y = 193;
src/init_sprites.c:	env->object_sprites[3].size[0].x = 27;
src/init_sprites.c:	env->object_sprites[3].size[0].y = 15;
src/init_sprites.c:	env->object_sprites[4].texture = 22;
src/init_sprites.c:	env->object_sprites[4].death_counterpart = 22;
src/init_sprites.c:	env->object_sprites[4].oriented = 0;
src/init_sprites.c:	env->object_sprites[4].rest_sprite = 4;
src/init_sprites.c:	env->object_sprites[4].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[4].start[0].x = 586;
src/init_sprites.c:	env->object_sprites[4].start[0].y = 118;
src/init_sprites.c:	env->object_sprites[4].end[0].x = 639;
src/init_sprites.c:	env->object_sprites[4].end[0].y = 146;
src/init_sprites.c:	env->object_sprites[4].size[0].x = 54;
src/init_sprites.c:	env->object_sprites[4].size[0].y = 29;
src/init_sprites.c:	env->object_sprites[5].texture = 22;
src/init_sprites.c:	env->object_sprites[5].death_counterpart = 5;
src/init_sprites.c:	env->object_sprites[5].oriented = 0;
src/init_sprites.c:	env->object_sprites[5].rest_sprite = 5;
src/init_sprites.c:	env->object_sprites[5].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[5].start[0].x = 219;
src/init_sprites.c:	env->object_sprites[5].start[0].y = 328;
src/init_sprites.c:	env->object_sprites[5].end[0].x = 246;
src/init_sprites.c:	env->object_sprites[5].end[0].y = 343;
src/init_sprites.c:	env->object_sprites[5].size[0].x = 28;
src/init_sprites.c:	env->object_sprites[5].size[0].y = 16;
src/init_sprites.c:	env->object_sprites[6].texture = 22;
src/init_sprites.c:	env->object_sprites[6].death_counterpart = 6;
src/init_sprites.c:	env->object_sprites[6].oriented = 0;
src/init_sprites.c:	env->object_sprites[6].rest_sprite = 6;
src/init_sprites.c:	env->object_sprites[6].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[6].start[0].x = 343;
src/init_sprites.c:	env->object_sprites[6].start[0].y = 115;
src/init_sprites.c:	env->object_sprites[6].end[0].x = 374;
src/init_sprites.c:	env->object_sprites[6].end[0].y = 135;
src/init_sprites.c:	env->object_sprites[6].size[0].x = 32;
src/init_sprites.c:	env->object_sprites[6].size[0].y = 21;
src/init_sprites.c:	env->object_sprites[7].texture = 22;
src/init_sprites.c:	env->object_sprites[7].death_counterpart = 7;
src/init_sprites.c:	env->object_sprites[7].oriented = 0;
src/init_sprites.c:	env->object_sprites[7].rest_sprite = 8;
src/init_sprites.c:	env->object_sprites[7].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[7].start[0].x = 449;
src/init_sprites.c:	env->object_sprites[7].start[0].y = 329;
src/init_sprites.c:	env->object_sprites[7].end[0].x = 471;
src/init_sprites.c:	env->object_sprites[7].end[0].y = 412;
src/init_sprites.c:	env->object_sprites[7].size[0].x = 23;
src/init_sprites.c:	env->object_sprites[7].size[0].y = 84;
src/init_sprites.c:	env->object_sprites[8].texture = 22;
src/init_sprites.c:	env->object_sprites[8].death_counterpart = 8;
src/init_sprites.c:	env->object_sprites[8].oriented = 0;
src/init_sprites.c:	env->object_sprites[8].rest_sprite = 9;
src/init_sprites.c:	env->object_sprites[8].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[8].start[0].x = 479;
src/init_sprites.c:	env->object_sprites[8].start[0].y = 329;
src/init_sprites.c:	env->object_sprites[8].end[0].x = 501;
src/init_sprites.c:	env->object_sprites[8].end[0].y = 412;
src/init_sprites.c:	env->object_sprites[8].size[0].x = 23;
src/init_sprites.c:	env->object_sprites[8].size[0].y = 84;
src/init_sprites.c:	env->object_sprites[9].texture = 22;
src/init_sprites.c:	env->object_sprites[9].death_counterpart = 9;
src/init_sprites.c:	env->object_sprites[9].oriented = 0;
src/init_sprites.c:	env->object_sprites[9].rest_sprite = 10;
src/init_sprites.c:	env->object_sprites[9].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[9].start[0].x = 509;
src/init_sprites.c:	env->object_sprites[9].start[0].y = 329;
src/init_sprites.c:	env->object_sprites[9].end[0].x = 531;
src/init_sprites.c:	env->object_sprites[9].end[0].y = 412;
src/init_sprites.c:	env->object_sprites[9].size[0].x = 23;
src/init_sprites.c:	env->object_sprites[9].size[0].y = 84;
src/init_sprites.c:	env->object_sprites[10].texture = 22;
src/init_sprites.c:	env->object_sprites[10].death_counterpart = 10;
src/init_sprites.c:	env->object_sprites[10].oriented = 0;
src/init_sprites.c:	env->object_sprites[10].rest_sprite = 7;
src/init_sprites.c:	env->object_sprites[10].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[10].start[0].x = 539;
src/init_sprites.c:	env->object_sprites[10].start[0].y = 329;
src/init_sprites.c:	env->object_sprites[10].end[0].x = 561;
src/init_sprites.c:	env->object_sprites[10].end[0].y = 412;
src/init_sprites.c:	env->object_sprites[10].size[0].x = 23;
src/init_sprites.c:	env->object_sprites[10].size[0].y = 84;
src/init_sprites.c:	env->object_sprites[11].texture = 22;
src/init_sprites.c:	env->object_sprites[11].death_counterpart = 16;
src/init_sprites.c:	env->object_sprites[11].nb_death_sprites = 1;
src/init_sprites.c:	env->object_sprites[11].oriented = 0;
src/init_sprites.c:	env->object_sprites[11].rest_sprite = 11;
src/init_sprites.c:	env->object_sprites[11].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[11].start[0].x = 511;
src/init_sprites.c:	env->object_sprites[11].start[0].y = 122;
src/init_sprites.c:	env->object_sprites[11].end[0].x = 538;
src/init_sprites.c:	env->object_sprites[11].end[0].y = 148;
src/init_sprites.c:	env->object_sprites[11].size[0].x = 28;
src/init_sprites.c:	env->object_sprites[11].size[0].y = 27;
src/init_sprites.c:	env->object_sprites[12].texture = 22;
src/init_sprites.c:	env->object_sprites[12].death_counterpart = 16;
src/init_sprites.c:	env->object_sprites[12].nb_death_sprites = 1;
src/init_sprites.c:	env->object_sprites[12].oriented = 0;
src/init_sprites.c:	env->object_sprites[12].rest_sprite = 13;
src/init_sprites.c:	env->object_sprites[12].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[12].start[0].x = 48;
src/init_sprites.c:	env->object_sprites[12].start[0].y = 228;
src/init_sprites.c:	env->object_sprites[12].end[0].x = 75;
src/init_sprites.c:	env->object_sprites[12].end[0].y = 254;
src/init_sprites.c:	env->object_sprites[12].size[0].x = 28;
src/init_sprites.c:	env->object_sprites[12].size[0].y = 27;
src/init_sprites.c:	env->object_sprites[13].texture = 22;
src/init_sprites.c:	env->object_sprites[13].death_counterpart = 16;
src/init_sprites.c:	env->object_sprites[13].nb_death_sprites = 1;
src/init_sprites.c:	env->object_sprites[13].oriented = 0;
src/init_sprites.c:	env->object_sprites[13].rest_sprite = 14;
src/init_sprites.c:	env->object_sprites[13].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[13].start[0].x = 78;
src/init_sprites.c:	env->object_sprites[13].start[0].y = 228;
src/init_sprites.c:	env->object_sprites[13].end[0].x = 105;
src/init_sprites.c:	env->object_sprites[13].end[0].y = 254;
src/init_sprites.c:	env->object_sprites[13].size[0].x = 28;
src/init_sprites.c:	env->object_sprites[13].size[0].y = 27;
src/init_sprites.c:	env->object_sprites[14].texture = 22;
src/init_sprites.c:	env->object_sprites[14].death_counterpart = 16;
src/init_sprites.c:	env->object_sprites[14].nb_death_sprites = 1;
src/init_sprites.c:	env->object_sprites[14].oriented = 0;
src/init_sprites.c:	env->object_sprites[14].rest_sprite = 15;
src/init_sprites.c:	env->object_sprites[14].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[14].start[0].x = 108;
src/init_sprites.c:	env->object_sprites[14].start[0].y = 228;
src/init_sprites.c:	env->object_sprites[14].end[0].x = 135;
src/init_sprites.c:	env->object_sprites[14].end[0].y = 254;
src/init_sprites.c:	env->object_sprites[14].size[0].x = 28;
src/init_sprites.c:	env->object_sprites[14].size[0].y = 27;
src/init_sprites.c:	env->object_sprites[15].texture = 22;
src/init_sprites.c:	env->object_sprites[15].death_counterpart = 16;
src/init_sprites.c:	env->object_sprites[15].nb_death_sprites = 1;
src/init_sprites.c:	env->object_sprites[15].oriented = 0;
src/init_sprites.c:	env->object_sprites[15].rest_sprite = 12;
src/init_sprites.c:	env->object_sprites[15].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[15].start[0].x = 138;
src/init_sprites.c:	env->object_sprites[15].start[0].y = 228;
src/init_sprites.c:	env->object_sprites[15].end[0].x = 165;
src/init_sprites.c:	env->object_sprites[15].end[0].y = 254;
src/init_sprites.c:	env->object_sprites[15].size[0].x = 28;
src/init_sprites.c:	env->object_sprites[15].size[0].y = 27;
src/init_sprites.c:	env->object_sprites[16].texture = 22;
src/init_sprites.c:	env->object_sprites[16].death_counterpart = 16;
src/init_sprites.c:	env->object_sprites[16].nb_death_sprites = 1;
src/init_sprites.c:	env->object_sprites[16].oriented = 0;
src/init_sprites.c:	env->object_sprites[16].rest_sprite = 16;
src/init_sprites.c:	env->object_sprites[16].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[16].start[0].x = 646;
src/init_sprites.c:	env->object_sprites[16].start[0].y = 268;
src/init_sprites.c:	env->object_sprites[16].end[0].x = 673;
src/init_sprites.c:	env->object_sprites[16].end[0].y = 294;
src/init_sprites.c:	env->object_sprites[16].size[0].x = 28;
src/init_sprites.c:	env->object_sprites[16].size[0].y = 27;
src/init_sprites.c:	env->object_sprites[17].texture = 22;
src/init_sprites.c:	env->object_sprites[17].death_counterpart = 17;
src/init_sprites.c:	env->object_sprites[17].oriented = 0;
src/init_sprites.c:	env->object_sprites[17].rest_sprite = 17;
src/init_sprites.c:	env->object_sprites[17].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[17].start[0].x = 337;
src/init_sprites.c:	env->object_sprites[17].start[0].y = 224;
src/init_sprites.c:	env->object_sprites[17].end[0].x = 367;
src/init_sprites.c:	env->object_sprites[17].end[0].y = 240;
src/init_sprites.c:	env->object_sprites[17].size[0].x = 31;
src/init_sprites.c:	env->object_sprites[17].size[0].y = 17;
src/init_sprites.c:	env->object_sprites[18].texture = 22;
src/init_sprites.c:	env->object_sprites[18].death_counterpart = 19;
src/init_sprites.c:	env->object_sprites[18].nb_death_sprites = 1;
src/init_sprites.c:	env->object_sprites[18].oriented = 0;
src/init_sprites.c:	env->object_sprites[18].rest_sprite = 18;
src/init_sprites.c:	env->object_sprites[18].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[18].start[0].x = 597;
src/init_sprites.c:	env->object_sprites[18].start[0].y = 159;
src/init_sprites.c:	env->object_sprites[18].end[0].x = 612;
src/init_sprites.c:	env->object_sprites[18].end[0].y = 173;
src/init_sprites.c:	env->object_sprites[18].size[0].x = 16;
src/init_sprites.c:	env->object_sprites[18].size[0].y = 15;
src/init_sprites.c:	env->object_sprites[19].texture = 22;
src/init_sprites.c:	env->object_sprites[19].death_counterpart = 19;
src/init_sprites.c:	env->object_sprites[19].oriented = 0;
src/init_sprites.c:	env->object_sprites[19].rest_sprite = 19;
src/init_sprites.c:	env->object_sprites[19].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[19].start[0].x = 528;
src/init_sprites.c:	env->object_sprites[19].start[0].y = 280;
src/init_sprites.c:	env->object_sprites[19].end[0].x = 558;
src/init_sprites.c:	env->object_sprites[19].end[0].y = 293;
src/init_sprites.c:	env->object_sprites[19].size[0].x = 31;
src/init_sprites.c:	env->object_sprites[19].size[0].y = 14;
src/init_sprites.c:	env->object_sprites[20].texture = 34;
src/init_sprites.c:	env->object_sprites[20].death_counterpart = 21;
src/init_sprites.c:	env->object_sprites[20].nb_death_sprites = 8;
src/init_sprites.c:	env->object_sprites[20].oriented = 0;
src/init_sprites.c:	env->object_sprites[20].rest_sprite = 20;
src/init_sprites.c:	env->object_sprites[20].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[20].start[0].x = 6;
src/init_sprites.c:	env->object_sprites[20].start[0].y = 205;
src/init_sprites.c:	env->object_sprites[20].end[0].x = 40;
src/init_sprites.c:	env->object_sprites[20].end[0].y = 254;
src/init_sprites.c:	env->object_sprites[20].size[0].x = 35;
src/init_sprites.c:	env->object_sprites[20].size[0].y = 50;
src/init_sprites.c:	env->object_sprites[21].texture = 34;
src/init_sprites.c:	env->object_sprites[21].death_counterpart = 21;
src/init_sprites.c:	env->object_sprites[21].nb_death_sprites = 8;
src/init_sprites.c:	env->object_sprites[21].oriented = 0;
src/init_sprites.c:	env->object_sprites[21].rest_sprite = 21;
src/init_sprites.c:	env->object_sprites[21].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[21].start[0].x = 48;
src/init_sprites.c:	env->object_sprites[21].start[0].y = 202;
src/init_sprites.c:	env->object_sprites[21].end[0].x = 88;
src/init_sprites.c:	env->object_sprites[21].end[0].y = 255;
src/init_sprites.c:	env->object_sprites[21].size[0].x = 41;
src/init_sprites.c:	env->object_sprites[21].size[0].y = 54;
src/init_sprites.c:	env->object_sprites[21].start[1].x = 95;
src/init_sprites.c:	env->object_sprites[21].start[1].y = 201;
src/init_sprites.c:	env->object_sprites[21].end[1].x = 138;
src/init_sprites.c:	env->object_sprites[21].end[1].y = 255;
src/init_sprites.c:	env->object_sprites[21].size[1].x = 44;
src/init_sprites.c:	env->object_sprites[21].size[1].y = 55;
src/init_sprites.c:	env->object_sprites[21].start[2].x = 147;
src/init_sprites.c:	env->object_sprites[21].start[2].y = 201;
src/init_sprites.c:	env->object_sprites[21].end[2].x = 193;
src/init_sprites.c:	env->object_sprites[21].end[2].y = 255;
src/init_sprites.c:	env->object_sprites[21].size[2].x = 47;
src/init_sprites.c:	env->object_sprites[21].size[2].y = 55;
src/init_sprites.c:	env->object_sprites[21].start[3].x = 200;
src/init_sprites.c:	env->object_sprites[21].start[3].y = 158;
src/init_sprites.c:	env->object_sprites[21].end[3].x = 285;
src/init_sprites.c:	env->object_sprites[21].end[3].y = 259;
src/init_sprites.c:	env->object_sprites[21].size[3].x = 86;
src/init_sprites.c:	env->object_sprites[21].size[3].y = 102;
src/init_sprites.c:	env->object_sprites[21].start[4].x = 294;
src/init_sprites.c:	env->object_sprites[21].start[4].y = 158;
src/init_sprites.c:	env->object_sprites[21].end[4].x = 373;
src/init_sprites.c:	env->object_sprites[21].end[4].y = 253;
src/init_sprites.c:	env->object_sprites[21].size[4].x = 80;
src/init_sprites.c:	env->object_sprites[21].size[4].y = 86;
src/init_sprites.c:	env->object_sprites[21].start[5].x = 381;
src/init_sprites.c:	env->object_sprites[21].start[5].y = 171;
src/init_sprites.c:	env->object_sprites[21].end[5].x = 459;
src/init_sprites.c:	env->object_sprites[21].end[5].y = 253;
src/init_sprites.c:	env->object_sprites[21].size[5].x = 79;
src/init_sprites.c:	env->object_sprites[21].size[5].y = 83;
src/init_sprites.c:	env->object_sprites[21].start[6].x = 467;
src/init_sprites.c:	env->object_sprites[21].start[6].y = 166;
src/init_sprites.c:	env->object_sprites[21].end[6].x = 542;
src/init_sprites.c:	env->object_sprites[21].end[6].y = 252;
src/init_sprites.c:	env->object_sprites[21].size[6].x = 76;
src/init_sprites.c:	env->object_sprites[21].size[6].y = 87;
src/init_sprites.c:	env->object_sprites[21].start[7].x = 552;
src/init_sprites.c:	env->object_sprites[21].start[7].y = 198;
src/init_sprites.c:	env->object_sprites[21].end[7].x = 630;
src/init_sprites.c:	env->object_sprites[21].end[7].y = 281;
src/init_sprites.c:	env->object_sprites[21].size[7].x = 79;
src/init_sprites.c:	env->object_sprites[21].size[7].y = 84;
src/init_sprites.c:	env->object_sprites[22].texture = 25;
src/init_sprites.c:	env->object_sprites[22].death_counterpart = 22;
src/init_sprites.c:	env->object_sprites[22].curr_sprite = 22;
src/init_sprites.c:	env->object_sprites[22].nb_death_sprites = 3;
src/init_sprites.c:	env->object_sprites[22].oriented = 0;
src/init_sprites.c:	env->object_sprites[22].rest_sprite = 22;
src/init_sprites.c:	env->object_sprites[22].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[22].start[0].x = 1;
src/init_sprites.c:	env->object_sprites[22].start[0].y = 858;
src/init_sprites.c:	env->object_sprites[22].end[0].x = 73;
src/init_sprites.c:	env->object_sprites[22].end[0].y = 917;
src/init_sprites.c:	env->object_sprites[22].size[0].x = 73;
src/init_sprites.c:	env->object_sprites[22].size[0].y = 60;
src/init_sprites.c:	env->object_sprites[22].start[1].x = 75;
src/init_sprites.c:	env->object_sprites[22].start[1].y = 846;
src/init_sprites.c:	env->object_sprites[22].end[1].x = 162;
src/init_sprites.c:	env->object_sprites[22].end[1].y = 917;
src/init_sprites.c:	env->object_sprites[22].size[1].x = 88;
src/init_sprites.c:	env->object_sprites[22].size[1].y = 72;
src/init_sprites.c:	env->object_sprites[22].start[2].x = 164;
src/init_sprites.c:	env->object_sprites[22].start[2].y = 832;
src/init_sprites.c:	env->object_sprites[22].end[2].x = 266;
src/init_sprites.c:	env->object_sprites[22].end[2].y = 917;
src/init_sprites.c:	env->object_sprites[22].size[2].x = 103;
src/init_sprites.c:	env->object_sprites[22].size[2].y = 86;
src/init_sprites.c:	env->object_sprites[23].texture = 31;
src/init_sprites.c:	env->object_sprites[23].death_counterpart = 0;
src/init_sprites.c:	env->object_sprites[23].pursuit_sprite = 0;
src/init_sprites.c:	env->object_sprites[23].rest_sprite = 23;
src/init_sprites.c:	env->object_sprites[23].curr_sprite = 0;
src/init_sprites.c:	env->object_sprites[23].oriented = 0;
src/init_sprites.c:	env->object_sprites[23].nb_death_sprites = 0;
src/init_sprites.c:	env->object_sprites[23].start[0].x = 0;
src/init_sprites.c:	env->object_sprites[23].start[0].y = 0;
src/init_sprites.c:	env->object_sprites[23].end[0].x = 128;
src/init_sprites.c:	env->object_sprites[23].end[0].y = 256;
src/init_sprites.c:	env->object_sprites[23].size[0].x = 128;
src/init_sprites.c:	env->object_sprites[23].size[0].y = 256;
src/init_sprites.c:	env->object_sprites[23].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[24].texture = 32;
src/init_sprites.c:	env->object_sprites[24].death_counterpart = 1;
src/init_sprites.c:	env->object_sprites[24].pursuit_sprite = 1;
src/init_sprites.c:	env->object_sprites[24].rest_sprite = 24;
src/init_sprites.c:	env->object_sprites[24].curr_sprite = 1;
src/init_sprites.c:	env->object_sprites[24].oriented = 0;
src/init_sprites.c:	env->object_sprites[24].nb_death_sprites = 1;
src/init_sprites.c:	env->object_sprites[24].start[0].x = 0;
src/init_sprites.c:	env->object_sprites[24].start[0].y = 0;
src/init_sprites.c:	env->object_sprites[24].end[0].x = 64;
src/init_sprites.c:	env->object_sprites[24].end[0].y = 64;
src/init_sprites.c:	env->object_sprites[24].size[0].x = 64;
src/init_sprites.c:	env->object_sprites[24].size[0].y = 64;
src/init_sprites.c:	env->object_sprites[24].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[25].texture = 33;
src/init_sprites.c:	env->object_sprites[25].death_counterpart = 2;
src/init_sprites.c:	env->object_sprites[25].pursuit_sprite = 2;
src/init_sprites.c:	env->object_sprites[25].rest_sprite = 25;
src/init_sprites.c:	env->object_sprites[25].curr_sprite = 0;
src/init_sprites.c:	env->object_sprites[25].oriented = 0;
src/init_sprites.c:	env->object_sprites[25].nb_death_sprites = 2;
src/init_sprites.c:	env->object_sprites[25].start[0].x = 0;
src/init_sprites.c:	env->object_sprites[25].start[0].y = 0;
src/init_sprites.c:	env->object_sprites[25].end[0].x = 64;
src/init_sprites.c:	env->object_sprites[25].end[0].y = 64;
src/init_sprites.c:	env->object_sprites[25].size[0].x = 64;
src/init_sprites.c:	env->object_sprites[25].size[0].y = 64;
src/init_sprites.c:	env->object_sprites[25].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[26].texture = 35;
src/init_sprites.c:	env->object_sprites[26].death_counterpart = 3;
src/init_sprites.c:	env->object_sprites[26].pursuit_sprite = 3;
src/init_sprites.c:	env->object_sprites[26].rest_sprite = 26;
src/init_sprites.c:	env->object_sprites[26].curr_sprite = 0;
src/init_sprites.c:	env->object_sprites[26].oriented = 0;
src/init_sprites.c:	env->object_sprites[26].nb_death_sprites = 0;
src/init_sprites.c:	env->object_sprites[26].start[0].x = 0;
src/init_sprites.c:	env->object_sprites[26].start[0].y = 0;
src/init_sprites.c:	env->object_sprites[26].end[0].x = 600;
src/init_sprites.c:	env->object_sprites[26].end[0].y = 600;
src/init_sprites.c:	env->object_sprites[26].size[0].x = 600;
src/init_sprites.c:	env->object_sprites[26].size[0].y = 600;
src/init_sprites.c:	env->object_sprites[26].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[27].texture = 23;
src/init_sprites.c:	env->object_sprites[27].death_counterpart = 4;
src/init_sprites.c:	env->object_sprites[27].pursuit_sprite = 2;
src/init_sprites.c:	env->object_sprites[27].firing_sprite = 2;
src/init_sprites.c:	env->object_sprites[27].rest_sprite = 27;
src/init_sprites.c:	env->object_sprites[27].curr_sprite = 0;
src/init_sprites.c:	env->object_sprites[27].oriented = 1;
src/init_sprites.c:	env->object_sprites[27].nb_death_sprites = 6;
src/init_sprites.c:	env->object_sprites[27].start[0].x = 44;
src/init_sprites.c:	env->object_sprites[27].start[0].y = 120;
src/init_sprites.c:	env->object_sprites[27].end[0].x = 87;
src/init_sprites.c:	env->object_sprites[27].end[0].y = 165;
src/init_sprites.c:	env->object_sprites[27].size[0].x = 44;
src/init_sprites.c:	env->object_sprites[27].size[0].y = 46;
src/init_sprites.c:	env->object_sprites[27].reversed[0] = 0;
src/init_sprites.c:	env->object_sprites[28].texture = 24;
src/init_sprites.c:	env->object_sprites[28].death_counterpart = 12;
src/init_sprites.c:	env->object_sprites[28].pursuit_sprite = 6;
src/init_sprites.c:	env->object_sprites[28].firing_sprite = 9;
src/init_sprites.c:	env->object_sprites[28].rest_sprite = 28;
src/init_sprites.c:	env->object_sprites[28].curr_sprite = 5;
src/init_sprites.c:	env->object_sprites[28].oriented = 1;
src/init_sprites.c:	env->object_sprites[28].nb_death_sprites = 8;
src/init_sprites.c:	env->object_sprites[28].start[0].x = 44;
src/init_sprites.c:	env->object_sprites[28].start[0].y = 33;
src/init_sprites.c:	env->object_sprites[28].end[0].x = 125;
src/init_sprites.c:	env->object_sprites[28].end[0].y = 140;
src/init_sprites.c:	env->object_sprites[28].size[0].x = 82;
src/init_sprites.c:	env->object_sprites[28].size[0].y = 108;
src/init_sprites.c:	env->object_sprites[28].reversed[0] = 0;
src/init_sprites.c:	/*if (!(env->enemy_sprites = (t_sprite*)ft_memalloc(sizeof(t_sprite) * 13)))
src/init_sprites.c:	env->enemy_sprites[0].texture = 23;
src/init_sprites.c:	env->enemy_sprites[0].death_counterpart = 4;
src/init_sprites.c:	env->enemy_sprites[0].pursuit_sprite = 2;
src/init_sprites.c:	env->enemy_sprites[0].firing_sprite = 2;
src/init_sprites.c:	env->enemy_sprites[0].rest_sprite = 1;
src/init_sprites.c:	env->enemy_sprites[0].curr_sprite = 0;
src/init_sprites.c:	env->enemy_sprites[0].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[0].nb_death_sprites = 6;
src/init_sprites.c:	env->enemy_sprites[0].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[0].start[0].y = 120;
src/init_sprites.c:	env->enemy_sprites[0].end[0].x = 87;
src/init_sprites.c:	env->enemy_sprites[0].end[0].y = 165;
src/init_sprites.c:	env->enemy_sprites[0].size[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[0].size[0].y = 46;
src/init_sprites.c:	env->enemy_sprites[0].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[0].start[1].x = 374;
src/init_sprites.c:	env->enemy_sprites[0].start[1].y = 120;
src/init_sprites.c:	env->enemy_sprites[0].end[1].x = 405;
src/init_sprites.c:	env->enemy_sprites[0].end[1].y = 172;
src/init_sprites.c:	env->enemy_sprites[0].size[1].x = 32;
src/init_sprites.c:	env->enemy_sprites[0].size[1].y = 53;
src/init_sprites.c:	env->enemy_sprites[0].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[0].start[2].x = 299;
src/init_sprites.c:	env->enemy_sprites[0].start[2].y = 120;
src/init_sprites.c:	env->enemy_sprites[0].end[2].x = 329;
src/init_sprites.c:	env->enemy_sprites[0].end[2].y = 173;
src/init_sprites.c:	env->enemy_sprites[0].size[2].x = 31;
src/init_sprites.c:	env->enemy_sprites[0].size[2].y = 54;
src/init_sprites.c:	env->enemy_sprites[0].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[0].start[3].x = 220;
src/init_sprites.c:	env->enemy_sprites[0].start[3].y = 120;
src/init_sprites.c:	env->enemy_sprites[0].end[3].x = 254;
src/init_sprites.c:	env->enemy_sprites[0].end[3].y = 171;
src/init_sprites.c:	env->enemy_sprites[0].size[3].x = 35;
src/init_sprites.c:	env->enemy_sprites[0].size[3].y = 52;
src/init_sprites.c:	env->enemy_sprites[0].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[0].start[4].x = 132;
src/init_sprites.c:	env->enemy_sprites[0].start[4].y = 120;
src/init_sprites.c:	env->enemy_sprites[0].end[4].x = 175;
src/init_sprites.c:	env->enemy_sprites[0].end[4].y = 165;
src/init_sprites.c:	env->enemy_sprites[0].size[4].x = 44;
src/init_sprites.c:	env->enemy_sprites[0].size[4].y = 46;
src/init_sprites.c:	env->enemy_sprites[0].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[0].start[5].x = 220;
src/init_sprites.c:	env->enemy_sprites[0].start[5].y = 120;
src/init_sprites.c:	env->enemy_sprites[0].end[5].x = 254;
src/init_sprites.c:	env->enemy_sprites[0].end[5].y = 171;
src/init_sprites.c:	env->enemy_sprites[0].size[5].x = 35;
src/init_sprites.c:	env->enemy_sprites[0].size[5].y = 52;
src/init_sprites.c:	env->enemy_sprites[0].reversed[5] = 1;
src/init_sprites.c:	env->enemy_sprites[0].start[6].x = 299;
src/init_sprites.c:	env->enemy_sprites[0].start[6].y = 120;
src/init_sprites.c:	env->enemy_sprites[0].end[6].x = 329;
src/init_sprites.c:	env->enemy_sprites[0].end[6].y = 173;
src/init_sprites.c:	env->enemy_sprites[0].size[6].x = 31;
src/init_sprites.c:	env->enemy_sprites[0].size[6].y = 54;
src/init_sprites.c:	env->enemy_sprites[0].reversed[6] = 1;
src/init_sprites.c:	env->enemy_sprites[0].start[7].x = 374;
src/init_sprites.c:	env->enemy_sprites[0].start[7].y = 120;
src/init_sprites.c:	env->enemy_sprites[0].end[7].x = 405;
src/init_sprites.c:	env->enemy_sprites[0].end[7].y = 172;
src/init_sprites.c:	env->enemy_sprites[0].size[7].x = 32;
src/init_sprites.c:	env->enemy_sprites[0].size[7].y = 53;
src/init_sprites.c:	env->enemy_sprites[0].reversed[7] = 1;
src/init_sprites.c:	env->enemy_sprites[1].texture = 23;
src/init_sprites.c:	env->enemy_sprites[1].death_counterpart = 4;
src/init_sprites.c:	env->enemy_sprites[1].pursuit_sprite = 2;
src/init_sprites.c:	env->enemy_sprites[1].firing_sprite = 2;
src/init_sprites.c:	env->enemy_sprites[1].rest_sprite = 0;
src/init_sprites.c:	env->enemy_sprites[1].curr_sprite = 1;
src/init_sprites.c:	env->enemy_sprites[1].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[1].nb_death_sprites = 6;
src/init_sprites.c:	env->enemy_sprites[1].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[1].start[0].y = 33;
src/init_sprites.c:	env->enemy_sprites[1].end[0].x = 87;
src/init_sprites.c:	env->enemy_sprites[1].end[0].y = 79;
src/init_sprites.c:	env->enemy_sprites[1].size[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[1].size[0].y = 47;
src/init_sprites.c:	env->enemy_sprites[1].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[1].start[1].x = 132;
src/init_sprites.c:	env->enemy_sprites[1].start[1].y = 33;
src/init_sprites.c:	env->enemy_sprites[1].end[1].x = 163;
src/init_sprites.c:	env->enemy_sprites[1].end[1].y = 79;
src/init_sprites.c:	env->enemy_sprites[1].size[1].x = 32;
src/init_sprites.c:	env->enemy_sprites[1].size[1].y = 47;
src/init_sprites.c:	env->enemy_sprites[1].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[1].start[2].x = 208;
src/init_sprites.c:	env->enemy_sprites[1].start[2].y = 33;
src/init_sprites.c:	env->enemy_sprites[1].end[2].x = 238;
src/init_sprites.c:	env->enemy_sprites[1].end[2].y = 86;
src/init_sprites.c:	env->enemy_sprites[1].size[2].x = 31;
src/init_sprites.c:	env->enemy_sprites[1].size[2].y = 54;
src/init_sprites.c:	env->enemy_sprites[1].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[1].start[3].x = 283;
src/init_sprites.c:	env->enemy_sprites[1].start[3].y = 33;
src/init_sprites.c:	env->enemy_sprites[1].end[3].x = 317;
src/init_sprites.c:	env->enemy_sprites[1].end[3].y = 84;
src/init_sprites.c:	env->enemy_sprites[1].size[3].x = 35;
src/init_sprites.c:	env->enemy_sprites[1].size[3].y = 52;
src/init_sprites.c:	env->enemy_sprites[1].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[1].start[4].x = 362;
src/init_sprites.c:	env->enemy_sprites[1].start[4].y = 33;
src/init_sprites.c:	env->enemy_sprites[1].end[4].x = 405;
src/init_sprites.c:	env->enemy_sprites[1].end[4].y = 78;
src/init_sprites.c:	env->enemy_sprites[1].size[4].x = 44;
src/init_sprites.c:	env->enemy_sprites[1].size[4].y = 46;
src/init_sprites.c:	env->enemy_sprites[1].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[1].start[5].x = 283;
src/init_sprites.c:	env->enemy_sprites[1].start[5].y = 33;
src/init_sprites.c:	env->enemy_sprites[1].end[5].x = 317;
src/init_sprites.c:	env->enemy_sprites[1].end[5].y = 84;
src/init_sprites.c:	env->enemy_sprites[1].size[5].x = 35;
src/init_sprites.c:	env->enemy_sprites[1].size[5].y = 52;
src/init_sprites.c:	env->enemy_sprites[1].reversed[5] = 1;
src/init_sprites.c:	env->enemy_sprites[1].start[6].x = 208;
src/init_sprites.c:	env->enemy_sprites[1].start[6].y = 33;
src/init_sprites.c:	env->enemy_sprites[1].end[6].x = 238;
src/init_sprites.c:	env->enemy_sprites[1].end[6].y = 86;
src/init_sprites.c:	env->enemy_sprites[1].size[6].x = 31;
src/init_sprites.c:	env->enemy_sprites[1].size[6].y = 54;
src/init_sprites.c:	env->enemy_sprites[1].reversed[6] = 1;
src/init_sprites.c:	env->enemy_sprites[1].start[7].x = 132;
src/init_sprites.c:	env->enemy_sprites[1].start[7].y = 33;
src/init_sprites.c:	env->enemy_sprites[1].end[7].x = 163;
src/init_sprites.c:	env->enemy_sprites[1].end[7].y = 79;
src/init_sprites.c:	env->enemy_sprites[1].size[7].x = 32;
src/init_sprites.c:	env->enemy_sprites[1].size[7].y = 47;
src/init_sprites.c:	env->enemy_sprites[1].reversed[7] = 1;
src/init_sprites.c:	env->enemy_sprites[2].texture = 23;
src/init_sprites.c:	env->enemy_sprites[2].death_counterpart = 4;
src/init_sprites.c:	env->enemy_sprites[2].pursuit_sprite = 3;
src/init_sprites.c:	env->enemy_sprites[2].firing_sprite = 3;
src/init_sprites.c:	env->enemy_sprites[2].rest_sprite = 0;
src/init_sprites.c:	env->enemy_sprites[2].curr_sprite = 2;
src/init_sprites.c:	env->enemy_sprites[2].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[2].nb_death_sprites = 6;
src/init_sprites.c:	env->enemy_sprites[2].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[2].start[0].y = 207;
src/init_sprites.c:	env->enemy_sprites[2].end[0].x = 87;
src/init_sprites.c:	env->enemy_sprites[2].end[0].y = 250;
src/init_sprites.c:	env->enemy_sprites[2].size[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[2].size[0].y = 44;
src/init_sprites.c:	env->enemy_sprites[2].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[2].start[1].x = 132;
src/init_sprites.c:	env->enemy_sprites[2].start[1].y = 207;
src/init_sprites.c:	env->enemy_sprites[2].end[1].x = 191;
src/init_sprites.c:	env->enemy_sprites[2].end[1].y = 242;
src/init_sprites.c:	env->enemy_sprites[2].size[1].x = 60;
src/init_sprites.c:	env->enemy_sprites[2].size[1].y = 36;
src/init_sprites.c:	env->enemy_sprites[2].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[2].start[2].x = 236;
src/init_sprites.c:	env->enemy_sprites[2].start[2].y = 207;
src/init_sprites.c:	env->enemy_sprites[2].end[2].x = 302;
src/init_sprites.c:	env->enemy_sprites[2].end[2].y = 239;
src/init_sprites.c:	env->enemy_sprites[2].size[2].x = 67;
src/init_sprites.c:	env->enemy_sprites[2].size[2].y = 33;
src/init_sprites.c:	env->enemy_sprites[2].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[2].start[3].x = 347;
src/init_sprites.c:	env->enemy_sprites[2].start[3].y = 207;
src/init_sprites.c:	env->enemy_sprites[2].end[3].x = 400;
src/init_sprites.c:	env->enemy_sprites[2].end[3].y = 238;
src/init_sprites.c:	env->enemy_sprites[2].size[3].x = 54;
src/init_sprites.c:	env->enemy_sprites[2].size[3].y = 32;
src/init_sprites.c:	env->enemy_sprites[2].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[2].start[4].x = 445;
src/init_sprites.c:	env->enemy_sprites[2].start[4].y = 207;
src/init_sprites.c:	env->enemy_sprites[2].end[4].x = 488;
src/init_sprites.c:	env->enemy_sprites[2].end[4].y = 232;
src/init_sprites.c:	env->enemy_sprites[2].size[4].x = 44;
src/init_sprites.c:	env->enemy_sprites[2].size[4].y = 26;
src/init_sprites.c:	env->enemy_sprites[2].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[2].start[5].x = 347;
src/init_sprites.c:	env->enemy_sprites[2].start[5].y = 207;
src/init_sprites.c:	env->enemy_sprites[2].end[5].x = 400;
src/init_sprites.c:	env->enemy_sprites[2].end[5].y = 238;
src/init_sprites.c:	env->enemy_sprites[2].size[5].x = 54;
src/init_sprites.c:	env->enemy_sprites[2].size[5].y = 32;
src/init_sprites.c:	env->enemy_sprites[2].reversed[5] = 1;
src/init_sprites.c:	env->enemy_sprites[2].start[6].x = 236;
src/init_sprites.c:	env->enemy_sprites[2].start[6].y = 207;
src/init_sprites.c:	env->enemy_sprites[2].end[6].x = 302;
src/init_sprites.c:	env->enemy_sprites[2].end[6].y = 239;
src/init_sprites.c:	env->enemy_sprites[2].size[6].x = 67;
src/init_sprites.c:	env->enemy_sprites[2].size[6].y = 33;
src/init_sprites.c:	env->enemy_sprites[2].reversed[6] = 1;
src/init_sprites.c:	env->enemy_sprites[2].start[7].x = 132;
src/init_sprites.c:	env->enemy_sprites[2].start[7].y = 207;
src/init_sprites.c:	env->enemy_sprites[2].end[7].x = 191;
src/init_sprites.c:	env->enemy_sprites[2].end[7].y = 242;
src/init_sprites.c:	env->enemy_sprites[2].size[7].x = 60;
src/init_sprites.c:	env->enemy_sprites[2].size[7].y = 36;
src/init_sprites.c:	env->enemy_sprites[2].reversed[7] = 1;
src/init_sprites.c:	env->enemy_sprites[3].texture = 23;
src/init_sprites.c:	env->enemy_sprites[3].death_counterpart = 4;
src/init_sprites.c:	env->enemy_sprites[3].pursuit_sprite = 2;
src/init_sprites.c:	env->enemy_sprites[3].firing_sprite = 2;
src/init_sprites.c:	env->enemy_sprites[3].rest_sprite = 0;
src/init_sprites.c:	env->enemy_sprites[3].curr_sprite = 3;
src/init_sprites.c:	env->enemy_sprites[3].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[3].nb_death_sprites = 6;
src/init_sprites.c:	env->enemy_sprites[3].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[3].start[0].y = 284;
src/init_sprites.c:	env->enemy_sprites[3].end[0].x = 87;
src/init_sprites.c:	env->enemy_sprites[3].end[0].y = 327;
src/init_sprites.c:	env->enemy_sprites[3].size[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[3].size[0].y = 44;
src/init_sprites.c:	env->enemy_sprites[3].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[3].start[1].x = 132;
src/init_sprites.c:	env->enemy_sprites[3].start[1].y = 284;
src/init_sprites.c:	env->enemy_sprites[3].end[1].x = 184;
src/init_sprites.c:	env->enemy_sprites[3].end[1].y = 319;
src/init_sprites.c:	env->enemy_sprites[3].size[1].x = 53;
src/init_sprites.c:	env->enemy_sprites[3].size[1].y = 36;
src/init_sprites.c:	env->enemy_sprites[3].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[3].start[2].x = 229;
src/init_sprites.c:	env->enemy_sprites[3].start[2].y = 284;
src/init_sprites.c:	env->enemy_sprites[3].end[2].x = 295;
src/init_sprites.c:	env->enemy_sprites[3].end[2].y = 316;
src/init_sprites.c:	env->enemy_sprites[3].size[2].x = 67;
src/init_sprites.c:	env->enemy_sprites[3].size[2].y = 33;
src/init_sprites.c:	env->enemy_sprites[3].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[3].start[3].x = 340;
src/init_sprites.c:	env->enemy_sprites[3].start[3].y = 284;
src/init_sprites.c:	env->enemy_sprites[3].end[3].x = 387;
src/init_sprites.c:	env->enemy_sprites[3].end[3].y = 315;
src/init_sprites.c:	env->enemy_sprites[3].size[3].x = 48;
src/init_sprites.c:	env->enemy_sprites[3].size[3].y = 32;
src/init_sprites.c:	env->enemy_sprites[3].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[3].start[4].x = 433;
src/init_sprites.c:	env->enemy_sprites[3].start[4].y = 284;
src/init_sprites.c:	env->enemy_sprites[3].end[4].x = 475;
src/init_sprites.c:	env->enemy_sprites[3].end[4].y = 309;
src/init_sprites.c:	env->enemy_sprites[3].size[4].x = 44;
src/init_sprites.c:	env->enemy_sprites[3].size[4].y = 26;
src/init_sprites.c:	env->enemy_sprites[3].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[3].start[5].x = 340;
src/init_sprites.c:	env->enemy_sprites[3].start[5].y = 284;
src/init_sprites.c:	env->enemy_sprites[3].end[5].x = 387;
src/init_sprites.c:	env->enemy_sprites[3].end[5].y = 315;
src/init_sprites.c:	env->enemy_sprites[3].size[5].x = 48;
src/init_sprites.c:	env->enemy_sprites[3].size[5].y = 32;
src/init_sprites.c:	env->enemy_sprites[3].reversed[5] = 1;
src/init_sprites.c:	env->enemy_sprites[3].start[6].x = 229;
src/init_sprites.c:	env->enemy_sprites[3].start[6].y = 284;
src/init_sprites.c:	env->enemy_sprites[3].end[6].x = 295;
src/init_sprites.c:	env->enemy_sprites[3].end[6].y = 316;
src/init_sprites.c:	env->enemy_sprites[3].size[6].x = 67;
src/init_sprites.c:	env->enemy_sprites[3].size[6].y = 33;
src/init_sprites.c:	env->enemy_sprites[3].reversed[6] = 1;
src/init_sprites.c:	env->enemy_sprites[3].start[7].x = 132;
src/init_sprites.c:	env->enemy_sprites[3].start[7].y = 284;
src/init_sprites.c:	env->enemy_sprites[3].end[7].x = 184;
src/init_sprites.c:	env->enemy_sprites[3].end[7].y = 319;
src/init_sprites.c:	env->enemy_sprites[3].size[7].x = 53;
src/init_sprites.c:	env->enemy_sprites[3].size[7].y = 36;
src/init_sprites.c:	env->enemy_sprites[3].reversed[7] = 1;
src/init_sprites.c:	env->enemy_sprites[4].texture = 23;
src/init_sprites.c:	env->enemy_sprites[4].death_counterpart = 4;
src/init_sprites.c:	env->enemy_sprites[4].pursuit_sprite = 4;
src/init_sprites.c:	env->enemy_sprites[4].firing_sprite = 4;
src/init_sprites.c:	env->enemy_sprites[4].rest_sprite = 4;
src/init_sprites.c:	env->enemy_sprites[4].curr_sprite = 4;
src/init_sprites.c:	env->enemy_sprites[4].oriented = 0;
src/init_sprites.c:	env->enemy_sprites[4].nb_death_sprites = 6;
src/init_sprites.c:	env->enemy_sprites[4].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[4].start[0].y = 448;
src/init_sprites.c:	env->enemy_sprites[4].end[0].x = 77;
src/init_sprites.c:	env->enemy_sprites[4].end[0].y = 498;
src/init_sprites.c:	env->enemy_sprites[4].size[0].x = 34;
src/init_sprites.c:	env->enemy_sprites[4].size[0].y = 51;
src/init_sprites.c:	env->enemy_sprites[4].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[4].start[1].x = 122;
src/init_sprites.c:	env->enemy_sprites[4].start[1].y = 448;
src/init_sprites.c:	env->enemy_sprites[4].end[1].x = 157;
src/init_sprites.c:	env->enemy_sprites[4].end[1].y = 500;
src/init_sprites.c:	env->enemy_sprites[4].size[1].x = 36;
src/init_sprites.c:	env->enemy_sprites[4].size[1].y = 53;
src/init_sprites.c:	env->enemy_sprites[4].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[4].start[2].x = 202;
src/init_sprites.c:	env->enemy_sprites[4].start[2].y = 448;
src/init_sprites.c:	env->enemy_sprites[4].end[2].x = 246;
src/init_sprites.c:	env->enemy_sprites[4].end[2].y = 495;
src/init_sprites.c:	env->enemy_sprites[4].size[2].x = 45;
src/init_sprites.c:	env->enemy_sprites[4].size[2].y = 48;
src/init_sprites.c:	env->enemy_sprites[4].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[4].start[3].x = 291;
src/init_sprites.c:	env->enemy_sprites[4].start[3].y = 448;
src/init_sprites.c:	env->enemy_sprites[4].end[3].x = 358;
src/init_sprites.c:	env->enemy_sprites[4].end[3].y = 507;
src/init_sprites.c:	env->enemy_sprites[4].size[3].x = 68;
src/init_sprites.c:	env->enemy_sprites[4].size[3].y = 60;
src/init_sprites.c:	env->enemy_sprites[4].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[4].start[4].x = 403;
src/init_sprites.c:	env->enemy_sprites[4].start[4].y = 448;
src/init_sprites.c:	env->enemy_sprites[4].end[4].x = 490;
src/init_sprites.c:	env->enemy_sprites[4].end[4].y = 519;
src/init_sprites.c:	env->enemy_sprites[4].size[4].x = 88;
src/init_sprites.c:	env->enemy_sprites[4].size[4].y = 72;
src/init_sprites.c:	env->enemy_sprites[4].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[4].start[5].x = 535;
src/init_sprites.c:	env->enemy_sprites[4].start[5].y = 448;
src/init_sprites.c:	env->enemy_sprites[4].end[5].x = 637;
src/init_sprites.c:	env->enemy_sprites[4].end[5].y = 537;
src/init_sprites.c:	env->enemy_sprites[4].size[5].x = 103;
src/init_sprites.c:	env->enemy_sprites[4].size[5].y = 90;
src/init_sprites.c:	env->enemy_sprites[4].reversed[5] = 0;
src/init_sprites.c:	env->enemy_sprites[5].texture = 24;
src/init_sprites.c:	env->enemy_sprites[5].death_counterpart = 12;
src/init_sprites.c:	env->enemy_sprites[5].pursuit_sprite = 6;
src/init_sprites.c:	env->enemy_sprites[5].firing_sprite = 9;
src/init_sprites.c:	env->enemy_sprites[5].rest_sprite = 6;
src/init_sprites.c:	env->enemy_sprites[5].curr_sprite = 5;
src/init_sprites.c:	//env->enemy_sprites[5].curr_sprite = 5;
src/init_sprites.c:	env->enemy_sprites[5].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[5].nb_death_sprites = 8;
src/init_sprites.c:	env->enemy_sprites[5].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[5].start[0].y = 33;
src/init_sprites.c:	env->enemy_sprites[5].end[0].x = 125;
src/init_sprites.c:	env->enemy_sprites[5].end[0].y = 140;
src/init_sprites.c:	env->enemy_sprites[5].size[0].x = 82;
src/init_sprites.c:	env->enemy_sprites[5].size[0].y = 108;
src/init_sprites.c:	env->enemy_sprites[5].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[5].start[1].x = 925;
src/init_sprites.c:	env->enemy_sprites[5].start[1].y = 33;
src/init_sprites.c:	env->enemy_sprites[5].end[1].x = 999;
src/init_sprites.c:	env->enemy_sprites[5].end[1].y = 141;
src/init_sprites.c:	env->enemy_sprites[5].size[1].x = 75;
src/init_sprites.c:	env->enemy_sprites[5].size[1].y = 109;
src/init_sprites.c:	env->enemy_sprites[5].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[5].start[2].x = 798;
src/init_sprites.c:	env->enemy_sprites[5].start[2].y = 33;
src/init_sprites.c:	env->enemy_sprites[5].end[2].x = 880;
src/init_sprites.c:	env->enemy_sprites[5].end[2].y = 141;
src/init_sprites.c:	env->enemy_sprites[5].size[2].x = 84;
src/init_sprites.c:	env->enemy_sprites[5].size[2].y = 109;
src/init_sprites.c:	env->enemy_sprites[5].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[5].start[3].x = 670;
src/init_sprites.c:	env->enemy_sprites[5].start[3].y = 33;
src/init_sprites.c:	env->enemy_sprites[5].end[3].x = 752;
src/init_sprites.c:	env->enemy_sprites[5].end[3].y = 142;
src/init_sprites.c:	env->enemy_sprites[5].size[3].x = 83;
src/init_sprites.c:	env->enemy_sprites[5].size[3].y = 110;
src/init_sprites.c:	env->enemy_sprites[5].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[5].start[4].x = 544;
src/init_sprites.c:	env->enemy_sprites[5].start[4].y = 33;
src/init_sprites.c:	env->enemy_sprites[5].end[4].x = 625;
src/init_sprites.c:	env->enemy_sprites[5].end[4].y = 142;
src/init_sprites.c:	env->enemy_sprites[5].size[4].x = 82;
src/init_sprites.c:	env->enemy_sprites[5].size[4].y = 110;
src/init_sprites.c:	env->enemy_sprites[5].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[5].start[5].x = 424;
src/init_sprites.c:	env->enemy_sprites[5].start[5].y = 33;
src/init_sprites.c:	env->enemy_sprites[5].end[5].x = 499;
src/init_sprites.c:	env->enemy_sprites[5].end[5].y = 142;
src/init_sprites.c:	env->enemy_sprites[5].size[5].x = 76;
src/init_sprites.c:	env->enemy_sprites[5].size[5].y = 110;
src/init_sprites.c:	env->enemy_sprites[5].reversed[5] = 0;
src/init_sprites.c:	env->enemy_sprites[5].start[6].x = 301;
src/init_sprites.c:	env->enemy_sprites[5].start[6].y = 33;
src/init_sprites.c:	env->enemy_sprites[5].end[6].x = 379;
src/init_sprites.c:	env->enemy_sprites[5].end[6].y = 139;
src/init_sprites.c:	env->enemy_sprites[5].size[6].x = 79;
src/init_sprites.c:	env->enemy_sprites[5].size[6].y = 107;
src/init_sprites.c:	env->enemy_sprites[5].reversed[6] = 0;
src/init_sprites.c:	env->enemy_sprites[5].start[7].x = 170;
src/init_sprites.c:	env->enemy_sprites[5].start[7].y = 33;
src/init_sprites.c:	env->enemy_sprites[5].end[7].x = 256;
src/init_sprites.c:	env->enemy_sprites[5].end[7].y = 139;
src/init_sprites.c:	env->enemy_sprites[5].size[7].x = 87;
src/init_sprites.c:	env->enemy_sprites[5].size[7].y = 107;
src/init_sprites.c:	env->enemy_sprites[5].reversed[7] = 0;
src/init_sprites.c:	env->enemy_sprites[6].texture = 24;
src/init_sprites.c:	env->enemy_sprites[6].death_counterpart = 12;
src/init_sprites.c:	env->enemy_sprites[6].pursuit_sprite = 7;
src/init_sprites.c:	env->enemy_sprites[6].firing_sprite = 9;
src/init_sprites.c:	//env->enemy_sprites[6].rest_sprite = 7;
src/init_sprites.c:	env->enemy_sprites[6].rest_sprite = 6;
src/init_sprites.c:	env->enemy_sprites[6].curr_sprite = 6;
src/init_sprites.c:	env->enemy_sprites[6].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[6].nb_death_sprites = 8;
src/init_sprites.c:	env->enemy_sprites[6].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[6].start[0].y = 176;
src/init_sprites.c:	env->enemy_sprites[6].end[0].x = 128;
src/init_sprites.c:	env->enemy_sprites[6].end[0].y = 284;
src/init_sprites.c:	env->enemy_sprites[6].size[0].x = 85;
src/init_sprites.c:	env->enemy_sprites[6].size[0].y = 109;
src/init_sprites.c:	env->enemy_sprites[6].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[6].start[1].x = 873;
src/init_sprites.c:	env->enemy_sprites[6].start[1].y = 176;
src/init_sprites.c:	env->enemy_sprites[6].end[1].x = 955;
src/init_sprites.c:	env->enemy_sprites[6].end[1].y = 284;
src/init_sprites.c:	env->enemy_sprites[6].size[1].x = 83;
src/init_sprites.c:	env->enemy_sprites[6].size[1].y = 109;
src/init_sprites.c:	env->enemy_sprites[6].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[6].start[2].x = 770;
src/init_sprites.c:	env->enemy_sprites[6].start[2].y = 176;
src/init_sprites.c:	env->enemy_sprites[6].end[2].x = 828;
src/init_sprites.c:	env->enemy_sprites[6].end[2].y = 284;
src/init_sprites.c:	env->enemy_sprites[6].size[2].x = 59;
src/init_sprites.c:	env->enemy_sprites[6].size[2].y = 109;
src/init_sprites.c:	env->enemy_sprites[6].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[6].start[3].x = 651;
src/init_sprites.c:	env->enemy_sprites[6].start[3].y = 176;
src/init_sprites.c:	env->enemy_sprites[6].end[3].x = 725;
src/init_sprites.c:	env->enemy_sprites[6].end[3].y = 283;
src/init_sprites.c:	env->enemy_sprites[6].size[3].x = 75;
src/init_sprites.c:	env->enemy_sprites[6].size[3].y = 108;
src/init_sprites.c:	env->enemy_sprites[6].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[6].start[4].x = 523;
src/init_sprites.c:	env->enemy_sprites[6].start[4].y = 176;
src/init_sprites.c:	env->enemy_sprites[6].end[4].x = 606;
src/init_sprites.c:	env->enemy_sprites[6].end[4].y = 283;
src/init_sprites.c:	env->enemy_sprites[6].size[4].x = 84;
src/init_sprites.c:	env->enemy_sprites[6].size[4].y = 108;
src/init_sprites.c:	env->enemy_sprites[6].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[6].start[5].x = 394;
src/init_sprites.c:	env->enemy_sprites[6].start[5].y = 176;
src/init_sprites.c:	env->enemy_sprites[6].end[5].x = 478;
src/init_sprites.c:	env->enemy_sprites[6].end[5].y = 285;
src/init_sprites.c:	env->enemy_sprites[6].size[5].x = 85;
src/init_sprites.c:	env->enemy_sprites[6].size[5].y = 110;
src/init_sprites.c:	env->enemy_sprites[6].reversed[5] = 0;
src/init_sprites.c:	env->enemy_sprites[6].start[6].x = 291;
src/init_sprites.c:	env->enemy_sprites[6].start[6].y = 176;
src/init_sprites.c:	env->enemy_sprites[6].end[6].x = 349;
src/init_sprites.c:	env->enemy_sprites[6].end[6].y = 283;
src/init_sprites.c:	env->enemy_sprites[6].size[6].x = 59;
src/init_sprites.c:	env->enemy_sprites[6].size[6].y = 108;
src/init_sprites.c:	env->enemy_sprites[6].reversed[6] = 0;
src/init_sprites.c:	env->enemy_sprites[6].start[7].x = 173;
src/init_sprites.c:	env->enemy_sprites[6].start[7].y = 176;
src/init_sprites.c:	env->enemy_sprites[6].end[7].x = 246;
src/init_sprites.c:	env->enemy_sprites[6].end[7].y = 283;
src/init_sprites.c:	env->enemy_sprites[6].size[7].x = 74;
src/init_sprites.c:	env->enemy_sprites[6].size[7].y = 108;
src/init_sprites.c:	env->enemy_sprites[6].reversed[7] = 0;
src/init_sprites.c:	env->enemy_sprites[7].texture = 24;
src/init_sprites.c:	env->enemy_sprites[7].death_counterpart = 12;
src/init_sprites.c:	env->enemy_sprites[7].pursuit_sprite = 8;
src/init_sprites.c:	env->enemy_sprites[7].firing_sprite = 9;
src/init_sprites.c:	env->enemy_sprites[7].rest_sprite = 8;
src/init_sprites.c:	env->enemy_sprites[7].curr_sprite = 7;
src/init_sprites.c:	env->enemy_sprites[7].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[7].nb_death_sprites = 8;
src/init_sprites.c:	env->enemy_sprites[7].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[7].start[0].y = 319;
src/init_sprites.c:	env->enemy_sprites[7].end[0].x = 125;
src/init_sprites.c:	env->enemy_sprites[7].end[0].y = 428;
src/init_sprites.c:	env->enemy_sprites[7].size[0].x = 82;
src/init_sprites.c:	env->enemy_sprites[7].size[0].y = 110;
src/init_sprites.c:	env->enemy_sprites[7].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[7].start[1].x = 926;
src/init_sprites.c:	env->enemy_sprites[7].start[1].y = 319;
src/init_sprites.c:	env->enemy_sprites[7].end[1].x = 1020;
src/init_sprites.c:	env->enemy_sprites[7].end[1].y = 430;
src/init_sprites.c:	env->enemy_sprites[7].size[1].x = 95;
src/init_sprites.c:	env->enemy_sprites[7].size[1].y = 112;
src/init_sprites.c:	env->enemy_sprites[7].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[7].start[2].x = 806;
src/init_sprites.c:	env->enemy_sprites[7].start[2].y = 319;
src/init_sprites.c:	env->enemy_sprites[7].end[2].x = 881;
src/init_sprites.c:	env->enemy_sprites[7].end[2].y = 429;
src/init_sprites.c:	env->enemy_sprites[7].size[2].x = 76;
src/init_sprites.c:	env->enemy_sprites[7].size[2].y = 111;
src/init_sprites.c:	env->enemy_sprites[7].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[7].start[3].x = 682;
src/init_sprites.c:	env->enemy_sprites[7].start[3].y = 319;
src/init_sprites.c:	env->enemy_sprites[7].end[3].x = 761;
src/init_sprites.c:	env->enemy_sprites[7].end[3].y = 428;
src/init_sprites.c:	env->enemy_sprites[7].size[3].x = 80;
src/init_sprites.c:	env->enemy_sprites[7].size[3].y = 110;
src/init_sprites.c:	env->enemy_sprites[7].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[7].start[4].x = 555;
src/init_sprites.c:	env->enemy_sprites[7].start[4].y = 319;
src/init_sprites.c:	env->enemy_sprites[7].end[4].x = 637;
src/init_sprites.c:	env->enemy_sprites[7].end[4].y = 428;
src/init_sprites.c:	env->enemy_sprites[7].size[4].x = 83;
src/init_sprites.c:	env->enemy_sprites[7].size[4].y = 110;
src/init_sprites.c:	env->enemy_sprites[7].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[7].start[5].x = 419;
src/init_sprites.c:	env->enemy_sprites[7].start[5].y = 319;
src/init_sprites.c:	env->enemy_sprites[7].end[5].x = 510;
src/init_sprites.c:	env->enemy_sprites[7].end[5].y = 429;
src/init_sprites.c:	env->enemy_sprites[7].size[5].x = 92;
src/init_sprites.c:	env->enemy_sprites[7].size[5].y = 111;
src/init_sprites.c:	env->enemy_sprites[7].reversed[5] = 0;
src/init_sprites.c:	env->enemy_sprites[7].start[6].x = 295;
src/init_sprites.c:	env->enemy_sprites[7].start[6].y = 319;
src/init_sprites.c:	env->enemy_sprites[7].end[6].x = 374;
src/init_sprites.c:	env->enemy_sprites[7].end[6].y = 425;
src/init_sprites.c:	env->enemy_sprites[7].size[6].x = 80;
src/init_sprites.c:	env->enemy_sprites[7].size[6].y = 107;
src/init_sprites.c:	env->enemy_sprites[7].reversed[6] = 0;
src/init_sprites.c:	env->enemy_sprites[7].start[7].x = 170;
src/init_sprites.c:	env->enemy_sprites[7].start[7].y = 319;
src/init_sprites.c:	env->enemy_sprites[7].end[7].x = 250;
src/init_sprites.c:	env->enemy_sprites[7].end[7].y = 427;
src/init_sprites.c:	env->enemy_sprites[7].size[7].x = 81;
src/init_sprites.c:	env->enemy_sprites[7].size[7].y = 109;
src/init_sprites.c:	env->enemy_sprites[7].reversed[7] = 0;
src/init_sprites.c:	env->enemy_sprites[8].texture = 24;
src/init_sprites.c:	env->enemy_sprites[8].death_counterpart = 12;
src/init_sprites.c:	env->enemy_sprites[8].pursuit_sprite = 5;
src/init_sprites.c:	env->enemy_sprites[8].firing_sprite = 9;
src/init_sprites.c:	env->enemy_sprites[8].rest_sprite = 5;
src/init_sprites.c:	env->enemy_sprites[8].curr_sprite = 8;
src/init_sprites.c:	env->enemy_sprites[8].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[8].nb_death_sprites = 8;
src/init_sprites.c:	env->enemy_sprites[8].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[8].start[0].y = 464;
src/init_sprites.c:	env->enemy_sprites[8].end[0].x = 128;
src/init_sprites.c:	env->enemy_sprites[8].end[0].y = 572;
src/init_sprites.c:	env->enemy_sprites[8].size[0].x = 85;
src/init_sprites.c:	env->enemy_sprites[8].size[0].y = 109;
src/init_sprites.c:	env->enemy_sprites[8].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[8].start[1].x = 873;
src/init_sprites.c:	env->enemy_sprites[8].start[1].y = 464;
src/init_sprites.c:	env->enemy_sprites[8].end[1].x = 955;
src/init_sprites.c:	env->enemy_sprites[8].end[1].y = 574;
src/init_sprites.c:	env->enemy_sprites[8].size[1].x = 83;
src/init_sprites.c:	env->enemy_sprites[8].size[1].y = 111;
src/init_sprites.c:	env->enemy_sprites[8].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[8].start[2].x = 770;
src/init_sprites.c:	env->enemy_sprites[8].start[2].y = 464;
src/init_sprites.c:	env->enemy_sprites[8].end[2].x = 828;
src/init_sprites.c:	env->enemy_sprites[8].end[2].y = 574;
src/init_sprites.c:	env->enemy_sprites[8].size[2].x = 59;
src/init_sprites.c:	env->enemy_sprites[8].size[2].y = 111;
src/init_sprites.c:	env->enemy_sprites[8].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[8].start[3].x = 651;
src/init_sprites.c:	env->enemy_sprites[8].start[3].y = 464;
src/init_sprites.c:	env->enemy_sprites[8].end[3].x = 725;
src/init_sprites.c:	env->enemy_sprites[8].end[3].y = 573;
src/init_sprites.c:	env->enemy_sprites[8].size[3].x = 75;
src/init_sprites.c:	env->enemy_sprites[8].size[3].y = 110;
src/init_sprites.c:	env->enemy_sprites[8].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[8].start[4].x = 523;
src/init_sprites.c:	env->enemy_sprites[8].start[4].y = 464;
src/init_sprites.c:	env->enemy_sprites[8].end[4].x = 606;
src/init_sprites.c:	env->enemy_sprites[8].end[4].y = 572;
src/init_sprites.c:	env->enemy_sprites[8].size[4].x = 84;
src/init_sprites.c:	env->enemy_sprites[8].size[4].y = 109;
src/init_sprites.c:	env->enemy_sprites[8].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[8].start[5].x = 394;
src/init_sprites.c:	env->enemy_sprites[8].start[5].y = 464;
src/init_sprites.c:	env->enemy_sprites[8].end[5].x = 478;
src/init_sprites.c:	env->enemy_sprites[8].end[5].y = 573;
src/init_sprites.c:	env->enemy_sprites[8].size[5].x = 85;
src/init_sprites.c:	env->enemy_sprites[8].size[5].y = 110;
src/init_sprites.c:	env->enemy_sprites[8].reversed[5] = 0;
src/init_sprites.c:	env->enemy_sprites[8].start[6].x = 291;
src/init_sprites.c:	env->enemy_sprites[8].start[6].y = 464;
src/init_sprites.c:	env->enemy_sprites[8].end[6].x = 349;
src/init_sprites.c:	env->enemy_sprites[8].end[6].y = 571;
src/init_sprites.c:	env->enemy_sprites[8].size[6].x = 59;
src/init_sprites.c:	env->enemy_sprites[8].size[6].y = 108;
src/init_sprites.c:	env->enemy_sprites[8].reversed[6] = 0;
src/init_sprites.c:	env->enemy_sprites[8].start[7].x = 173;
src/init_sprites.c:	env->enemy_sprites[8].start[7].y = 464;
src/init_sprites.c:	env->enemy_sprites[8].end[7].x = 246;
src/init_sprites.c:	env->enemy_sprites[8].end[7].y = 571;
src/init_sprites.c:	env->enemy_sprites[8].size[7].x = 74;
src/init_sprites.c:	env->enemy_sprites[8].size[7].y = 108;
src/init_sprites.c:	env->enemy_sprites[8].reversed[7] = 0;
src/init_sprites.c:	env->enemy_sprites[9].texture = 24;
src/init_sprites.c:	env->enemy_sprites[9].death_counterpart = 12;
src/init_sprites.c:	env->enemy_sprites[9].pursuit_sprite = 5;
src/init_sprites.c:	env->enemy_sprites[9].firing_sprite = 10;
src/init_sprites.c:	env->enemy_sprites[9].rest_sprite = 5;
src/init_sprites.c:	env->enemy_sprites[9].curr_sprite = 9;
src/init_sprites.c:	env->enemy_sprites[9].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[9].nb_death_sprites = 8;
src/init_sprites.c:	env->enemy_sprites[9].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[9].start[0].y = 608;
src/init_sprites.c:	env->enemy_sprites[9].end[0].x = 129;
src/init_sprites.c:	env->enemy_sprites[9].end[0].y = 717;
src/init_sprites.c:	env->enemy_sprites[9].size[0].x = 86;
src/init_sprites.c:	env->enemy_sprites[9].size[0].y = 110;
src/init_sprites.c:	env->enemy_sprites[9].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[9].start[1].x = 174;
src/init_sprites.c:	env->enemy_sprites[9].start[1].y = 608;
src/init_sprites.c:	env->enemy_sprites[9].end[1].x = 256;
src/init_sprites.c:	env->enemy_sprites[9].end[1].y = 717;
src/init_sprites.c:	env->enemy_sprites[9].size[1].x = 83;
src/init_sprites.c:	env->enemy_sprites[9].size[1].y = 110;
src/init_sprites.c:	env->enemy_sprites[9].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[9].start[2].x = 301;
src/init_sprites.c:	env->enemy_sprites[9].start[2].y = 608;
src/init_sprites.c:	env->enemy_sprites[9].end[2].x = 405;
src/init_sprites.c:	env->enemy_sprites[9].end[2].y = 717;
src/init_sprites.c:	env->enemy_sprites[9].size[2].x = 105;
src/init_sprites.c:	env->enemy_sprites[9].size[2].y = 110;
src/init_sprites.c:	env->enemy_sprites[9].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[9].start[3].x = 450;
src/init_sprites.c:	env->enemy_sprites[9].start[3].y = 608;
src/init_sprites.c:	env->enemy_sprites[9].end[3].x = 555;
src/init_sprites.c:	env->enemy_sprites[9].end[3].y = 716;
src/init_sprites.c:	env->enemy_sprites[9].size[3].x = 106;
src/init_sprites.c:	env->enemy_sprites[9].size[3].y = 109;
src/init_sprites.c:	env->enemy_sprites[9].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[9].start[4].x = 600;
src/init_sprites.c:	env->enemy_sprites[9].start[4].y = 608;
src/init_sprites.c:	env->enemy_sprites[9].end[4].x = 684;
src/init_sprites.c:	env->enemy_sprites[9].end[4].y = 717;
src/init_sprites.c:	env->enemy_sprites[9].size[4].x = 85;
src/init_sprites.c:	env->enemy_sprites[9].size[4].y = 110;
src/init_sprites.c:	env->enemy_sprites[9].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[9].start[5].x = 729;
src/init_sprites.c:	env->enemy_sprites[9].start[5].y = 608;
src/init_sprites.c:	env->enemy_sprites[9].end[5].x = 810;
src/init_sprites.c:	env->enemy_sprites[9].end[5].y = 717;
src/init_sprites.c:	env->enemy_sprites[9].size[5].x = 82;
src/init_sprites.c:	env->enemy_sprites[9].size[5].y = 110;
src/init_sprites.c:	env->enemy_sprites[9].reversed[5] = 0;
src/init_sprites.c:	env->enemy_sprites[9].start[6].x = 855;
src/init_sprites.c:	env->enemy_sprites[9].start[6].y = 608;
src/init_sprites.c:	env->enemy_sprites[9].end[6].x = 951;
src/init_sprites.c:	env->enemy_sprites[9].end[6].y = 717;
src/init_sprites.c:	env->enemy_sprites[9].size[6].x = 97;
src/init_sprites.c:	env->enemy_sprites[9].size[6].y = 110;
src/init_sprites.c:	env->enemy_sprites[9].reversed[6] = 0;
src/init_sprites.c:	env->enemy_sprites[9].start[7].x = 996;
src/init_sprites.c:	env->enemy_sprites[9].start[7].y = 608;
src/init_sprites.c:	env->enemy_sprites[9].end[7].x = 1110;
src/init_sprites.c:	env->enemy_sprites[9].end[7].y = 717;
src/init_sprites.c:	env->enemy_sprites[9].size[7].x = 115;
src/init_sprites.c:	env->enemy_sprites[9].size[7].y = 110;
src/init_sprites.c:	env->enemy_sprites[9].reversed[7] = 0;
src/init_sprites.c:	env->enemy_sprites[10].texture = 24;
src/init_sprites.c:	env->enemy_sprites[10].death_counterpart = 12;
src/init_sprites.c:	env->enemy_sprites[10].pursuit_sprite = 5;
src/init_sprites.c:	env->enemy_sprites[10].firing_sprite = 11;
src/init_sprites.c:	env->enemy_sprites[10].rest_sprite = 5;
src/init_sprites.c:	env->enemy_sprites[10].curr_sprite = 10;
src/init_sprites.c:	env->enemy_sprites[10].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[10].nb_death_sprites = 8;
src/init_sprites.c:	env->enemy_sprites[10].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[10].start[0].y = 751;
src/init_sprites.c:	env->enemy_sprites[10].end[0].x = 142;
src/init_sprites.c:	env->enemy_sprites[10].end[0].y = 860;
src/init_sprites.c:	env->enemy_sprites[10].size[0].x = 99;
src/init_sprites.c:	env->enemy_sprites[10].size[0].y = 110;
src/init_sprites.c:	env->enemy_sprites[10].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[10].start[1].x = 187;
src/init_sprites.c:	env->enemy_sprites[10].start[1].y = 751;
src/init_sprites.c:	env->enemy_sprites[10].end[1].x = 280;
src/init_sprites.c:	env->enemy_sprites[10].end[1].y = 860;
src/init_sprites.c:	env->enemy_sprites[10].size[1].x = 94;
src/init_sprites.c:	env->enemy_sprites[10].size[1].y = 110;
src/init_sprites.c:	env->enemy_sprites[10].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[10].start[2].x = 325;
src/init_sprites.c:	env->enemy_sprites[10].start[2].y = 751;
src/init_sprites.c:	env->enemy_sprites[10].end[2].x = 445;
src/init_sprites.c:	env->enemy_sprites[10].end[2].y = 860;
src/init_sprites.c:	env->enemy_sprites[10].size[2].x = 121;
src/init_sprites.c:	env->enemy_sprites[10].size[2].y = 110;
src/init_sprites.c:	env->enemy_sprites[10].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[10].start[3].x = 490;
src/init_sprites.c:	env->enemy_sprites[10].start[3].y = 751;
src/init_sprites.c:	env->enemy_sprites[10].end[3].x = 608;
src/init_sprites.c:	env->enemy_sprites[10].end[3].y = 859;
src/init_sprites.c:	env->enemy_sprites[10].size[3].x = 119;
src/init_sprites.c:	env->enemy_sprites[10].size[3].y = 109;
src/init_sprites.c:	env->enemy_sprites[10].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[10].start[4].x = 653;
src/init_sprites.c:	env->enemy_sprites[10].start[4].y = 751;
src/init_sprites.c:	env->enemy_sprites[10].end[4].x = 741;
src/init_sprites.c:	env->enemy_sprites[10].end[4].y = 860;
src/init_sprites.c:	env->enemy_sprites[10].size[4].x = 89;
src/init_sprites.c:	env->enemy_sprites[10].size[4].y = 110;
src/init_sprites.c:	env->enemy_sprites[10].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[10].start[5].x = 786;
src/init_sprites.c:	env->enemy_sprites[10].start[5].y = 751;
src/init_sprites.c:	env->enemy_sprites[10].end[5].x = 878;
src/init_sprites.c:	env->enemy_sprites[10].end[5].y = 860;
src/init_sprites.c:	env->enemy_sprites[10].size[5].x = 93;
src/init_sprites.c:	env->enemy_sprites[10].size[5].y = 110;
src/init_sprites.c:	env->enemy_sprites[10].reversed[5] = 0;
src/init_sprites.c:	env->enemy_sprites[10].start[6].x = 923;
src/init_sprites.c:	env->enemy_sprites[10].start[6].y = 751;
src/init_sprites.c:	env->enemy_sprites[10].end[6].x = 1036;
src/init_sprites.c:	env->enemy_sprites[10].end[6].y = 860;
src/init_sprites.c:	env->enemy_sprites[10].size[6].x = 114;
src/init_sprites.c:	env->enemy_sprites[10].size[6].y = 110;
src/init_sprites.c:	env->enemy_sprites[10].reversed[6] = 0;
src/init_sprites.c:	env->enemy_sprites[10].start[7].x = 1081;
src/init_sprites.c:	env->enemy_sprites[10].start[7].y = 751;
src/init_sprites.c:	env->enemy_sprites[10].end[7].x = 1210;
src/init_sprites.c:	env->enemy_sprites[10].end[7].y = 860;
src/init_sprites.c:	env->enemy_sprites[10].size[7].x = 130;
src/init_sprites.c:	env->enemy_sprites[10].size[7].y = 110;
src/init_sprites.c:	env->enemy_sprites[10].reversed[7] = 0;
src/init_sprites.c:	env->enemy_sprites[11].texture = 24;
src/init_sprites.c:	env->enemy_sprites[11].death_counterpart = 12;
src/init_sprites.c:	env->enemy_sprites[11].pursuit_sprite = 5;
src/init_sprites.c:	env->enemy_sprites[11].firing_sprite = 9;
src/init_sprites.c:	env->enemy_sprites[11].rest_sprite = 5;
src/init_sprites.c:	env->enemy_sprites[11].curr_sprite = 11;
src/init_sprites.c:	env->enemy_sprites[11].oriented = 1;
src/init_sprites.c:	env->enemy_sprites[11].nb_death_sprites = 8;
src/init_sprites.c:	env->enemy_sprites[11].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[11].start[0].y = 894;
src/init_sprites.c:	env->enemy_sprites[11].end[0].x = 166;
src/init_sprites.c:	env->enemy_sprites[11].end[0].y = 1003;
src/init_sprites.c:	env->enemy_sprites[11].size[0].x = 123;
src/init_sprites.c:	env->enemy_sprites[11].size[0].y = 110;
src/init_sprites.c:	env->enemy_sprites[11].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[11].start[1].x = 211;
src/init_sprites.c:	env->enemy_sprites[11].start[1].y = 894;
src/init_sprites.c:	env->enemy_sprites[11].end[1].x = 301;
src/init_sprites.c:	env->enemy_sprites[11].end[1].y = 1004;
src/init_sprites.c:	env->enemy_sprites[11].size[1].x = 91;
src/init_sprites.c:	env->enemy_sprites[11].size[1].y = 111;
src/init_sprites.c:	env->enemy_sprites[11].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[11].start[2].x = 346;
src/init_sprites.c:	env->enemy_sprites[11].start[2].y = 894;
src/init_sprites.c:	env->enemy_sprites[11].end[2].x = 439;
src/init_sprites.c:	env->enemy_sprites[11].end[2].y = 1003;
src/init_sprites.c:	env->enemy_sprites[11].size[2].x = 94;
src/init_sprites.c:	env->enemy_sprites[11].size[2].y = 110;
src/init_sprites.c:	env->enemy_sprites[11].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[11].start[3].x = 484;
src/init_sprites.c:	env->enemy_sprites[11].start[3].y = 894;
src/init_sprites.c:	env->enemy_sprites[11].end[3].x = 601;
src/init_sprites.c:	env->enemy_sprites[11].end[3].y = 1003;
src/init_sprites.c:	env->enemy_sprites[11].size[3].x = 118;
src/init_sprites.c:	env->enemy_sprites[11].size[3].y = 110;
src/init_sprites.c:	env->enemy_sprites[11].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[11].start[4].x = 646;
src/init_sprites.c:	env->enemy_sprites[11].start[4].y = 894;
src/init_sprites.c:	env->enemy_sprites[11].end[4].x = 747;
src/init_sprites.c:	env->enemy_sprites[11].end[4].y = 1002;
src/init_sprites.c:	env->enemy_sprites[11].size[4].x = 102;
src/init_sprites.c:	env->enemy_sprites[11].size[4].y = 109;
src/init_sprites.c:	env->enemy_sprites[11].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[11].start[5].x = 792;
src/init_sprites.c:	env->enemy_sprites[11].start[5].y = 894;
src/init_sprites.c:	env->enemy_sprites[11].end[5].x = 882;
src/init_sprites.c:	env->enemy_sprites[11].end[5].y = 1003;
src/init_sprites.c:	env->enemy_sprites[11].size[5].x = 91;
src/init_sprites.c:	env->enemy_sprites[11].size[5].y = 110;
src/init_sprites.c:	env->enemy_sprites[11].reversed[5] = 0;
src/init_sprites.c:	env->enemy_sprites[11].start[6].x = 927;
src/init_sprites.c:	env->enemy_sprites[11].start[6].y = 894;
src/init_sprites.c:	env->enemy_sprites[11].end[6].x = 1001;
src/init_sprites.c:	env->enemy_sprites[11].end[6].y = 1003;
src/init_sprites.c:	env->enemy_sprites[11].size[6].x = 75;
src/init_sprites.c:	env->enemy_sprites[11].size[6].y = 110;
src/init_sprites.c:	env->enemy_sprites[11].reversed[6] = 0;
src/init_sprites.c:	env->enemy_sprites[11].start[7].x = 1046;
src/init_sprites.c:	env->enemy_sprites[11].start[7].y = 894;
src/init_sprites.c:	env->enemy_sprites[11].end[7].x = 1152;
src/init_sprites.c:	env->enemy_sprites[11].end[7].y = 1002;
src/init_sprites.c:	env->enemy_sprites[11].size[7].x = 107;
src/init_sprites.c:	env->enemy_sprites[11].size[7].y = 109;
src/init_sprites.c:	env->enemy_sprites[11].reversed[7] = 0;
src/init_sprites.c:	env->enemy_sprites[12].texture = 24;
src/init_sprites.c:	env->enemy_sprites[12].death_counterpart = 12;
src/init_sprites.c:	env->enemy_sprites[12].pursuit_sprite = 12;
src/init_sprites.c:	env->enemy_sprites[12].firing_sprite = 12;
src/init_sprites.c:	env->enemy_sprites[12].rest_sprite = 12;
src/init_sprites.c:	env->enemy_sprites[12].curr_sprite = 12;
src/init_sprites.c:	env->enemy_sprites[12].oriented = 0;
src/init_sprites.c:	env->enemy_sprites[12].nb_death_sprites = 8;
src/init_sprites.c:	env->enemy_sprites[12].start[0].x = 44;
src/init_sprites.c:	env->enemy_sprites[12].start[0].y = 1038;
src/init_sprites.c:	env->enemy_sprites[12].end[0].x = 165;
src/init_sprites.c:	env->enemy_sprites[12].end[0].y = 1148;
src/init_sprites.c:	env->enemy_sprites[12].size[0].x = 122;
src/init_sprites.c:	env->enemy_sprites[12].size[0].y = 111;
src/init_sprites.c:	env->enemy_sprites[12].reversed[0] = 0;
src/init_sprites.c:	env->enemy_sprites[12].start[1].x = 210;
src/init_sprites.c:	env->enemy_sprites[12].start[1].y = 1038;
src/init_sprites.c:	env->enemy_sprites[12].end[1].x = 320;
src/init_sprites.c:	env->enemy_sprites[12].end[1].y = 1150;
src/init_sprites.c:	env->enemy_sprites[12].size[1].x = 111;
src/init_sprites.c:	env->enemy_sprites[12].size[1].y = 113;
src/init_sprites.c:	env->enemy_sprites[12].reversed[1] = 0;
src/init_sprites.c:	env->enemy_sprites[12].start[2].x = 365;
src/init_sprites.c:	env->enemy_sprites[12].start[2].y = 1038;
src/init_sprites.c:	env->enemy_sprites[12].end[2].x = 464;
src/init_sprites.c:	env->enemy_sprites[12].end[2].y = 1153;
src/init_sprites.c:	env->enemy_sprites[12].size[2].x = 100;
src/init_sprites.c:	env->enemy_sprites[12].size[2].y = 116;
src/init_sprites.c:	env->enemy_sprites[12].reversed[2] = 0;
src/init_sprites.c:	env->enemy_sprites[12].start[3].x = 509;
src/init_sprites.c:	env->enemy_sprites[12].start[3].y = 1038;
src/init_sprites.c:	env->enemy_sprites[12].end[3].x = 621;
src/init_sprites.c:	env->enemy_sprites[12].end[3].y = 1154;
src/init_sprites.c:	env->enemy_sprites[12].size[3].x = 113;
src/init_sprites.c:	env->enemy_sprites[12].size[3].y = 117;
src/init_sprites.c:	env->enemy_sprites[12].reversed[3] = 0;
src/init_sprites.c:	env->enemy_sprites[12].start[4].x = 666;
src/init_sprites.c:	env->enemy_sprites[12].start[4].y = 1038;
src/init_sprites.c:	env->enemy_sprites[12].end[4].x = 790;
src/init_sprites.c:	env->enemy_sprites[12].end[4].y = 1161;
src/init_sprites.c:	env->enemy_sprites[12].size[4].x = 125;
src/init_sprites.c:	env->enemy_sprites[12].size[4].y = 124;
src/init_sprites.c:	env->enemy_sprites[12].reversed[4] = 0;
src/init_sprites.c:	env->enemy_sprites[12].start[5].x = 836;
src/init_sprites.c:	env->enemy_sprites[12].start[5].y = 1038;
src/init_sprites.c:	env->enemy_sprites[12].end[5].x = 970;
src/init_sprites.c:	env->enemy_sprites[12].end[5].y = 1168;
src/init_sprites.c:	env->enemy_sprites[12].size[5].x = 136;
src/init_sprites.c:	env->enemy_sprites[12].size[5].y = 131;
src/init_sprites.c:	env->enemy_sprites[12].reversed[5] = 0;
src/init_sprites.c:	env->enemy_sprites[12].start[6].x = 1015;
src/init_sprites.c:	env->enemy_sprites[12].start[6].y = 1038;
src/init_sprites.c:	env->enemy_sprites[12].end[6].x = 1155;
src/init_sprites.c:	env->enemy_sprites[12].end[6].y = 1171;
src/init_sprites.c:	env->enemy_sprites[12].size[6].x = 141;
src/init_sprites.c:	env->enemy_sprites[12].size[6].y = 134;
src/init_sprites.c:	env->enemy_sprites[12].reversed[6] = 0;
src/init_sprites.c:	env->enemy_sprites[12].start[7].x = 1200;
src/init_sprites.c:	env->enemy_sprites[12].start[7].y = 1038;
src/init_sprites.c:	env->enemy_sprites[12].end[7].x = 1338;
src/init_sprites.c:	env->enemy_sprites[12].end[7].y = 1171;
src/init_sprites.c:	env->enemy_sprites[12].size[7].x = 139;
src/init_sprites.c:	env->enemy_sprites[12].size[7].y = 134;
src/init_sprites.c:	env->enemy_sprites[12].reversed[7] = 0;
src/init_sprites.c:	env->enemies_main_sprites[0] = LOST_SOUL;
src/init_sprites.c:	env->enemies_main_sprites[1] = CYBER_DEMON;
src/init_ttf.c:	if (!(env->sdl.fonts.amazdoom70 =
src/init_ttf.c:	if (!(env->sdl.fonts.amazdoom50 =
src/init_ttf.c:	if (!(env->sdl.fonts.amazdoom20 =
src/init_ttf.c:	if (!(env->sdl.fonts.alice30 =
src/init_ttf.c:	if (!(env->sdl.fonts.alice70 =
src/init_ttf.c:	if (!(env->sdl.fonts.bebasneue =
src/init_ttf.c:	if (!(env->sdl.fonts.montserrat20 =
src/init_ttf.c:	if (!(env->sdl.fonts.playfair_display20 =
src/init_ttf.c:	if (!(env->sdl.fonts.lato20 =
src/init_ttf.c:	if (!(env->sdl.fonts.lato10 =
src/init_ttf.c:	if (!(env->sdl.fonts.lato15 =
src/init_ttf.c:	if (!(env->sdl.fonts.lato50 =
src/init_weapons.c:	env->weapons[0].possessed = 1;
src/init_weapons.c:    env->weapons[0].weapon_switch = 0;
src/init_weapons.c:    env->weapons[0].first_sprite = 0;
src/init_weapons.c:    env->weapons[0].nb_sprites = 15;
src/init_weapons.c:	env->weapons[0].ammo_type = ROCKET;
src/init_weapons.c:    env->weapons[0].ammo = 20;
src/init_weapons.c:    env->weapons[0].damage = 125;
src/init_weapons.c:    env->weapons[0].max_ammo = 20;
src/init_weapons.c:    env->weapons[0].splash = 1;
src/init_weapons.c:    env->weapons[0].range = 25;
src/init_weapons.c:	env->weapons[1].possessed = 1;
src/init_weapons.c:    env->weapons[1].first_sprite = 15;
src/init_weapons.c:	env->weapons[1].ammo_type = ENERGY;
src/init_weapons.c:    env->weapons[1].nb_sprites = 7;
src/init_weapons.c:    env->weapons[1].ammo = 40;
src/init_weapons.c:    env->weapons[1].damage = 25;
src/init_weapons.c:    env->weapons[1].max_ammo = 40;
src/init_weapons.c:    env->weapons[1].range = 50;
src/init_weapons.c:    env->weapons[1].splash = 0;
src/init_weapons.c:	env->weapons[2].possessed = 1;
src/init_weapons.c:	env->weapons[2].first_sprite = 0;
src/init_weapons.c:	env->weapons[2].nb_sprites = 15;
src/init_weapons.c:	env->weapons[2].ammo_type = SHELL;
src/init_weapons.c:	env->weapons[2].ammo = 25;
src/init_weapons.c:	env->weapons[2].damage = 125;
src/init_weapons.c:	env->weapons[2].max_ammo = 25;
src/init_weapons.c:	env->weapons[2].splash = 1;
src/init_weapons.c:	env->weapons[2].range = 30;
src/input_box.c:	box->pos = new_point(env->h_w - box->size.x / 2, env->h_h - box->size.y / 2);
src/input_box.c:	box->font = env->sdl.fonts.lato20;
src/input_box.c:		env->sdl.texture_pixels[box->pos.x + size.x + 5 + env->w * y] = 0xFF606060;
src/input_box.c:			//env->sdl.texture_pixels[x + y * env->w] = blend_alpha(env->sdl.texture_pixels[x + y * env->w], 0xFF71B3D1, 128);
src/input_box.c:			env->sdl.texture_pixels[x + y * env->w] = 0xFF71B3D1;
src/input_box.c:				env->sdl.texture_pixels[x + env->w * y] = 0xFFFFFFFF;
src/input_box.c:				env->sdl.texture_pixels[x + env->w * y] = 0xFF606060;
src/input_box.c:		|| env->inputs.home
src/input_box.c:		|| env->inputs.end
src/input_box.c:		|| env->inputs.right
src/input_box.c:		|| env->inputs.left
src/input_box.c:		|| env->inputs.left_click)
src/input_box.c:	if (env->inputs.enter
src/input_box.c:		|| env->sdl.event.key.keysym.sym == SDLK_KP_ENTER)
src/input_box.c:		env->inputs.enter = 0;
src/input_box.c:		env->editor.enter_locked = 1;
src/input_box.c:	else if (env->inputs.backspace)
src/input_box.c:		env->inputs.backspace = 0;
src/input_box.c:	else if (env->inputs.del)
src/input_box.c:		env->inputs.del = 0;
src/input_box.c:	else if (env->sdl.event.key.keysym.sym == SDLK_LEFT
src/input_box.c:	else if (env->sdl.event.key.keysym.sym == SDLK_RIGHT
src/input_box.c:	else if (env->inputs.end)
src/input_box.c:	else if (env->inputs.home)
src/input_box.c:	else if (env->inputs.a && env->inputs.lgui)
src/input_box.c:	else if (env->sdl.event.type == SDL_KEYUP && !env->inputs.lgui)
src/input_box.c:		else if (box->type == STRING && env->sdl.event.key.keysym.sym == 's')
src/input_box.c:	else if (env->inputs.left_click)
src/input_box.c:		if (env->sdl.event.type == SDL_MOUSEBUTTONDOWN
src/input_box.c:			&& (env->sdl.mx < box->pos.x
src/input_box.c:			|| env->sdl.mx > box->pos.x + box->size.x
src/input_box.c:			|| env->sdl.my < box->pos.y
src/input_box.c:			|| env->sdl.my > box->pos.y + box->size.y))
src/input_box.c:			if (env->editor.in_game && !env->editor.tab)
src/input_box.c:				SDL_GetRelativeMouseState(&env->sdl.mouse_x,
src/input_box.c:				&env->sdl.mouse_y);
src/input_box.c:				SDL_GetRelativeMouseState(&env->sdl.mouse_x,
src/input_box.c:				&env->sdl.mouse_y);
src/input_box.c:	else if (env->sdl.event.type == SDL_MOUSEBUTTONUP)
src/input_box_checkers.c:	sector = env->sectors[env->selected_floor];
src/input_box_checkers.c:	sector.floor_slope = ft_atof(env->input_box.str);
src/input_box_checkers.c:	if (env->player.sector == env->selected_floor)
src/input_box_checkers.c:		z = get_floor_at_pos(sector, env->player.pos, env);
src/input_box_checkers.c:		if (z + env->player.eyesight + 1 >= get_ceiling_at_pos(sector,
src/input_box_checkers.c:					env->player.pos, env))
src/input_box_checkers.c:	sector = env->sectors[env->selected_ceiling];
src/input_box_checkers.c:	sector.ceiling_slope = ft_atof(env->input_box.str);
src/input_box_checkers.c:	if (env->player.sector == env->selected_ceiling)
src/input_box_checkers.c:		z = get_floor_at_pos(sector, env->player.pos, env);
src/input_box_checkers.c:		if (z + env->player.eyesight + 1 >= get_ceiling_at_pos(sector,
src/input_box_checkers.c:					env->player.pos, env))
src/input_box_checkers.c:	sector = env->sectors[env->selected_floor];
src/input_box_checkers.c:	sector.floor = ft_atof(env->input_box.str);
src/input_box_checkers.c:	if (env->player.sector == env->selected_floor)
src/input_box_checkers.c:		z = get_floor_at_pos(sector, env->player.pos, env);
src/input_box_checkers.c:		if (z + env->player.eyesight + 1 >= get_ceiling_at_pos(sector,
src/input_box_checkers.c:					env->player.pos, env))
src/input_box_checkers.c:	sector = env->sectors[env->selected_ceiling];
src/input_box_checkers.c:	sector.ceiling = ft_atof(env->input_box.str);
src/input_box_checkers.c:	if (env->player.sector == env->selected_ceiling)
src/input_box_checkers.c:		z = get_floor_at_pos(sector, env->player.pos, env);
src/input_box_checkers.c:		if (z + env->player.eyesight + 1 >= get_ceiling_at_pos(sector,
src/input_box_checkers.c:					env->player.pos, env))
src/input_box_checkers.c:	texture = ft_atoi(env->input_box.str);
src/input_box_checkers.c:	sprite = ft_atoi(env->input_box.str);
src/input_box_checkers.c:	scale = ft_atof(env->input_box.str);
src/input_box_checkers.c:	value = ft_atoi(env->input_box.str);
src/input_box_checkers.c:	value = ft_atof(env->input_box.str);
src/input_box_checkers.c:	value = ft_atoi(env->input_box.str);
src/input_box_checkers.c:	value = ft_atoi(env->input_box.str);
src/input_box_checkers.c:	if (intersects_with_wall_no_portal_check(&env->
src/input_box_checkers.c:		sectors[env->editor.selected_sector], env->player.pos, 
src/input_box_checkers.c:	env->editor.selected_wall, env))
src/input_box_mouse.c:		if (env->sdl.mx < box->pos.x + 5 + size2.x)
src/input_box_mouse.c:			if ((box->pos.x + 5 + size2.x) - env->sdl.mx
src/input_box_mouse.c:				> env->sdl.mx - (box->pos.x + 5 + size.x))
src/input_box_updaters.c:	if (env->selected_floor != -1)
src/input_box_updaters.c:		update_sector_slope(env, &env->sectors[env->selected_floor]);
src/input_box_updaters.c:		if (env->player.sector == env->selected_ceiling)
src/input_box_updaters.c:	else if (env->selected_ceiling != -1)
src/input_box_updaters.c:		update_sector_slope(env, &env->sectors[env->selected_ceiling]);
src/input_box_updaters.c:		if (env->player.sector == env->selected_ceiling)
src/input_box_updaters.c:	else if (env->editor.selected_sector != -1)
src/input_box_updaters.c:		update_sector_slope(env, &env->sectors[env->editor.selected_sector]);
src/input_box_updaters.c:		if (env->player.sector == env->editor.selected_sector)
src/input_box_updaters.c:	precompute_floor_sprite_scales(env->selected_floor,
src/input_box_updaters.c:	env->selected_floor_sprite, env);
src/input_box_updaters.c:	precompute_ceiling_sprite_scales(env->selected_ceiling,
src/input_box_updaters.c:	env->selected_ceiling_sprite, env);
src/input_box_updaters.c:	if (env->editor.selected_sector != -1)
src/input_box_updaters.c:		sector = env->editor.selected_sector;
src/input_box_updaters.c:	else if (env->selected_ceiling != -1)
src/input_box_updaters.c:		sector = env->selected_ceiling;
src/input_box_updaters.c:	else if (env->selected_floor != -1)
src/input_box_updaters.c:		sector = env->selected_floor;
src/input_box_updaters.c:	while (i < env->nb_enemies)
src/input_box_updaters.c:		if (env->enemies[i].sector == sector)
src/input_box_updaters.c:			env->enemies[i].brightness =
src/input_box_updaters.c:			env->sectors[sector].brightness;
src/input_box_updaters.c:			env->enemies[i].light_color =
src/input_box_updaters.c:			env->sectors[sector].light_color;
src/input_box_updaters.c:			env->enemies[i].intensity =
src/input_box_updaters.c:			env->sectors[sector].intensity;
src/input_box_updaters.c:	while (i < env->nb_objects)
src/input_box_updaters.c:		if (env->objects[i].sector == sector)
src/input_box_updaters.c:			env->objects[i].brightness =
src/input_box_updaters.c:			env->sectors[sector].brightness;
src/input_box_updaters.c:			env->objects[i].light_color =
src/input_box_updaters.c:			env->sectors[sector].light_color;
src/input_box_updaters.c:			env->objects[i].intensity =
src/input_box_updaters.c:			env->sectors[sector].intensity;
src/input_box_updaters.c:	env->objects[env->selected_object].sector = get_sector(env,
src/input_box_updaters.c:	env->objects[env->selected_object].pos, 
src/input_box_updaters.c:	env->objects[env->selected_object].sector);
src/input_box_updaters.c:	env->objects[env->selected_object].brightness =
src/input_box_updaters.c:	env->sectors[env->objects[env->selected_object].sector].brightness;
src/input_box_updaters.c:	env->objects[env->selected_object].light_color =
src/input_box_updaters.c:	env->sectors[env->objects[env->selected_object].sector].light_color;
src/input_box_updaters.c:	env->objects[env->selected_object].intensity =
src/input_box_updaters.c:	env->sectors[env->objects[env->selected_object].sector].intensity;
src/input_box_updaters.c:	env->enemies[env->selected_enemy].sector = get_sector(env,
src/input_box_updaters.c:	env->enemies[env->selected_enemy].pos, 
src/input_box_updaters.c:	env->enemies[env->selected_enemy].sector);
src/input_box_updaters.c:	env->enemies[env->selected_enemy].brightness =
src/input_box_updaters.c:	env->sectors[env->enemies[env->selected_enemy].sector].brightness;
src/input_box_updaters.c:	env->enemies[env->selected_enemy].light_color =
src/input_box_updaters.c:	env->sectors[env->enemies[env->selected_enemy].sector].light_color;
src/input_box_updaters.c:	env->enemies[env->selected_enemy].intensity =
src/input_box_updaters.c:	env->sectors[env->enemies[env->selected_enemy].sector].intensity;
src/input_box_utils.c:	new = ft_getchar(env->sdl.event.key.keysym.sym,
src/input_box_utils.c:			env->inputs.shift);
src/input_box_utils.c:	new = ft_getchar(env->sdl.event.key.keysym.sym,
src/input_box_utils.c:			env->inputs.shift);
src/input_box_utils.c:	new = ft_getchar(env->sdl.event.key.keysym.sym,
src/input_box_utils.c:			env->inputs.shift);
src/input_box_utils.c:	env->sdl.event.key.keysym.sym = 0;
src/inputs.c:	env->inputs.forward = 0;
src/inputs.c:	env->inputs.backward = 0;
src/inputs.c:	env->inputs.s = 0;
src/inputs.c:	env->inputs.left = 0;
src/inputs.c:	env->inputs.right = 0;
src/inputs.c:	env->inputs.plus = 0;
src/inputs.c:	env->inputs.minus = 0;
src/inputs.c:	env->inputs.shift = 0;
src/inputs.c:	env->inputs.ctrl = 0;
src/inputs.c:	env->inputs.space = 0;
src/inputs.c:	env->inputs.ctrl = 0;
src/inputs.c:	env->inputs.option = 0;
src/inputs.c:	env->inputs.left_click = 0;
src/inputs.c:	env->inputs.right_click = 0;
src/inputs.c:	env->inputs.enter = 0;
src/inputs.c:	env->inputs.up = 0;
src/inputs.c:	env->inputs.down = 0;
src/inputs.c:	env->inputs.tab = 0;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.forward
src/inputs.c:			|| env->sdl.event.key.keysym.sym == env->keys.forward2)
src/inputs.c:		env->inputs.forward = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.s
src/inputs.c:			|| env->sdl.event.key.keysym.sym == env->keys.backward2)
src/inputs.c:		env->inputs.backward = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.left
src/inputs.c:			|| env->sdl.event.key.keysym.sym == env->keys.left2)
src/inputs.c:		env->inputs.left = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.right
src/inputs.c:			|| env->sdl.event.key.keysym.sym == env->keys.right2)
src/inputs.c:		env->inputs.right = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.plus)
src/inputs.c:		env->inputs.plus = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.minus)
src/inputs.c:		env->inputs.minus = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.shift
src/inputs.c:			|| env->sdl.event.key.keysym.sym == env->keys.shift2)
src/inputs.c:		env->inputs.shift = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.space)
src/inputs.c:		env->inputs.space = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.ctrl)
src/inputs.c:		env->inputs.ctrl = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.up)
src/inputs.c:		env->inputs.up = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.down)
src/inputs.c:		env->inputs.down = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.option)
src/inputs.c:		env->inputs.option = mode;	
src/inputs.c:	if (env->sdl.event.button.button == SDL_BUTTON_LEFT)
src/inputs.c:		env->inputs.left_click = mode;
src/inputs.c:	if (env->sdl.event.button.button == SDL_BUTTON_RIGHT)
src/inputs.c:		env->inputs.right_click = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.enter)
src/inputs.c:		env->inputs.enter = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.s)
src/inputs.c:		env->inputs.s = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.backspace)
src/inputs.c:		env->inputs.backspace = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.del)
src/inputs.c:		env->inputs.del = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.comma)
src/inputs.c:		env->inputs.comma = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.period)
src/inputs.c:		env->inputs.period = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.minus1)
src/inputs.c:		env->inputs.minus1 = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.equals)
src/inputs.c:		env->inputs.equals = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.p)
src/inputs.c:		env->inputs.p = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.e)
src/inputs.c:		env->inputs.e = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.home)
src/inputs.c:		env->inputs.home = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.end)
src/inputs.c:		env->inputs.end = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.a)
src/inputs.c:		env->inputs.a = mode;
src/inputs.c:	if (env->sdl.event.key.keysym.sym == env->keys.lgui)
src/inputs.c:		env->inputs.lgui = mode;
src/inputs.c:	if (env->sdl.event.type == SDL_KEYDOWN)
src/inputs.c:	if (env->sdl.event.type == SDL_KEYUP)
src/inputs.c:	if (env->sdl.event.type == SDL_MOUSEBUTTONDOWN)
src/inputs.c:	if (env->sdl.event.type == SDL_MOUSEBUTTONUP)
src/intersects_with_player.c:	prec = env->player.sector;
src/intersects_with_player.c:				new_v2(env->vertices[sector->vertices[wall]].x,
src/intersects_with_player.c:					env->vertices[sector->vertices[wall]].y),
src/intersects_with_player.c:				new_v2(env->vertices[sector->vertices[wall + 1]].x,
src/intersects_with_player.c:					env->vertices[sector->vertices[wall + 1]].y), new_v2(pos.x,
src/intersects_with_player.c:						pos.y), env->player.size_2d) && (!sector->portals[wall]
src/intersects_with_player.c:				new_v2(env->vertices[sector->vertices[prec]].x,
src/intersects_with_player.c:					env->vertices[sector->vertices[prec]].y),
src/intersects_with_player.c:				new_v2(env->vertices[sector->vertices[wall]].x,
src/intersects_with_player.c:					env->vertices[sector->vertices[wall]].y), new_v2(pos.x,
src/intersects_with_player.c:						pos.y), env->player.size_2d) && (!sector->portals[prec]
src/intersects_with_player.c:				new_v2(env->vertices[sector->vertices[wall]].x,
src/intersects_with_player.c:					env->vertices[sector->vertices[wall]].y),
src/intersects_with_player.c:				new_v2(env->vertices[sector->vertices[wall + 1]].x,
src/intersects_with_player.c:					env->vertices[sector->vertices[wall + 1]].y), new_v2(pos.x,
src/intersects_with_player.c:						pos.y), env->player.size_2d))
src/intersects_with_player.c:				new_v2(env->vertices[sector->vertices[prec]].x,
src/intersects_with_player.c:					env->vertices[sector->vertices[prec]].y),
src/intersects_with_player.c:				new_v2(env->vertices[sector->vertices[wall]].x,
src/intersects_with_player.c:					env->vertices[sector->vertices[wall]].y), new_v2(pos.x,
src/intersects_with_player.c:						pos.y), env->player.size_2d))
src/intersects_with_player.c:					new_v2(env->vertices[sector->vertices[i]].x,
src/intersects_with_player.c:						env->vertices[sector->vertices[i]].y),
src/intersects_with_player.c:					new_v2(env->vertices[sector->vertices[i + 1]].x,
src/intersects_with_player.c:						env->vertices[sector->vertices[i + 1]].y), new_v2(pos.x,
src/intersects_with_player.c:							pos.y), env->player.size_2d) && (!sector->portals[i]
src/intersects_with_player.c:					new_v2(env->vertices[sector->vertices[prec]].x,
src/intersects_with_player.c:						env->vertices[sector->vertices[prec]].y),
src/intersects_with_player.c:					new_v2(env->vertices[sector->vertices[i]].x,
src/intersects_with_player.c:						env->vertices[sector->vertices[i]].y), new_v2(pos.x,
src/intersects_with_player.c:							pos.y), env->player.size_2d) && (!sector->portals[prec]
src/is_in_sector.c:	if (sector < 0 || sector >= env->nb_sectors)
src/is_in_sector.c:	if (pos.z < get_floor_at_pos(env->sectors[sector], new_v3(pos.x, pos.y, 0), env)
src/is_in_sector.c:			|| pos.z > get_ceiling_at_pos(env->sectors[sector], new_v3(pos.x, pos.y, 0), env))
src/is_in_sector.c:	while (i < env->sectors[sector].nb_vertices)
src/is_in_sector.c:		end_pos = (env->sectors[sector].x_max + 1 - SECTOR_X1) * (SECTOR_Y2 - SECTOR_Y1) - (pos.y - SECTOR_Y1) * (SECTOR_X2 - SECTOR_X1);
src/is_in_sector.c:	if (sector < 0 || sector >= env->nb_sectors)
src/is_in_sector.c:	while (i < env->sectors[sector].nb_vertices)
src/is_in_sector.c:		end_pos = (env->sectors[sector].x_max + 1 - SECTOR_X1) * (SECTOR_Y2 - SECTOR_Y1) - (pos.y - SECTOR_Y1) * (SECTOR_X2 - SECTOR_X1);
src/is_new_vertex_valid.c:	tmp = env->editor.current_vertices;
src/is_new_vertex_valid.c:					new_v2(round((env->sdl.mx - env->editor.center.x) /
src/is_new_vertex_valid.c:					env->editor.scale), round((env->sdl.my
src/is_new_vertex_valid.c:					- env->editor.center.y) / env->editor.scale))))
src/is_new_vertex_valid.c:		v1 = env->vertices[sector.vertices[i]];
src/is_new_vertex_valid.c:		v2 = env->vertices[sector.vertices[i + 1]];
src/is_new_vertex_valid.c:					new_v2(round((env->sdl.mx - env->editor.center.x) / env->editor.scale),
src/is_new_vertex_valid.c:						round((env->sdl.my - env->editor.center.y) / env->editor.scale)),
src/is_new_vertex_valid.c:	tmp = env->editor.current_vertices;
src/is_new_vertex_valid.c:	tmp = env->editor.current_vertices;
src/is_new_vertex_valid.c:	while (i < env->nb_sectors)
src/is_new_vertex_valid.c:		if (check_sector_intersections(env, env->sectors[i], *last, index))
src/is_new_vertex_valid.c:	while (i < env->sectors[sector].nb_vertices)
src/is_new_vertex_valid.c:		if (env->sectors[sector].vertices[i] == env->editor.selected_vertex)
src/is_new_vertex_valid.c:	ret = env->sectors[sector].vertices[i];
src/is_new_vertex_valid.c:		res = env->vertices[sector.vertices[sector.nb_vertices - 1]];
src/is_new_vertex_valid.c:		res = env->vertices[sector.vertices[i + new_index]];
src/is_new_vertex_valid.c:	len = ft_lstlen(env->editor.current_vertices);
src/is_new_vertex_valid.c:	tmp = env->editor.current_vertices;
src/is_new_vertex_valid.c:		p[len - 3].x = round((env->sdl.mx - env->editor.center.x) / env->editor.scale);
src/is_new_vertex_valid.c:		p[len - 3].y = round((env->sdl.my - env->editor.center.y) / env->editor.scale);
src/is_new_vertex_valid.c:		while (j < env->nb_sectors)
src/is_new_vertex_valid.c:			last = find_second_vertex(env, env->sectors[list_sectors[i]], -1, index);
src/is_new_vertex_valid.c:			if (check_sector_intersections(env, env->sectors[j], last, index) == -1)
src/is_new_vertex_valid.c:			last = find_second_vertex(env, env->sectors[list_sectors[i]], 1, index);
src/is_new_vertex_valid.c:			if (check_sector_intersections(env, env->sectors[j], last, index) == -1)
src/is_new_vertex_valid.c:	vertex.x = round((env->sdl.mx - env->editor.center.x) / env->editor.scale);
src/is_new_vertex_valid.c:	vertex.y = round((env->sdl.my - env->editor.center.y) / env->editor.scale);
src/is_new_vertex_valid.c:	if (!env->editor.current_vertices)
src/is_new_vertex_valid.c:	if (index != env->editor.start_vertex
src/is_new_vertex_valid.c:	if (!is_new_sector_convex(env, env->editor.current_vertices))
src/keys.c:	if (env->inputs.forward || env->inputs.backward || env->inputs.left
src/keys.c:			|| env->inputs.right)
src/keys.c:		play_sound(env, &env->sound.footstep_chan, env->sound.footstep,
src/keys.c:			env->sound.ambient_vol);
src/keys.c:	if (env->inputs.right_click)
src/keys.c:		FMOD_Channel_SetPaused(env->sound.music_chan, 1);
src/keys.c:		FMOD_System_PlaySound(env->sound.system, env->sound.mt_erebus, 0, 0, &env->sound.music_chan);
src/keys.c:		FMOD_Channel_SetVolume(env->sound.music_chan, env->sound.music_vol);
src/keys.c:		FMOD_Channel_SetPaused(env->sound.music_chan, 0);
src/keys.c:	if ((((env->inputs.forward || env->inputs.backward || env->inputs.left
src/keys.c:			|| env->inputs.right || env->inputs.space || env->jump.on_going == 1
src/keys.c:			|| env->crouch.on_going || env->inputs.ctrl)
src/keys.c:			&& env->player.health > 0
src/keys.c:			&&  (((env->selected_enemy == -1 && env->editor.tab)
src/keys.c:				|| (env->selected_enemy != -1 && !env->editor.tab))
src/keys.c:				|| (env->selected_enemy == -1 && !env->editor.tab)))
src/keys.c:		|| (env->player.state.climb || env->player.state.drop)))
src/keys.c:	if (env->inputs.plus && !env->inputs.shift
src/keys.c:			&& env->options.minimap_scale * 1.2 < 100)
src/keys.c:		env->options.minimap_scale *= 1.2;
src/keys.c:	if (env->inputs.minus && !env->inputs.shift
src/keys.c:			&& env->options.minimap_scale / 1.2 > 1)
src/keys.c:		env->options.minimap_scale /= 1.2;
src/keys.c:	if (env->confirmation_box.state)
src/keys.c:		if (confirmation_box_keys(&env->confirmation_box, env))
src/keys.c:	if (env->inputs.e
src/keys.c:		&& env->hovered_wall_sprite_sprite != -1
src/keys.c:		&& env->hovered_wall_sprite_wall != -1
src/keys.c:		&& env->hovered_wall_sprite_sector != -1)
src/keys.c:		env->press_wall_sprite_color = 0xFFFFFFFF;
src/keys.c:		env->press_wall_sprite_intensity = 128;
src/keys.c:		env->press_wall_sprite_color = 0xFFFFFFFF;
src/keys.c:		env->press_wall_sprite_intensity = 64;
src/keyup.c:	env->screen_w[2] = 2560;
src/keyup.c:	env->screen_h[2] = 1440;
src/keyup.c:	env->screen_w[1] = 1920;
src/keyup.c:	env->screen_h[1] = 1080;
src/keyup.c:	env->screen_w[0] = 1600;
src/keyup.c:	env->screen_h[0] = 900;
src/keyup.c:	if (!(env->res[2] = ft_strdup("2560 x 1440")))
src/keyup.c:	if (!(env->res[1] = ft_strdup("1920 x 1080")))
src/keyup.c:	if (!(env->res[0] = ft_strdup("1600 x 900")))
src/keyup.c:	env->w = env->screen_w[env->i];
src/keyup.c:	env->h = env->screen_h[env->i];
src/keyup.c:	env->h_w = env->w / 2;
src/keyup.c:	env->h_h = env->h / 2;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_c)
src/keyup.c:		env->options.contouring = env->options.contouring ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_r)
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_m)
src/keyup.c:		env->options.show_minimap = env->options.show_minimap ? 0 : 1;
src/keyup.c:		env->options.mipmapping = env->options.mipmapping ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_f)
src/keyup.c:		env->options.show_fps = env->options.show_fps ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_x)
src/keyup.c:		env->options.wall_lover = env->options.wall_lover ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_j)
src/keyup.c:		env->options.color_clipping = env->options.color_clipping ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_g)
src/keyup.c:		env->options.wall_color = env->options.wall_color ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_t)
src/keyup.c:		env->options.test = env->options.test ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_i)
src/keyup.c:		env->options.clipping = env->options.clipping ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_n)
src/keyup.c:		env->drawing = env->drawing ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_p)
src/keyup.c:		env->options.p = env->options.p ? 0 : 1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_e
src/keyup.c:		&& env->hovered_wall_sprite_sprite != -1
src/keyup.c:		&& env->hovered_wall_sprite_wall != -1
src/keyup.c:		&& env->hovered_wall_sprite_sector != -1
src/keyup.c:		&& env->sectors[env->hovered_wall_sprite_sector]
src/keyup.c:		.wall_sprites[env->hovered_wall_sprite_wall]
src/keyup.c:		.nb_press_events[env->hovered_wall_sprite_sprite]
src/keyup.c:		&& env->sectors[env->hovered_wall_sprite_sector]
src/keyup.c:		.wall_sprites[env->hovered_wall_sprite_wall]
src/keyup.c:		.press_events[env->hovered_wall_sprite_sprite])
src/keyup.c:		if (start_event(&env->sectors[env->hovered_wall_sprite_sector]
src/keyup.c:		.wall_sprites[env->hovered_wall_sprite_wall]
src/keyup.c:		.press_events[env->hovered_wall_sprite_sprite],
src/keyup.c:		&env->sectors[env->hovered_wall_sprite_sector]
src/keyup.c:		.wall_sprites[env->hovered_wall_sprite_wall]
src/keyup.c:		.nb_press_events[env->hovered_wall_sprite_sprite], env))
src/keyup.c:		if (env->sectors[env->hovered_wall_sprite_sector]
src/keyup.c:		.wall_sprites[env->hovered_wall_sprite_wall]
src/keyup.c:		.nb_press_events[env->hovered_wall_sprite_sprite] == 0)
src/keyup.c:			env->hovered_wall_sprite_wall = -1;
src/keyup.c:			env->hovered_wall_sprite_sector = -1;
src/keyup.c:			env->hovered_wall_sprite_sprite = -1;
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_o)
src/keyup.c:		//env->option = env->option ? 0 : 1;
src/keyup.c:		if (env->option)
src/keyup.c:		else if (env->player.health > 0)
src/keyup.c:	if (env->sdl.event.key.keysym.sym == SDLK_TAB)
src/keyup.c:		env->options.zbuffer = env->options.zbuffer ? 0 : 1;
src/keyup.c:	if (env->confirmation_box.state)
src/keyup.c:		if (confirmation_box_keyup(&env->confirmation_box, env))
src/keyup.c:	if (env->aplicate_changes)
src/keyup.c:		set_camera(&env->player.camera, env);
src/keyup.c:		env->inputs.left_click = 0;
src/keyup.c:		env->aplicate_changes = 0;
src/map_init_enemies.c:			env->nb_enemies = ft_atoi(line);
src/map_init_enemies.c:			if (env->nb_enemies < 0)
src/map_init_enemies.c:			if (env->nb_enemies
src/map_init_enemies.c:					&& !(env->enemies = (t_enemies*)ft_memalloc(sizeof(t_enemies)
src/map_init_enemies.c:							* (env->nb_enemies))))
src/map_init_objects.c:			env->nb_objects = ft_atoi(line);
src/map_init_objects.c:			if (env->nb_objects < 0)
src/map_init_objects.c:			if (env->nb_objects
src/map_init_objects.c:					&& !(env->objects = (t_object*)ft_memalloc(sizeof(t_object)
src/map_init_objects.c:							* (env->nb_objects))))
src/map_parse_ceiling_sprites.c:	env->sectors[parser->sectors_count].ceiling_sprites.nb_sprites = parser->sector_ceiling_sprites_count;
src/map_parse_ceiling_sprites.c:	if (!(env->sectors[parser->sectors_count].ceiling_sprites.sprite = (int*)
src/map_parse_ceiling_sprites.c:	if (!(env->sectors[parser->sectors_count].ceiling_sprites.scale = (t_v2*)
src/map_parse_ceiling_sprites.c:	if (!(env->sectors[parser->sectors_count].ceiling_sprites.pos = (t_v2*)
src/map_parse_ceiling_sprites.c:	if (!(env->sectors[parser->sectors_count].ceiling_sprites_scale = (t_v2*)
src/map_parse_ceiling_sprites.c:		env->sectors[parser->sectors_count].ceiling_sprites.sprite[i] =
src/map_parse_ceiling_sprites.c:		env->objects_main_sprites[parse];
src/map_parse_ceiling_sprites.c:		env->sectors[parser->sectors_count].ceiling_sprites.pos[i].x = ft_atof(*line);
src/map_parse_ceiling_sprites.c:		env->sectors[parser->sectors_count].ceiling_sprites.pos[i].y = ft_atof(*line);
src/map_parse_ceiling_sprites.c:		env->sectors[parser->sectors_count].ceiling_sprites.scale[i].x = ft_atof(*line);
src/map_parse_ceiling_sprites.c:		if (env->sectors[parser->sectors_count].ceiling_sprites.scale[i].x <= 0)
src/map_parse_ceiling_sprites.c:		env->sectors[parser->sectors_count].ceiling_sprites.scale[i].y = ft_atof(*line);
src/map_parse_ceiling_sprites.c:		if (env->sectors[parser->sectors_count].ceiling_sprites.scale[i].y <= 0)
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].map_hp = ft_atoi(*line);
src/map_parse_enemies.c:	if (env->enemies[parser->enemies_count].map_hp <= 0)
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].speed = ft_atoi(*line);
src/map_parse_enemies.c:	if (env->enemies[parser->enemies_count].speed < 0 || env->enemies[parser->enemies_count].speed > 100)
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].damage = ft_atoi(*line);
src/map_parse_enemies.c:	if (env->enemies[parser->enemies_count].damage <= 0)
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].sprite =
src/map_parse_enemies.c:	env->enemies_main_sprites[parse];
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].scale = ft_atof(*line);
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].pos.y = ft_atof(*line);
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].pos.x = ft_atof(*line);
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].pos.z = ft_atof(*line);
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].angle = ft_atof(*line);
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].sector = get_sector_no_z(env,
src/map_parse_enemies.c:			new_v3(env->enemies[parser->enemies_count].pos.x,
src/map_parse_enemies.c:				env->enemies[parser->enemies_count].pos.y,
src/map_parse_enemies.c:				env->enemies[parser->enemies_count].pos.z));
src/map_parse_enemies.c:	if (env->enemies[parser->enemies_count].sector >= 0)
src/map_parse_enemies.c:		env->enemies[parser->enemies_count].brightness =
src/map_parse_enemies.c:			env->sectors[env->enemies[parser->enemies_count].sector].brightness;
src/map_parse_enemies.c:		env->enemies[parser->enemies_count].light_color =
src/map_parse_enemies.c:			env->sectors[env->enemies[parser->enemies_count].sector].light_color;
src/map_parse_enemies.c:		env->enemies[parser->enemies_count].intensity =
src/map_parse_enemies.c:			env->sectors[env->enemies[parser->enemies_count].sector].intensity;
src/map_parse_enemies.c:		env->enemies[parser->enemies_count].brightness = 0;
src/map_parse_enemies.c:		env->enemies[parser->enemies_count].light_color = 0;
src/map_parse_enemies.c:		env->enemies[parser->enemies_count].intensity = 0;
src/map_parse_enemies.c:	env->enemies[parser->enemies_count].num = parser->enemies_count;
src/map_parse_enemies.c:	while (parser->enemies_count < env->nb_enemies
src/map_parse_enemies.c:					env->nb_enemies - parser->enemies_count);
src/map_parse_floor_sprites.c:	env->sectors[parser->sectors_count].floor_sprites.nb_sprites = parser->sector_floor_sprites_count;
src/map_parse_floor_sprites.c:	if (!(env->sectors[parser->sectors_count].floor_sprites.sprite = (int*)
src/map_parse_floor_sprites.c:	if (!(env->sectors[parser->sectors_count].floor_sprites.scale = (t_v2*)
src/map_parse_floor_sprites.c:	if (!(env->sectors[parser->sectors_count].floor_sprites.pos = (t_v2*)
src/map_parse_floor_sprites.c:	if (!(env->sectors[parser->sectors_count].floor_sprites_scale = (t_v2*)
src/map_parse_floor_sprites.c:		env->sectors[parser->sectors_count].floor_sprites.sprite[i] =
src/map_parse_floor_sprites.c:		env->objects_main_sprites[parse];
src/map_parse_floor_sprites.c:		env->sectors[parser->sectors_count].floor_sprites.pos[i].x = ft_atof(*line);
src/map_parse_floor_sprites.c:		env->sectors[parser->sectors_count].floor_sprites.pos[i].y = ft_atof(*line);
src/map_parse_floor_sprites.c:		env->sectors[parser->sectors_count].floor_sprites.scale[i].x = ft_atof(*line);
src/map_parse_floor_sprites.c:		if (env->sectors[parser->sectors_count].floor_sprites.scale[i].x <= 0)
src/map_parse_floor_sprites.c:		env->sectors[parser->sectors_count].floor_sprites.scale[i].y = ft_atof(*line);
src/map_parse_floor_sprites.c:		if (env->sectors[parser->sectors_count].floor_sprites.scale[i].y <= 0)
src/map_parse_objects.c:	env->objects[parser->objects_count].sprite =
src/map_parse_objects.c:	env->objects_main_sprites[parse];
src/map_parse_objects.c:	env->objects[parser->objects_count].scale = ft_atof(*line);
src/map_parse_objects.c:	env->objects[parser->objects_count].pos.y = ft_atof(*line);
src/map_parse_objects.c:	env->objects[parser->objects_count].pos.x = ft_atof(*line);
src/map_parse_objects.c:	env->objects[parser->objects_count].pos.z = ft_atof(*line);
src/map_parse_objects.c:	env->objects[parser->objects_count].angle = ft_atof(*line);
src/map_parse_objects.c:	env->objects[parser->objects_count].sector = get_sector_no_z(env,
src/map_parse_objects.c:			new_v3(env->objects[parser->objects_count].pos.x,
src/map_parse_objects.c:				env->objects[parser->objects_count].pos.y,
src/map_parse_objects.c:				env->objects[parser->objects_count].pos.z));
src/map_parse_objects.c:	if (env->objects[parser->objects_count].sector >= 0)
src/map_parse_objects.c:		env->objects[parser->objects_count].brightness =
src/map_parse_objects.c:			env->sectors[env->objects[parser->objects_count].sector].brightness;
src/map_parse_objects.c:		env->objects[parser->objects_count].light_color =
src/map_parse_objects.c:			env->sectors[env->objects[parser->objects_count].sector].light_color;
src/map_parse_objects.c:		env->objects[parser->objects_count].intensity =
src/map_parse_objects.c:			env->sectors[env->objects[parser->objects_count].sector].intensity;
src/map_parse_objects.c:		env->objects[parser->objects_count].brightness = 0;
src/map_parse_objects.c:		env->objects[parser->objects_count].light_color = 0;
src/map_parse_objects.c:		env->objects[parser->objects_count].intensity = 0;
src/map_parse_objects.c:	env->objects[parser->objects_count].num = parser->objects_count;
src/map_parse_objects.c:	while (parser->objects_count < env->nb_objects
src/map_parse_objects.c:					env->nb_objects - parser->objects_count);
src/map_parse_player.c:			env->player.pos.y = ft_atof(line);
src/map_parse_player.c:			env->player.pos.x = ft_atof(line);
src/map_parse_player.c:			env->player.camera.angle = (ft_atof(line) + 0.00001) * CONVERT_RADIANS;
src/map_parse_player.c:			env->player.camera.angle_cos = cos(env->player.camera.angle);
src/map_parse_player.c:			env->player.camera.angle_sin = sin(env->player.camera.angle);
src/map_parse_player.c:			env->player.camera.perp_cos = cos(env->player.camera.angle - M_PI / 2);
src/map_parse_player.c:			env->player.camera.perp_sin = sin(env->player.camera.angle - M_PI / 2);
src/map_parse_player.c:			env->editor.player_exist = 1;
src/map_parse_player.c:			if ((env->player.sector = get_sector_no_z(env,
src/map_parse_player.c:							env->player.pos)) == -1)
src/map_parse_player.c:			env->player.highest_sect = env->player.sector;
src/map_parse_player.c:			env->player.camera.pos = env->player.pos;
src/map_parse_player.c:			env->player.camera.pos.z = env->player.pos.z + 8;
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].floor = ft_atof(*line);
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].floor_min = env->sectors[parser->
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].floor_max = env->sectors[parser->
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].floor_slope = ft_atof(*line);
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].floor_texture = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].floor_texture < -MAX_SKYBOX
src/map_parse_sectors.c:			|| env->sectors[parser->sectors_count].floor_texture >= MAX_WALL_TEXTURE)
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].floor_map_align.x = ft_atoi(*line);
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].floor_map_align.y = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].floor_texture < 0)
src/map_parse_sectors.c:		env->contains_skybox = 1;
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].floor_map_scale.x = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].floor_map_scale.x <= 0)
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].floor_map_scale.y = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].floor_map_scale.y <= 0)
src/map_parse_sectors.c:	if (set_sector_floor_map_array(&env->sectors[parser->sectors_count], 
src/map_parse_sectors.c:		env->wall_textures[env->sectors[parser->sectors_count].floor_texture],
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling = ft_atof(*line);
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling_min =
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling;
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling_max =
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling;
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling_slope = ft_atof(*line);
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling_texture = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].ceiling_texture < -MAX_SKYBOX || env->
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling_map_align.x = ft_atoi(*line);
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling_map_align.y = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].ceiling_texture < 0)
src/map_parse_sectors.c:		env->contains_skybox = 1;
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling_map_scale.x = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].ceiling_map_scale.x <= 0)
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].ceiling_map_scale.y = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].ceiling_map_scale.y <= 0)
src/map_parse_sectors.c:	if (set_sector_ceiling_map_array(&env->sectors[parser->sectors_count], 
src/map_parse_sectors.c:		env->wall_textures[env->sectors[parser->sectors_count].ceiling_texture], 
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].nb_vertices = parser->
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].vertices = (int*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].neighbors = (int*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].portals = (int*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].textures = (int*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].wall_sprites = (t_wall_sprites*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].walls_map_lvl = (double**)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].align = (t_v2*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].scale = (t_v2*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].ceilings = (double*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].floors = (double*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].clipped_ceilings1 = (double*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].clipped_floors1 = (double*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].clipped_ceilings2 = (double*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].clipped_floors2 = (double*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].wall_width = (double*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].selected = (int*)
src/map_parse_sectors.c:	if (!(env->sectors[parser->sectors_count].wall_bullet_holes = (t_list**)
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].vertices[i] = ft_atoi(*line);
src/map_parse_sectors.c:		if (env->sectors[parser->sectors_count].vertices[i] < 0 || env->
src/map_parse_sectors.c:				sectors[parser->sectors_count].vertices[i] >= env->nb_vertices)
src/map_parse_sectors.c:					env->sectors[parser->sectors_count].vertices[i],
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].vertices[parser->sector_vertices_count]
src/map_parse_sectors.c:		= env->sectors[parser->sectors_count].vertices[0];
src/map_parse_sectors.c:	if (check_vertices_uniqueness(env->sectors[parser->sectors_count]))
src/map_parse_sectors.c:	if (check_sector_duplicate(env, env->sectors[parser->sectors_count],
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].neighbors[i] = ft_atoi(*line);
src/map_parse_sectors.c:		if (env->sectors[parser->sectors_count].neighbors[i] < -1 || env->
src/map_parse_sectors.c:				sectors[parser->sectors_count].neighbors[i] >= env->nb_sectors)
src/map_parse_sectors.c:					env->sectors[parser->sectors_count].neighbors[i],
src/map_parse_sectors.c:		if (env->sectors[parser->sectors_count].neighbors[i] == parser->sectors_count)
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].portals[i] = ft_atoi(*line);
src/map_parse_sectors.c:		if (env->sectors[parser->sectors_count].portals[i] < 0 || env->
src/map_parse_sectors.c:					env->sectors[parser->sectors_count].portals[i],
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].textures[i] = ft_atoi(*line);
src/map_parse_sectors.c:		if (env->sectors[parser->sectors_count].textures[i] < -MAX_SKYBOX
src/map_parse_sectors.c:		|| env->sectors[parser->sectors_count].textures[i] >= MAX_WALL_TEXTURE)
src/map_parse_sectors.c:					env->sectors[parser->sectors_count].textures[i],
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].align[i].x = ft_atof(*line);
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].align[i].y = ft_atof(*line);
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].scale[i].x = ft_atof(*line);
src/map_parse_sectors.c:		if (env->sectors[parser->sectors_count].scale[i].x <= 0)
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].scale[i].y = ft_atof(*line);
src/map_parse_sectors.c:		if (env->sectors[parser->sectors_count].scale[i].y <= 0)
src/map_parse_sectors.c:		if (set_sector_wall_map_array(&env->sectors[parser->sectors_count], 
src/map_parse_sectors.c:			env->wall_textures[env->sectors[parser->sectors_count].textures[i]], i,
src/map_parse_sectors.c:		if ((env->sectors[parser->sectors_count].wall_sprites[i].nb_sprites
src/map_parse_sectors.c:		if (!(env->sectors[parser->sectors_count].wall_sprites[i].sprite
src/map_parse_sectors.c:			* env->sectors[parser->sectors_count].wall_sprites[i].nb_sprites)))
src/map_parse_sectors.c:		if (!(env->sectors[parser->sectors_count].wall_sprites[i].pos
src/map_parse_sectors.c:			* env->sectors[parser->sectors_count].wall_sprites[i].nb_sprites)))
src/map_parse_sectors.c:		if (!(env->sectors[parser->sectors_count].wall_sprites[i].scale
src/map_parse_sectors.c:			* env->sectors[parser->sectors_count].wall_sprites[i].nb_sprites)))
src/map_parse_sectors.c:		if (!(env->sectors[parser->sectors_count].wall_sprites[i].press_events
src/map_parse_sectors.c:			* env->sectors[parser->sectors_count].wall_sprites[i].nb_sprites)))
src/map_parse_sectors.c:		if (!(env->sectors[parser->sectors_count].wall_sprites[i].shoot_events
src/map_parse_sectors.c:			* env->sectors[parser->sectors_count].wall_sprites[i].nb_sprites)))
src/map_parse_sectors.c:		if (!(env->sectors[parser->sectors_count].wall_sprites[i].
src/map_parse_sectors.c:			* env->sectors[parser->sectors_count].wall_sprites[i].nb_sprites)))
src/map_parse_sectors.c:		if (!(env->sectors[parser->sectors_count].wall_sprites[i].
src/map_parse_sectors.c:			* env->sectors[parser->sectors_count].wall_sprites[i].nb_sprites)))
src/map_parse_sectors.c:			< env->sectors[parser->sectors_count].wall_sprites[i].nb_sprites)
src/map_parse_sectors.c:			env->sectors[parser->sectors_count].wall_sprites[i].sprite[j] =
src/map_parse_sectors.c:			env->objects_main_sprites[parse];
src/map_parse_sectors.c:			env->sectors[parser->sectors_count].wall_sprites[i].pos[j].x =
src/map_parse_sectors.c:			env->sectors[parser->sectors_count].wall_sprites[i].pos[j].y =
src/map_parse_sectors.c:			env->sectors[parser->sectors_count].wall_sprites[i].scale[j].x =
src/map_parse_sectors.c:			if (env->sectors[parser->sectors_count].wall_sprites[i].scale[j].x <= 0)
src/map_parse_sectors.c:			env->sectors[parser->sectors_count].wall_sprites[i].scale[j].y = ft_atof(*line);
src/map_parse_sectors.c:			if (env->sectors[parser->sectors_count].wall_sprites[i].scale[j].y <= 0)
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].wall_sprites[i]
src/map_parse_sectors.c:	= env->sectors[parser->sectors_count].wall_sprites[0];
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].brightness = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].brightness < -255 ||
src/map_parse_sectors.c:			env->sectors[parser->sectors_count].brightness > 255)
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].light_color = ft_atoi_base(*line,
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].intensity = ft_atoi(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].intensity < -255 ||
src/map_parse_sectors.c:			env->sectors[parser->sectors_count].intensity > 255)
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].gravity = ft_atof(*line);
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].gravity < -10 ||
src/map_parse_sectors.c:		env->sectors[parser->sectors_count].gravity >= 0)
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].sprite_time = 0;
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].num = parser->sectors_count;
src/map_parse_sectors.c:	env->sectors[parser->sectors_count].gravity = -9.81;
src/map_parse_sectors.c:	if (env->sectors[parser->sectors_count].ceiling
src/map_parse_sectors.c:			< env->sectors[parser->sectors_count].floor)
src/map_parse_sectors.c:	while (parser->sectors_count < env->nb_sectors
src/map_parse_sectors.c:					env->nb_sectors - parser->sectors_count);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].floor = ft_atof(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].floor_min = env->sectors[parser->
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].floor_max = env->sectors[parser->
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].floor_slope = ft_atof(*line);
src/map_parse_sectors_new.c:/*	if (env->sectors[parser->sectors_count].floor_slope > 45
src/map_parse_sectors_new.c:			|| env->sectors[parser->sectors_count].floor_slope < -45)
src/map_parse_sectors_new.c:	//	env->sectors[parser->sectors_count].floor_slope = env->
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].floor_texture = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].floor_texture < -MAX_SKYBOX
src/map_parse_sectors_new.c:			|| env->sectors[parser->sectors_count].floor_texture >= MAX_WALL_TEXTURE)
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].floor_map_align.x = ft_atoi(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].floor_map_align.y = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].floor_texture < 0)
src/map_parse_sectors_new.c:		env->contains_skybox = 1;
src/map_parse_sectors_new.c:	/*if (env->sectors[parser->sectors_count].floor_texture < 0)
src/map_parse_sectors_new.c:		env->contains_skybox = 1;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].floor_align.x *= env->skyboxes[0].textures[0].surface->w;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].floor_align.y *= env->skyboxes[0].textures[0].surface->h;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].floor_align.x /= 10;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].floor_align.y /= 10;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].floor_align.x *= env->wall_textures[env->sectors[parser->sectors_count].floor_texture].surface->w;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].floor_align.y *= env->wall_textures[env->sectors[parser->sectors_count].floor_texture].surface->h;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].floor_align.x /= 10;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].floor_align.y /= 10;
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].floor_map_scale.x = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].floor_map_scale.x <= 0)
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].floor_map_scale.y = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].floor_map_scale.y <= 0)
src/map_parse_sectors_new.c:	if (set_sector_floor_map_array(&env->sectors[parser->sectors_count], 
src/map_parse_sectors_new.c:		env->wall_textures[env->sectors[parser->sectors_count].floor_texture],
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling = ft_atof(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling_min =
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling;
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling_max =
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling;
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling_slope = ft_atof(*line) * CONVERT_RADIANS;
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].ceiling_slope > 45
src/map_parse_sectors_new.c:			|| env->sectors[parser->sectors_count].ceiling_slope < -45)
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling_slope = tan(env->
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling_texture = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].ceiling_texture < -MAX_SKYBOX || env->
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling_map_align.x = ft_atoi(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling_map_align.y = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].ceiling_texture < 0)
src/map_parse_sectors_new.c:		env->contains_skybox = 1;
src/map_parse_sectors_new.c:	/*if (env->sectors[parser->sectors_count].ceiling_texture < 0)
src/map_parse_sectors_new.c:		env->contains_skybox = 1;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].ceiling_align.x *= env->skyboxes[0].textures[0].surface->w;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].ceiling_align.y *= env->skyboxes[0].textures[0].surface->h;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].ceiling_align.x /= 10;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].ceiling_align.y /= 10;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].ceiling_align.x *= env->wall_textures[env->sectors[parser->sectors_count].ceiling_texture].surface->w;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].ceiling_align.y *= env->wall_textures[env->sectors[parser->sectors_count].ceiling_texture].surface->h;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].ceiling_align.x /= 10;
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].ceiling_align.y /= 10;
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling_map_scale.x = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].ceiling_map_scale.x <= 0)
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].ceiling_map_scale.y = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].ceiling_map_scale.y <= 0)
src/map_parse_sectors_new.c:	if (set_sector_ceiling_map_array(&env->sectors[parser->sectors_count], 
src/map_parse_sectors_new.c:		env->wall_textures[env->sectors[parser->sectors_count].ceiling_texture], 
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].nb_vertices = parser->
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].vertices = (int*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].neighbors = (int*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].textures = (int*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].sprites = (t_wall_sprites*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].walls_map_lvl = (double**)
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].walls_map_lvl[i] = 0;
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].align = (t_v2*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].scale = (t_v2*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].ceilings = (double*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].floors = (double*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].clipped_ceilings1 = (double*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].clipped_floors1 = (double*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].clipped_ceilings2 = (double*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].clipped_floors2 = (double*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].wall_width = (double*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].selected = (int*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].nb_sprites = (int*)
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].xmin = (int*)
src/map_parse_sectors_new.c:				malloc(sizeof(int) * (env->h))))
src/map_parse_sectors_new.c:	if (!(env->sectors[parser->sectors_count].xmax = (int*)
src/map_parse_sectors_new.c:				malloc(sizeof(int) * (env->h))))
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].vertices[i] = ft_atoi(*line);
src/map_parse_sectors_new.c:		if (env->sectors[parser->sectors_count].vertices[i] < 0 || env->
src/map_parse_sectors_new.c:				sectors[parser->sectors_count].vertices[i] >= env->nb_vertices)
src/map_parse_sectors_new.c:					env->sectors[parser->sectors_count].vertices[i],
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].vertices[parser->sector_vertices_count]
src/map_parse_sectors_new.c:		= env->sectors[parser->sectors_count].vertices[0];
src/map_parse_sectors_new.c:	if (check_vertices_uniqueness(env->sectors[parser->sectors_count]))
src/map_parse_sectors_new.c:	if (check_sector_duplicate(env, env->sectors[parser->sectors_count],
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].neighbors[i] = ft_atoi(*line);
src/map_parse_sectors_new.c:		if (env->sectors[parser->sectors_count].neighbors[i] < -1 || env->
src/map_parse_sectors_new.c:				sectors[parser->sectors_count].neighbors[i] >= env->nb_sectors)
src/map_parse_sectors_new.c:					env->sectors[parser->sectors_count].neighbors[i],
src/map_parse_sectors_new.c:		if (env->sectors[parser->sectors_count].neighbors[i] == parser->sectors_count)
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].textures[i] = ft_atoi(*line);
src/map_parse_sectors_new.c:		if (env->sectors[parser->sectors_count].textures[i] < -MAX_SKYBOX
src/map_parse_sectors_new.c:		|| env->sectors[parser->sectors_count].textures[i] >= MAX_WALL_TEXTURE)
src/map_parse_sectors_new.c:					env->sectors[parser->sectors_count].textures[i],
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].align[i].x = ft_atof(*line);
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].align[i].y = ft_atof(*line);
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].scale[i].x = ft_atof(*line);
src/map_parse_sectors_new.c:		if (env->sectors[parser->sectors_count].scale[i].x <= 0)
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].scale[i].y = ft_atof(*line);
src/map_parse_sectors_new.c:		if (env->sectors[parser->sectors_count].scale[i].y <= 0)
src/map_parse_sectors_new.c:		/*if (env->sectors[parser->sectors_count].textures[i] < 0)
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].align[i].x *= env->skyboxes[0].textures[0].surface->w;
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].align[i].y *= env->skyboxes[0].textures[0].surface->h;
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].align[i].x /= 10;
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].align[i].y /= 10;
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].align[i].x *= env->wall_textures[env->sectors[parser->sectors_count].textures[i]].surface->w;
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].align[i].y *= env->wall_textures[env->sectors[parser->sectors_count].textures[i]].surface->h;
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].align[i].x /= 10;
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].align[i].y /= 10;
src/map_parse_sectors_new.c:		if (set_sector_wall_map_array(&env->sectors[parser->sectors_count], 
src/map_parse_sectors_new.c:			env->wall_textures[env->sectors[parser->sectors_count].textures[i]], i,
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].textures[i] = ft_atoi(*line);
src/map_parse_sectors_new.c:		if (env->sectors[parser->sectors_count].textures[i] < -1 || env->sectors[parser->sectors_count].textures[i] >= MAX_TEXTURE)
src/map_parse_sectors_new.c:					env->sectors[parser->sectors_count].textures[i],
src/map_parse_sectors_new.c:		env->sectors[parser->sectors_count].align[i] = new_v2(0, 0);
src/map_parse_sectors_new.c:		if (env->sectors[parser->sectors_count].textures[i] == -1)
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].scale[i] = new_v2(
src/map_parse_sectors_new.c:					env->skyboxes[0].textures[0].surface->w,
src/map_parse_sectors_new.c:					env->skyboxes[0].textures[0].surface->h / 10);
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].scale[i] = new_v2(
src/map_parse_sectors_new.c:					env->wall_textures[env->sectors[parser->sectors_count].textures[i]].surface->w,
src/map_parse_sectors_new.c:					env->wall_textures[env->sectors[parser->sectors_count].textures[i]].surface->h);
src/map_parse_sectors_new.c:		if ((env->sectors[parser->sectors_count].nb_sprites[i] = count_wall_sprites(*line, parser)) == -1)
src/map_parse_sectors_new.c:		if (!(env->sectors[parser->sectors_count].sprites[i].sprite = (int*)ft_memalloc(sizeof(int) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_new.c:		if (!(env->sectors[parser->sectors_count].sprites[i].pos = (t_v2*)ft_memalloc(sizeof(t_v2) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_new.c:		if (!(env->sectors[parser->sectors_count].sprites[i].scale = (t_v2*)ft_memalloc(sizeof(t_v2) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_new.c:		while (j < env->sectors[parser->sectors_count].nb_sprites[i])
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].sprite[j] = ft_atoi(*line);
src/map_parse_sectors_new.c:			if (env->sectors[parser->sectors_count].sprites[i].sprite[j] < -1
src/map_parse_sectors_new.c:					|| env->sectors[parser->sectors_count].sprites[i].sprite[j] > MAX_WALL_SPRITES)
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].pos[j].x = ft_atof(*line);
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].pos[j].y = ft_atof(*line);
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].scale[j].x = ft_atof(*line);
src/map_parse_sectors_new.c:			if (env->sectors[parser->sectors_count].sprites[i].scale[j].x <= 0)
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].scale[j].y = ft_atof(*line);
src/map_parse_sectors_new.c:			if (env->sectors[parser->sectors_count].sprites[i].scale[j].y <= 0)
src/map_parse_sectors_new.c:		/*env->sectors[parser->sectors_count].nb_sprites[i] = 1;
src/map_parse_sectors_new.c:		if (!(env->sectors[parser->sectors_count].sprites[i].sprite = (int*)ft_memalloc(sizeof(int) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_new.c:		if (!(env->sectors[parser->sectors_count].sprites[i].pos = (t_v2*)ft_memalloc(sizeof(t_v2) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_new.c:		if (!(env->sectors[parser->sectors_count].sprites[i].scale = (t_v2*)ft_memalloc(sizeof(t_v2) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_new.c:		while (j < env->sectors[parser->sectors_count].nb_sprites[i])
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].sprite[j] = ft_atoi(*line);
src/map_parse_sectors_new.c:			if (env->sectors[parser->sectors_count].sprites[i].sprite[j] < -1
src/map_parse_sectors_new.c:					|| env->sectors[parser->sectors_count].sprites[i].sprite[j] > MAX_SPRITES)
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].pos[j].x = ft_atof(*line);
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].pos[j].y = ft_atof(*line);
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].scale[j].x = ft_atof(*line);
src/map_parse_sectors_new.c:			if (env->sectors[parser->sectors_count].sprites[i].scale[j].x <= 0)
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].sprites[i].scale[j].y = ft_atof(*line);
src/map_parse_sectors_new.c:			if (env->sectors[parser->sectors_count].sprites[i].scale[j].y <= 0)
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].nb_sprites[i] = env->sectors[parser->sectors_count].nb_sprites[0];
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].brightness = ft_atoi(*line);
src/map_parse_sectors_new.c:	//env->sectors[parser->sectors_count].light_color = 0xFF409CFF;
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].brightness < -255 ||
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].brightness > 255)
src/map_parse_sectors_new.c:	//env->sectors[parser->sectors_count].intensity = 0;
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].light_color = ft_atoi_base(*line,
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].intensity = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].intensity < -255 ||
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].intensity > 255)
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].brightness = ft_atoi(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].light_color = 0xFFFFFFFF;
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].brightness < -255 ||
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].brightness > 255)
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].status = ft_atoi(*line);
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].status > 5 ||
src/map_parse_sectors_new.c:			env->sectors[parser->sectors_count].status < 0)
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].tp.x = ft_atoi(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].tp.y = ft_atoi(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].tp.x = ft_atoi(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].tp.y = ft_atoi(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].enemy_flag = ft_atoi(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].activated = ft_atoi(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].start_floor = ft_atof(*line);
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].sprite_time = 0;
src/map_parse_sectors_new.c:	env->sectors[parser->sectors_count].num = parser->sectors_count;
src/map_parse_sectors_new.c:	if (env->sectors[parser->sectors_count].ceiling
src/map_parse_sectors_new.c:			< env->sectors[parser->sectors_count].floor)
src/map_parse_sectors_new.c:	while (parser->sectors_count < env->nb_sectors
src/map_parse_sectors_new.c:					env->nb_sectors - parser->sectors_count);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].floor = ft_atof(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].floor_min = env->sectors[parser->
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].floor_max = env->sectors[parser->
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].floor_slope = ft_atof(*line);
src/map_parse_sectors_old.c:/*	if (env->sectors[parser->sectors_count].floor_slope > 45
src/map_parse_sectors_old.c:			|| env->sectors[parser->sectors_count].floor_slope < -45)
src/map_parse_sectors_old.c:	//	env->sectors[parser->sectors_count].floor_slope = env->
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].floor_texture = ft_atoi(*line);
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].floor_texture < -MAX_SKYBOX
src/map_parse_sectors_old.c:			|| env->sectors[parser->sectors_count].floor_texture >= MAX_WALL_TEXTURE)
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].floor_map_align.x = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].floor_map_align.y = ft_atoi(*line);
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].floor_texture < 0)
src/map_parse_sectors_old.c:		env->contains_skybox = 1;
src/map_parse_sectors_old.c:	/*if (env->sectors[parser->sectors_count].floor_texture < 0)
src/map_parse_sectors_old.c:		env->contains_skybox = 1;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].floor_align.x *= env->skyboxes[0].textures[0].surface->w;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].floor_align.y *= env->skyboxes[0].textures[0].surface->h;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].floor_align.x /= 10;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].floor_align.y /= 10;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].floor_align.x *= env->wall_textures[env->sectors[parser->sectors_count].floor_texture].surface->w;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].floor_align.y *= env->wall_textures[env->sectors[parser->sectors_count].floor_texture].surface->h;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].floor_align.x /= 10;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].floor_align.y /= 10;
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].floor_map_scale.x = ft_atoi(*line);
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].floor_map_scale.x <= 0)
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].floor_map_scale.y = ft_atoi(*line);
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].floor_map_scale.y <= 0)
src/map_parse_sectors_old.c:	if (set_sector_floor_map_array(&env->sectors[parser->sectors_count], 
src/map_parse_sectors_old.c:		env->wall_textures[env->sectors[parser->sectors_count].floor_texture],
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling = ft_atof(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling_min =
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling;
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling_max =
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling;
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling_slope = ft_atof(*line) * CONVERT_RADIANS;
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].ceiling_slope > 45
src/map_parse_sectors_old.c:			|| env->sectors[parser->sectors_count].ceiling_slope < -45)
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling_slope = tan(env->
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling_texture = ft_atoi(*line);
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].ceiling_texture < -MAX_SKYBOX || env->
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling_map_align.x = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling_map_align.y = ft_atoi(*line);
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].ceiling_texture < 0)
src/map_parse_sectors_old.c:		env->contains_skybox = 1;
src/map_parse_sectors_old.c:	/*if (env->sectors[parser->sectors_count].ceiling_texture < 0)
src/map_parse_sectors_old.c:		env->contains_skybox = 1;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].ceiling_align.x *= env->skyboxes[0].textures[0].surface->w;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].ceiling_align.y *= env->skyboxes[0].textures[0].surface->h;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].ceiling_align.x /= 10;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].ceiling_align.y /= 10;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].ceiling_align.x *= env->wall_textures[env->sectors[parser->sectors_count].ceiling_texture].surface->w;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].ceiling_align.y *= env->wall_textures[env->sectors[parser->sectors_count].ceiling_texture].surface->h;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].ceiling_align.x /= 10;
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].ceiling_align.y /= 10;
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling_map_scale.x = ft_atoi(*line);
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].ceiling_map_scale.x <= 0)
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].ceiling_map_scale.y = ft_atoi(*line);
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].ceiling_map_scale.y <= 0)
src/map_parse_sectors_old.c:	if (set_sector_ceiling_map_array(&env->sectors[parser->sectors_count], 
src/map_parse_sectors_old.c:		env->wall_textures[env->sectors[parser->sectors_count].ceiling_texture], 
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].nb_vertices = parser->
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].vertices = (int*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].neighbors = (int*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].textures = (int*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].sprites = (t_wall_sprites*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].walls_map_lvl = (double**)
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].walls_map_lvl[i] = 0;
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].align = (t_v2*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].scale = (t_v2*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].ceilings = (double*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].floors = (double*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].clipped_ceilings1 = (double*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].clipped_floors1 = (double*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].clipped_ceilings2 = (double*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].clipped_floors2 = (double*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].wall_width = (double*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].selected = (int*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].nb_sprites = (int*)
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].xmin = (int*)
src/map_parse_sectors_old.c:				malloc(sizeof(int) * (env->h))))
src/map_parse_sectors_old.c:	if (!(env->sectors[parser->sectors_count].xmax = (int*)
src/map_parse_sectors_old.c:				malloc(sizeof(int) * (env->h))))
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].vertices[i] = ft_atoi(*line);
src/map_parse_sectors_old.c:		if (env->sectors[parser->sectors_count].vertices[i] < 0 || env->
src/map_parse_sectors_old.c:				sectors[parser->sectors_count].vertices[i] >= env->nb_vertices)
src/map_parse_sectors_old.c:					env->sectors[parser->sectors_count].vertices[i],
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].vertices[parser->sector_vertices_count]
src/map_parse_sectors_old.c:		= env->sectors[parser->sectors_count].vertices[0];
src/map_parse_sectors_old.c:	if (check_vertices_uniqueness(env->sectors[parser->sectors_count]))
src/map_parse_sectors_old.c:	if (check_sector_duplicate(env, env->sectors[parser->sectors_count],
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].neighbors[i] = ft_atoi(*line);
src/map_parse_sectors_old.c:		if (env->sectors[parser->sectors_count].neighbors[i] < -1 || env->
src/map_parse_sectors_old.c:				sectors[parser->sectors_count].neighbors[i] >= env->nb_sectors)
src/map_parse_sectors_old.c:					env->sectors[parser->sectors_count].neighbors[i],
src/map_parse_sectors_old.c:		if (env->sectors[parser->sectors_count].neighbors[i] == parser->sectors_count)
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].textures[i] = ft_atoi(*line);
src/map_parse_sectors_old.c:		if (env->sectors[parser->sectors_count].textures[i] < -MAX_SKYBOX
src/map_parse_sectors_old.c:		|| env->sectors[parser->sectors_count].textures[i] >= MAX_WALL_TEXTURE)
src/map_parse_sectors_old.c:					env->sectors[parser->sectors_count].textures[i],
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].align[i].x = ft_atof(*line);
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].align[i].y = ft_atof(*line);
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].scale[i].x = ft_atof(*line);
src/map_parse_sectors_old.c:		if (env->sectors[parser->sectors_count].scale[i].x <= 0)
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].scale[i].y = ft_atof(*line);
src/map_parse_sectors_old.c:		if (env->sectors[parser->sectors_count].scale[i].y <= 0)
src/map_parse_sectors_old.c:		/*if (env->sectors[parser->sectors_count].textures[i] < 0)
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].align[i].x *= env->skyboxes[0].textures[0].surface->w;
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].align[i].y *= env->skyboxes[0].textures[0].surface->h;
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].align[i].x /= 10;
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].align[i].y /= 10;
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].align[i].x *= env->wall_textures[env->sectors[parser->sectors_count].textures[i]].surface->w;
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].align[i].y *= env->wall_textures[env->sectors[parser->sectors_count].textures[i]].surface->h;
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].align[i].x /= 10;
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].align[i].y /= 10;
src/map_parse_sectors_old.c:		if (set_sector_wall_map_array(&env->sectors[parser->sectors_count], 
src/map_parse_sectors_old.c:			env->wall_textures[env->sectors[parser->sectors_count].textures[i]], i,
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].textures[i] = ft_atoi(*line);
src/map_parse_sectors_old.c:		if (env->sectors[parser->sectors_count].textures[i] < -1 || env->sectors[parser->sectors_count].textures[i] >= MAX_TEXTURE)
src/map_parse_sectors_old.c:					env->sectors[parser->sectors_count].textures[i],
src/map_parse_sectors_old.c:		env->sectors[parser->sectors_count].align[i] = new_v2(0, 0);
src/map_parse_sectors_old.c:		if (env->sectors[parser->sectors_count].textures[i] == -1)
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].scale[i] = new_v2(
src/map_parse_sectors_old.c:					env->skyboxes[0].textures[0].surface->w,
src/map_parse_sectors_old.c:					env->skyboxes[0].textures[0].surface->h / 10);
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].scale[i] = new_v2(
src/map_parse_sectors_old.c:					env->wall_textures[env->sectors[parser->sectors_count].textures[i]].surface->w,
src/map_parse_sectors_old.c:					env->wall_textures[env->sectors[parser->sectors_count].textures[i]].surface->h);
src/map_parse_sectors_old.c:		if ((env->sectors[parser->sectors_count].nb_sprites[i] = count_wall_sprites(*line, parser)) == -1)
src/map_parse_sectors_old.c:		if (!(env->sectors[parser->sectors_count].sprites[i].sprite = (int*)ft_memalloc(sizeof(int) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_old.c:		if (!(env->sectors[parser->sectors_count].sprites[i].pos = (t_v2*)ft_memalloc(sizeof(t_v2) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_old.c:		if (!(env->sectors[parser->sectors_count].sprites[i].scale = (t_v2*)ft_memalloc(sizeof(t_v2) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_old.c:		while (j < env->sectors[parser->sectors_count].nb_sprites[i])
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].sprite[j] = ft_atoi(*line);
src/map_parse_sectors_old.c:			if (env->sectors[parser->sectors_count].sprites[i].sprite[j] < -1
src/map_parse_sectors_old.c:					|| env->sectors[parser->sectors_count].sprites[i].sprite[j] > MAX_WALL_SPRITES)
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].pos[j].x = ft_atof(*line);
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].pos[j].y = ft_atof(*line);
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].scale[j].x = ft_atof(*line);
src/map_parse_sectors_old.c:			if (env->sectors[parser->sectors_count].sprites[i].scale[j].x <= 0)
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].scale[j].y = ft_atof(*line);
src/map_parse_sectors_old.c:			if (env->sectors[parser->sectors_count].sprites[i].scale[j].y <= 0)
src/map_parse_sectors_old.c:		/*env->sectors[parser->sectors_count].nb_sprites[i] = 1;
src/map_parse_sectors_old.c:		if (!(env->sectors[parser->sectors_count].sprites[i].sprite = (int*)ft_memalloc(sizeof(int) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_old.c:		if (!(env->sectors[parser->sectors_count].sprites[i].pos = (t_v2*)ft_memalloc(sizeof(t_v2) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_old.c:		if (!(env->sectors[parser->sectors_count].sprites[i].scale = (t_v2*)ft_memalloc(sizeof(t_v2) * env->sectors[parser->sectors_count].nb_sprites[i])))
src/map_parse_sectors_old.c:		while (j < env->sectors[parser->sectors_count].nb_sprites[i])
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].sprite[j] = ft_atoi(*line);
src/map_parse_sectors_old.c:			if (env->sectors[parser->sectors_count].sprites[i].sprite[j] < -1
src/map_parse_sectors_old.c:					|| env->sectors[parser->sectors_count].sprites[i].sprite[j] > MAX_SPRITES)
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].pos[j].x = ft_atof(*line);
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].pos[j].y = ft_atof(*line);
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].scale[j].x = ft_atof(*line);
src/map_parse_sectors_old.c:			if (env->sectors[parser->sectors_count].sprites[i].scale[j].x <= 0)
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].sprites[i].scale[j].y = ft_atof(*line);
src/map_parse_sectors_old.c:			if (env->sectors[parser->sectors_count].sprites[i].scale[j].y <= 0)
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].nb_sprites[i] = env->sectors[parser->sectors_count].nb_sprites[0];
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].brightness = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].light_color = 0xFF409CFF;
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].brightness < -255 ||
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].brightness > 255)
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].intensity = 0;
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].brightness = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].light_color = 0xFFFFFFFF;
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].brightness < -255 ||
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].brightness > 255)
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].status = ft_atoi(*line);
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].status > 5 ||
src/map_parse_sectors_old.c:			env->sectors[parser->sectors_count].status < 0)
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].tp.x = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].tp.y = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].tp.x = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].tp.y = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].enemy_flag = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].activated = ft_atoi(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].start_floor = ft_atof(*line);
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].sprite_time = 0;
src/map_parse_sectors_old.c:	env->sectors[parser->sectors_count].num = parser->sectors_count;
src/map_parse_sectors_old.c:	if (env->sectors[parser->sectors_count].ceiling
src/map_parse_sectors_old.c:			< env->sectors[parser->sectors_count].floor)
src/map_parse_sectors_old.c:	while (parser->sectors_count < env->nb_sectors
src/map_parse_sectors_old.c:					env->nb_sectors - parser->sectors_count);
src/map_parse_sectors_utils.c:		if (sector_eq(sector, env->sectors[i]))
src/map_parse_vertices.c:		if (vertex.x == env->vertices[i].x && vertex.y == env->vertices[i].y)
src/map_parse_vertices.c:	env->vertices[parser->vertices_count].num = parser->vertices_count;
src/map_parse_vertices.c:	env->vertices[parser->vertices_count].y = ft_atof(line);
src/map_parse_vertices.c:	env->vertices[parser->vertices_count].x = ft_atof(line);
src/map_parse_vertices.c:	if (check_vertex_duplicate(env, env->vertices[parser->vertices_count],
src/map_parse_vertices.c:	while (parser->vertices_count < env->nb_vertices
src/map_parse_vertices.c:					env->nb_vertices - parser->vertices_count);
src/map_parser.c:			env->nb_vertices = ft_atoi(line);
src/map_parser.c:			if (env->nb_vertices < 3)
src/map_parser.c:			if (!(env->vertices = (t_vertex *)ft_memalloc(sizeof(t_vertex)
src/map_parser.c:							* (env->nb_vertices))))
src/map_parser.c:			env->nb_sectors = atoi(line);
src/map_parser.c:			env->screen_sectors_size = ft_min(env->nb_sectors, env->w);
src/map_parser.c:			if (env->nb_sectors < 1)
src/map_parser.c:			if (!(env->sectors = (t_sector *)ft_memalloc(sizeof(t_sector)
src/map_parser.c:							* env->nb_sectors)))
src/map_parser.c:			while (i < env->nb_sectors)
src/map_parser.c:				ft_bzero(&env->sectors[i], sizeof(t_sector));
src/map_parser.c:				env->sectors[i].x_max = -2147483648;
src/map_parser.c:		if (sector->x_max < env->vertices[sector->vertices[i]].x)
src/map_parser.c:			sector->x_max = env->vertices[sector->vertices[i]].x;
src/map_parser.c:	while (i < env->nb_sectors)
src/map_parser.c:		set_sector_xmax(env, &env->sectors[i]);
src/map_parser.c:	env->player.eyesight = 6;
src/map_parser.c:	env->player.size_2d = 0.75;
src/map_parser.c:	env->player.sector = -1;
src/map_parser.c:	env->player.camera.angle_z_cos = cos(0);
src/map_parser.c:	env->player.camera.angle_z_sin = sin(0);
src/map_parser.c:	env->player.speed = 0.1;
src/map_parser.c:	env->player.pos.z = 0;
src/map_parser.c:	env->player.health = 100;
src/map_parser.c:	env->player.killed = 0;
src/map_parser.c:	env->player.touched = 0;
src/map_parser.c:	env->player.nb_shots = 0;
src/map_parser.c:	env->player.accuracy = 0;
src/map_parser.c:	env->player.size_2d = 0.75;
src/map_parser.c:	env->player.velocity = 0;
src/map_parser.c:	env->player.acceleration = 0;
src/map_parser.c:	env->player.drop_flag = 0;
src/map_parser.c:	env->gravity.velocity = 0;
src/map_parser.c:	env->gravity.acceleration = 0;
src/map_parser.c:	env->player.state.drop = 0;
src/map_parser.c:	env->player.state.fall = 0;
src/map_parser.c:	env->player.state.climb = 0;
src/map_parser.c:	env->player.state.jump = 0;
src/map_parser.c:	env->player.state.fly = 0;
src/map_parser.c:	env->player.state.crouch = 0;
src/map_parser.c:	env->player.state.walk = 0;
src/map_parser.c:	env->gravity.collision = 0;
src/map_parser.c:	env->player.in_combat = 0;
src/map_parser.c:	env->nb_sectors = 0;
src/map_parser.c:	env->nb_vertices = 0;
src/map_parser.c:	if (env->player.sector == -1)
src/menu_tools.c:	while (xx < env->sprite_textures[i].surface->w && xx < env->w)
src/menu_tools.c:		while (yy < env->sprite_textures[i].surface->h && yy < env->h)
src/menu_tools.c:			if (env->sprite_textures[i].str[xx + env->sprite_textures[i].surface->w * yy] != 0xFFC10099)
src/menu_tools.c:				env->sdl.texture_pixels[(x + (y * env->w)) + xx + env->w * yy] = env->sprite_textures[i].str[xx + env->sprite_textures[i].surface->w * yy];
src/menu_tools.c:	env->button[ref_but].x = x;
src/menu_tools.c:	env->button[ref_but].y = y;
src/menu_tools.c:	env->button[ref_but].image = text;
src/menu_tools.c:	env->button[ref_but].id = ref_but;
src/minimap.c:	size.x = env->minimap_size.x / 2;
src/minimap.c:	size.y = env->minimap_size.y / 2;
src/minimap.c:	pixels = env->sdl.texture_pixels;
src/minimap.c:	if (x >= 0 && x < env->w && y >= 0 && y < env->h
src/minimap.c:		&& x >= env->minimap_pos.x - size.x
src/minimap.c:		&& x <= env->minimap_pos.x + size.x
src/minimap.c:		&& y >= env->minimap_pos.y - size.y
src/minimap.c:		&& y <= env->minimap_pos.y + size.y)
src/minimap.c:		if (color == 0xFFFF0000 || (pixels[x + env->w * y] != 0xFF00FF00
src/minimap.c:			&& pixels[x + env->w * y] != 0xFFFFFFF))
src/minimap.c:			if (x >= 0 && x < env->w && y >= 0 && y <= env->h)
src/minimap.c:				pixels[x + env->w * y] = color;
src/minimap.c:	x = env->minimap_pos.x - 2;
src/minimap.c:	while (x < env->minimap_pos.x + 3)
src/minimap.c:		y = env->minimap_pos.y - 2;
src/minimap.c:		while (y < env->minimap_pos.y + 3)
src/minimap.c:			(env->player.camera.near_left_pos.x - env->player.pos.x) * env->options.minimap_scale + env->minimap_pos.x,
src/minimap.c:			(env->player.camera.near_left_pos.y - env->player.pos.y) * env->options.minimap_scale + env->minimap_pos.y,
src/minimap.c:			(env->player.camera.angle_cos * env->player.camera.far_z - env->player.camera.angle_sin * env->player.camera.far_left) * env->options.minimap_scale + env->minimap_pos.x,
src/minimap.c:			(env->player.camera.angle_sin * env->player.camera.far_z + env->player.camera.angle_cos * env->player.camera.far_left) * env->options.minimap_scale + env->minimap_pos.y,
src/minimap.c:			(env->player.camera.near_right_pos.x - env->player.pos.x) * env->options.minimap_scale + env->minimap_pos.x,
src/minimap.c:			(env->player.camera.near_right_pos.y - env->player.pos.y) * env->options.minimap_scale + env->minimap_pos.y,
src/minimap.c:	if (!env->options.test)
src/minimap.c:			(env->player.camera.angle_cos * env->player.camera.far_z - env->player.camera.angle_sin * env->player.camera.far_right) * env->options.minimap_scale + env->minimap_pos.x,
src/minimap.c:			(env->player.camera.angle_sin * env->player.camera.far_z + env->player.camera.angle_cos * env->player.camera.far_right) * env->options.minimap_scale + env->minimap_pos.y,
src/minimap.c:	p0.x = env->player.camera.angle_cos * env->player.camera.near_z * env->options.minimap_scale + env->minimap_pos.x;
src/minimap.c:	p0.y = env->player.camera.angle_sin * env->player.camera.near_z * env->options.minimap_scale + env->minimap_pos.y;
src/minimap.c:	p1.x = p0.x + env->player.camera.perp_cos * env->w * env->options.minimap_scale;
src/minimap.c:	p1.y = p0.y + env->player.camera.perp_sin * env->w * env->options.minimap_scale;
src/minimap.c:	p0.x = p0.x - env->player.camera.perp_cos * env->w * env->options.minimap_scale;
src/minimap.c:	p0.y = p0.y - env->player.camera.perp_sin * env->w * env->options.minimap_scale;
src/minimap.c:	if (env->options.test)
src/minimap.c:	p0.x = env->minimap_pos.x;
src/minimap.c:	p0.y = env->minimap_pos.y;
src/minimap.c:	p1.x = env->player.camera.angle_cos * env->player.camera.near_z * env->options.minimap_scale + p0.x;
src/minimap.c:	p1.y = env->player.camera.angle_sin * env->player.camera.near_z * env->options.minimap_scale + p0.y;
src/minimap.c:	y = env->minimap_pos.y - env->minimap_size.y / 2;
src/minimap.c:	y_max = env->minimap_pos.y + env->minimap_size.y / 2;
src/minimap.c:	x_max = env->minimap_pos.x + env->minimap_size.x / 2;
src/minimap.c:		x = env->minimap_pos.x - env->minimap_size.x / 2;
src/minimap.c:			if (x == env->minimap_pos.x
src/minimap.c:				- env->minimap_size.x / 2
src/minimap.c:				|| x == env->minimap_pos.x
src/minimap.c:				+ env->minimap_size.x / 2
src/minimap.c:				|| y == env->minimap_pos.y
src/minimap.c:				- env->minimap_size.y / 2
src/minimap.c:				|| y == env->minimap_pos.y
src/minimap.c:				+ env->minimap_size.y / 2)
src/minimap.c:			else if (x >= 0 && x < env->w && y >= 0 && y < env->h)
src/minimap.c:				env->sdl.texture_pixels[x + y * env->w] = 
src/minimap.c:				blend_alpha(env->sdl.texture_pixels[x
src/minimap.c:				+ y * env->w], 0, 128);
src/minimap.c:	if (sector.num == env->player.sector)
src/minimap.c:	TTF_SizeText(env->sdl.fonts.lato20, num, &text_size.x, &text_size.y); 
src/minimap.c:		pos.x += env->minimap_pos.x + (env->vertices[sector.vertices[i]].x - env->player.pos.x) * env->options.minimap_scale;
src/minimap.c:		pos.y += env->minimap_pos.y + (env->vertices[sector.vertices[i]].y - env->player.pos.y) * env->options.minimap_scale;
src/minimap.c:	if (pos.x - text_size.x >= env->minimap_pos.x - env->minimap_size.x / 2 - 3
src/minimap.c:		&& pos.x < env->minimap_pos.x + env->minimap_size.x / 2 - 3
src/minimap.c:		&& pos.y - text_size.y >= env->minimap_pos.y - env->minimap_size.y / 2 - 3
src/minimap.c:		&& pos.y< env->minimap_pos.y + env->minimap_size.y / 2 - 3)
src/minimap.c:		print_text(new_point(pos.y - text_size.y / 2, pos.x - text_size.x / 2), new_printable_text(num, env->sdl.fonts.lato20, color, 20), env);
src/minimap.c:	pixels = env->sdl.texture_pixels;
src/minimap.c:	while (++i < env->nb_objects)
src/minimap.c:		object = env->objects[i];
src/minimap.c:		pos.x = env->minimap_pos.x + (object.pos.x - env->player.pos.x) * env->options.minimap_scale;
src/minimap.c:			pos.y = env->minimap_pos.y + (object.pos.y - env->player.pos.y) * env->options.minimap_scale;
src/minimap.c:				if (x > env->w - 300 && x < env->w && y >= 0 && y < 300)
src/minimap.c:					pixels[x + y * env->w] = 0xFFFF0000;
src/minimap.c:	while (s < env->nb_sectors)
src/minimap.c:		sect = env->sectors[s];
src/minimap.c:		if (env->player.head_z > sect.floor_min
src/minimap.c:				&& env->player.head_z < sect.ceiling_max)
src/minimap.c:			if (s == env->player.sector)
src/minimap.c:				line.p0.x = env->minimap_pos.x + (env->vertices[sect.vertices[v]].x - env->player.pos.x) * env->options.minimap_scale;
src/minimap.c:				line.p0.y = env->minimap_pos.y + (env->vertices[sect.vertices[v]].y - env->player.pos.y) * env->options.minimap_scale;
src/minimap.c:				line.p1.x = env->minimap_pos.x + (env->vertices[sect.vertices[v + 1]].x - env->player.pos.x) * env->options.minimap_scale;
src/minimap.c:				line.p1.y = env->minimap_pos.y + (env->vertices[sect.vertices[v + 1]].y - env->player.pos.y) * env->options.minimap_scale;
src/minimap.c:	while (i < env->nb_enemies)
src/minimap.c:		enemy_env->minimap_pos.x = env->w - 150 + (env->enemies[i].pos.x - env->player.pos.x) * env->options.minimap_scale;
src/minimap.c:		enemy_env->minimap_pos.y = 150 + (env->enemies[i].pos.y - env->player.pos.y) * env->options.minimap_scale;
src/minimap.c:		enemy_end.x = enemy_env->minimap_pos.x + 500*cos(env->enemies[i].angle * CONVERT_RADIANS);
src/minimap.c:		enemy_end.y = enemy_env->minimap_pos.y + 500*sin(env->enemies[i].angle * CONVERT_RADIANS);
src/minimap.c:		enemy_end.x = enemy_env->minimap_pos.x + 500*cos(env->enemies[i].angle * CONVERT_RADIANS - 24.5);
src/minimap.c:		enemy_end.y = enemy_env->minimap_pos.y + 500*sin(env->enemies[i].angle * CONVERT_RADIANS - 24.5);
src/minimap.c:		enemy_end.x = enemy_env->minimap_pos.x + 500*cos(env->enemies[i].angle * CONVERT_RADIANS + 24.5);
src/minimap.c:		enemy_end.y = enemy_env->minimap_pos.y + 500*sin(env->enemies[i].angle * CONVERT_RADIANS + 24.5);
src/misc_utils.c:    while (i < env->nb_sectors)
src/misc_utils.c:            env->sector_list[i] = 1;
src/misc_utils.c:            env->sector_list[i] = 0;
src/modify_wall_sprite.c:		env->sectors[param->sector].ceiling_sprites.sprite[param->sprite]
src/modify_wall_sprite.c:		env->sectors[param->sector].ceiling_sprites.pos[param->sprite].x
src/modify_wall_sprite.c:		env->sectors[param->sector].ceiling_sprites.pos[param->sprite].y
src/modify_wall_sprite.c:		env->sectors[param->sector].ceiling_sprites.scale[param->sprite].x
src/modify_wall_sprite.c:		env->sectors[param->sector].ceiling_sprites.scale[param->sprite].y
src/modify_wall_sprite.c:		env->sectors[param->sector].floor_sprites.sprite[param->sprite]
src/modify_wall_sprite.c:		env->sectors[param->sector].floor_sprites.pos[param->sprite].x
src/modify_wall_sprite.c:		env->sectors[param->sector].floor_sprites.pos[param->sprite].y
src/modify_wall_sprite.c:		env->sectors[param->sector].floor_sprites.scale[param->sprite].x
src/modify_wall_sprite.c:		env->sectors[param->sector].floor_sprites.scale[param->sprite].y
src/modify_wall_sprite.c:		env->sectors[param->sector].wall_sprites[param->wall]
src/modify_wall_sprite.c:		env->sectors[param->sector].wall_sprites[param->wall]
src/modify_wall_sprite.c:		env->sectors[param->sector].wall_sprites[param->wall]
src/modify_wall_sprite.c:		env->sectors[param->sector].wall_sprites[param->wall]
src/modify_wall_sprite.c:		env->sectors[param->sector].wall_sprites[param->wall]
src/movement.c:	pos.x = env->player.pos.x;
src/movement.c:	pos.y = env->player.pos.y;
src/movement.c:	slope = get_floor_at_pos(env->sectors[env->player.highest_sect], pos, env);
src/movement.c:	if ((env->player.pos.z > slope || env->player.state.fall || env->player.state.jump)
src/movement.c:			&& !env->player.state.climb && !env->player.state.drop && !env->player.state.fly)
src/movement.c:	if ((env->inputs.space || env->player.state.jump)
src/movement.c:			&& !env->player.state.climb && !env->player.state.drop)
src/movement.c:	if (!env->player.state.jump && !env->player.state.fall
src/movement.c:			&& !env->player.state.climb && !env->player.state.drop
src/movement.c:			&& !env->player.state.fall && !env->player.state.fly)
src/movement.c:	if (((env->inputs.ctrl&& env->player.eyesight > 3)
src/movement.c:				|| env->player.state.crouch) && !env->editor.in_game)
src/movement.c:	env->player.camera.pos.z = env->player.head_z;
src/movement.c:		move = check_collision(env, new_v3(env->player.camera.angle_cos * speed,
src/movement.c:					env->player.camera.angle_sin * speed, 0), motion, 0);
src/movement.c:		move = check_collision(env, new_v3(env->player.camera.angle_cos * speed,
src/movement.c:					env->player.camera.angle_sin * -speed, 0), motion, 0);
src/movement.c:		move = check_collision(env, new_v3(env->player.camera.angle_cos * -speed,
src/movement.c:					env->player.camera.angle_sin * -speed, 0), motion, 0);
src/movement.c:		move = check_collision(env, new_v3(env->player.camera.angle_cos * -speed,
src/movement.c:					env->player.camera.angle_sin * -speed, 0), motion, 0);
src/movement.c:		env->player.stuck = 1;
src/movement.c:		motion = new_movement(env->player.sector, env->player.size_2d, env->player.eyesight, env->player.pos);
src/movement.c:				env->player.pos, env->player.sector);
src/movement.c:		if (new_sector != env->player.sector)
src/movement.c:			env->player.old_sector = env->player.sector;
src/movement.c:			env->player.changed_sector = 1;
src/movement.c:		prev_highest_sect = env->player.highest_sect;
src/movement.c:		env->player.highest_sect = find_highest_sector(env, motion);
src/movement.c:		if (prev_highest_sect != env->player.highest_sect
src/movement.c:				&& get_floor_at_pos(env->sectors[env->player.highest_sect], env->player.pos, env)
src/movement.c:				< get_floor_at_pos(env->sectors[prev_highest_sect], env->player.pos, env) && !env->player.state.fly)
src/movement.c:			env->player.drop_flag = 1;
src/movement.c:		env->player.camera.pos = env->player.pos;
src/movement.c:		env->player.camera.pos.z = env->player.head_z;
src/movement.c:		if (((get_floor_at_pos(env->sectors[env->player.highest_sect], env->player.pos, env) > env->player.pos.z
src/movement.c:			&& get_floor_at_pos(env->sectors[env->player.highest_sect], env->player.pos, env) - env->player.pos.z <= 2
src/movement.c:			&& env->player.highest_sect != new_sector && !env->player.state.fly)
src/movement.c:			|| (env->player.state.climb))
src/movement.c:			&& !env->player.state.drop && !env->player.state.jump && !env->player.state.fly)
src/movement.c:		else if ((((get_floor_at_pos(env->sectors[env->player.highest_sect], env->player.pos, env) < env->player.pos.z
src/movement.c:		&& env->player.pos.z - get_floor_at_pos(env->sectors[env->player.highest_sect], env->player.pos, env) <= 2)
src/movement.c:						|| env->player.state.drop)
src/movement.c:					&& !env->player.state.jump && !env->player.state.fall && !env->player.state.climb)
src/movement.c:				&& env->player.drop_flag && !env->player.state.fly)
src/movement.c:		env->player.sector = new_sector;
src/movement.c:		env->player.camera.pos = env->player.pos;
src/movement.c:		env->player.head_z = env->player.pos.z + env->player.eyesight;
src/movement.c:		env->player.camera.pos.z = env->player.head_z;
src/movement.c:		update_camera_position(&env->player.camera);
src/movement.c:	time = SDL_GetTicks() - env->time.milli_s;
src/movement.c:	if (env->player.sector >= 0)
src/movement.c:		env->player.old_pos = env->player.pos;
src/movement.c:	if (env->inputs.shift && !env->inputs.ctrl)
src/movement.c:		speed = env->player.speed * 1.5;
src/movement.c:	else if (env->inputs.ctrl)
src/movement.c:		speed = env->player.speed / 1.5;
src/movement.c:		speed = env->player.speed;
src/movement.c:	prev_sector = env->player.sector;
src/movement.c:	motion = new_movement(env->player.sector, env->player.size_2d, env->player.eyesight, env->player.pos);
src/movement.c:	if (env->player.state.fly && env->inputs.space)
src/movement.c:	if (env->player.state.fly && env->inputs.lgui)
src/movement.c:	if (env->inputs.forward && !env->inputs.backward)
src/movement.c:		move.x += env->player.camera.angle_cos * speed;
src/movement.c:		move.y += env->player.camera.angle_sin * speed;
src/movement.c:		move.z += (env->player.state.fly) ? -env->player.camera.angle_z * speed : 0;
src/movement.c:	else if (env->inputs.backward && !env->inputs.forward)
src/movement.c:		move.x += env->player.camera.angle_cos * -speed;
src/movement.c:		move.y += env->player.camera.angle_sin * -speed;
src/movement.c:		move.z += (env->player.state.fly) ? env->player.camera.angle_z * speed : 0;
src/movement.c:	if (env->inputs.left && !env->inputs.right)
src/movement.c:		move.x += env->player.camera.angle_sin * speed;
src/movement.c:		move.y += env->player.camera.angle_cos * -speed;
src/movement.c:	else if (env->inputs.right && !env->inputs.left)
src/movement.c:		move.x += env->player.camera.angle_sin * -speed;
src/movement.c:		move.y += env->player.camera.angle_cos * speed;
src/movement.c:	env->player.pos.x += move.x;
src/movement.c:	env->player.pos.y += move.y;
src/movement.c:	env->player.pos.z += move.z;
src/movement.c:	if (env->player.stuck || get_sector_no_z_origin(env, env->player.pos, env->player.sector) == -1)
src/movement.c:		env->player.stuck = 0;
src/movement.c:		env->player.pos = env->player.old_pos;
src/movement.c:		env->player.sector = get_sector_no_z_origin(env, env->player.pos, prev_sector);
src/movement.c:	if (!movement && (env->player.state.climb || env->player.state.drop))
src/movement_collision.c:	if (pos.z + motion.eyesight > get_ceiling_at_pos(env->sectors[sector_dest],
src/movement_collision.c:	floor = get_floor_at_pos(env->sectors[sector_dest], pos, env);
src/movement_collision.c:	if (env->player.state.jump && pos.z < floor)
src/movement_collision.c:	while (i < env->nb_objects)
src/movement_collision.c:		if (env->objects[i].exists && env->objects[i].solid)
src/movement_collision.c:			if (distance_two_points_2d(env->objects[i].pos.x,
src/movement_collision.c:				env->objects[i].pos.y, futur.x, futur.y) < 1.75
src/movement_collision.c:				&& env->objects[i].pos.z >= futur.z - 1 &&
src/movement_collision.c:				env->objects[i].pos.z <= eyesight + futur.z +
src/movement_collision.c:				env->objects[i].height)
src/movement_collision.c:	env->sector_list[wall.sector_dest] = 1;
src/movement_collision.c:	while (i < env->sectors[wall.sector_dest].nb_vertices)
src/movement_collision.c:			(RNEIGHBOR < 0 || (env->sectors[wall.sector_dest].portals[i] == 0 &&
src/movement_collision.c:			env->sectors[wall.sector_dest].portals[i] != wall.sector_or)))
src/movement_collision.c:	while (i < env->sectors[wall.sector_dest].nb_vertices)
src/movement_collision.c:			env->sector_list[RNEIGHBOR] == 0 && env->sectors[wall.sector_dest].portals[i] == 1)
src/movement_collision.c:		move.z = get_ceiling_at_pos(env->sectors[motion.lowest_ceiling], motion.pos, env) - 1 - (motion.pos.z + motion.eyesight);
src/movement_collision.c:		move.z = get_floor_at_pos(env->sectors[motion.sector], motion.pos, env) - motion.pos.z;
src/movement_collision.c:	while (i < env->sectors[motion.sector].nb_vertices)
src/movement_collision.c:			(NEIGHBOR < 0 || env->sectors[motion.sector].portals[i] == 0))
src/movement_collision.c:	while (i < env->sectors[motion.sector].nb_vertices)
src/movement_collision.c:			NEIGHBOR >= 0 && env->sectors[motion.sector].portals[i] == 1)
src/movement_utils.c:	height = motion.eyesight + env->sectors[sector_dest].floor +
src/movement_utils.c:		(env->sectors[sector_dest].normal.x * (motion.pos.x - FUTURE_V0X) -
src/movement_utils.c:		env->sectors[sector_dest].normal.y * (motion.pos.y - FUTURE_V0Y)) *
src/movement_utils.c:		env->sectors[sector_dest].floor_slope;
src/movement_utils.c:	env->sector_list[wall.sector_dest] = 1;
src/movement_utils.c:	while (i < env->sectors[wall.sector_dest].nb_vertices)
src/movement_utils.c:			env->sector_list[RNEIGHBOR] == 0)
src/movement_utils.c:	while (i < env->sectors[motion.sector].nb_vertices)
src/movement_utils.c:	height = get_floor_at_pos(env->sectors[motion.sector], motion.pos, env);
src/movement_utils.c:	while (i < env->nb_sectors)
src/movement_utils.c:		if (env->sector_list[i])
src/movement_utils.c:			s_height = get_floor_at_pos(env->sectors[i], motion.pos, env);
src/movement_utils.c:	height = get_ceiling_at_pos(env->sectors[motion.sector], motion.pos, env);
src/movement_utils.c:	while (i < env->nb_sectors)
src/movement_utils.c:		if (env->sector_list[i])
src/movement_utils.c:			s_height = get_ceiling_at_pos(env->sectors[i], motion.pos, env);
src/new_death_event.c:	/*if (!(env->sectors[eparser->sector].death_event = (t_event*)ft_realloc(
src/new_death_event.c:		env->sectors[eparser->sector].death_event,
src/new_death_event.c:		sizeof(t_event) * env->sectors[eparser->sector].nb_death_events,
src/new_death_event.c:		sizeof(t_event) * (env->sectors[eparser->sector].nb_death_events + 1))))
src/new_death_event.c:	env->sectors[eparser->sector].nb_death_events++;*/
src/new_global_event.c:	if (!(env->global_events = (t_event*)ft_realloc(env->global_events,
src/new_global_event.c:		sizeof(t_event) * env->nb_global_events,
src/new_global_event.c:		sizeof(t_event) * (env->nb_global_events + 1))))
src/new_global_event.c:	env->global_events[env->nb_global_events] = eparser->event;
src/new_global_event.c:	env->nb_global_events++;
src/new_press_event.c:	if (!(env->sectors[eparser->trigger_sector].wall_sprites[eparser->
src/new_press_event.c:		(t_event*)ft_realloc(env->sectors[eparser->trigger_sector].
src/new_press_event.c:		trigger_sprite], sizeof(t_event) * env->sectors[eparser->
src/new_press_event.c:		* (env->sectors[eparser->trigger_sector].wall_sprites[eparser->
src/new_press_event.c:	env->sectors[eparser->trigger_sector].wall_sprites[eparser->trigger_wall].
src/new_press_event.c:	press_events[eparser->trigger_sprite][env->sectors[eparser->trigger_sector].
src/new_press_event.c:	env->sectors[eparser->trigger_sector].wall_sprites[eparser->trigger_wall]
src/new_shoot_event.c:	if (!(env->sectors[eparser->trigger_sector].wall_sprites[eparser->
src/new_shoot_event.c:		(t_event*)ft_realloc(env->sectors[eparser->trigger_sector].
src/new_shoot_event.c:		sizeof(t_event) * env->sectors[eparser->trigger_sector].
src/new_shoot_event.c:		sizeof(t_event) * (env->sectors[eparser->trigger_sector].
src/new_shoot_event.c:	env->sectors[eparser->trigger_sector].wall_sprites[eparser->trigger_wall].
src/new_shoot_event.c:	shoot_events[eparser->trigger_sprite][env->sectors[eparser->trigger_sector].
src/new_shoot_event.c:	env->sectors[eparser->trigger_sector].wall_sprites[eparser->trigger_wall].
src/new_stand_event.c:	if (!(env->sectors[eparser->trigger_sector].stand_events =
src/new_stand_event.c:		(t_event*)ft_realloc(env->sectors[eparser->trigger_sector].stand_events,
src/new_stand_event.c:		sizeof(t_event) * env->sectors[eparser->trigger_sector].nb_stand_events,
src/new_stand_event.c:		sizeof(t_event) * (env->sectors[eparser->trigger_sector].
src/new_stand_event.c:	env->sectors[eparser->trigger_sector].stand_events[env->sectors[eparser->
src/new_stand_event.c:	env->sectors[eparser->trigger_sector].nb_stand_events++;
src/new_tabs_position.c:	if (env->editor.in_game && env->editor.tab &&
src/new_tabs_position.c:	(env->selected_ceiling_sprite != -1 || env->selected_floor_sprite != -1
src/new_tabs_position.c:	|| env->selected_wall_sprite_sprite != -1))
src/new_tabs_position.c:		env->editor.sprite_tab.pos = new_point(0, 425);
src/new_tabs_position.c:		env->editor.events_tab.pos = new_point(238, 425);
src/new_tabs_position.c:		env->editor.sprite_tab.pos = new_point(238, 425);
src/new_tabs_position.c:		env->editor.events_tab.pos = new_point(357, 425);
src/new_walk_in_event.c:	if (!(env->sectors[eparser->trigger_sector].walk_in_events =
src/new_walk_in_event.c:		(t_event*)ft_realloc(env->sectors[eparser->trigger_sector].
src/new_walk_in_event.c:		* env->sectors[eparser->trigger_sector].nb_walk_in_events,
src/new_walk_in_event.c:		* (env->sectors[eparser->trigger_sector].nb_walk_in_events + 1))))
src/new_walk_in_event.c:	env->sectors[eparser->trigger_sector].walk_in_events[env->
src/new_walk_in_event.c:	env->sectors[eparser->trigger_sector].nb_walk_in_events++;
src/new_walk_out_event.c:	if (!(env->sectors[eparser->trigger_sector].walk_out_events =
src/new_walk_out_event.c:		(t_event*)ft_realloc(env->sectors[eparser->trigger_sector].
src/new_walk_out_event.c:		* env->sectors[eparser->trigger_sector].nb_walk_out_events,
src/new_walk_out_event.c:		* (env->sectors[eparser->trigger_sector].nb_walk_out_events + 1))))
src/new_walk_out_event.c:	env->sectors[eparser->trigger_sector].walk_out_events[env->
src/new_walk_out_event.c:	env->sectors[eparser->trigger_sector].nb_walk_out_events++;
src/object_parser.c:		|| eparser->current_object >= env->nb_objects)
src/objects_selection.c:	if (env->inputs.left_click && env->editor.dragged_object != -1)
src/objects_selection.c:		env->objects[env->editor.dragged_object].pos.x = (env->sdl.mx - env->editor.center.x) / env->editor.scale;
src/objects_selection.c:		env->objects[env->editor.dragged_object].pos.y = (env->sdl.my - env->editor.center.y) / env->editor.scale;
src/objects_selection.c:		env->editor.dragged_object = -1;
src/objects_utils.c:    while (i < env->nb_objects)
src/objects_utils.c:        if (env->objects[i].exists && distance_two_points_2d(env->objects[i].pos.x, env->objects[i].pos.y, pos.x, pos.y) < 1.75 &&
src/objects_utils.c:            pos.z <= env->objects[i].height + env->objects[i].pos.z && pos.z >= env->objects[i].pos.z)
src/objects_utils.c:			if (env->objects[i].type == HEAL && env->player.health < 100)
src/objects_utils.c:				env->player.health += env->objects[i].quantity;
src/objects_utils.c:				env->player.health = (env->player.health > 100) ? 100 : env->player.health;
src/objects_utils.c:				env->objects[i].exists = 0;
src/objects_utils.c:			if (env->objects[i].type == AMMO)
src/objects_utils.c:					if (env->weapons[j].ammo_type == env->objects[i].ammo_type && env->weapons[j].possessed && env->weapons[j].ammo < env->weapons[j].max_ammo)
src/objects_utils.c:						env->weapons[j].ammo += env->objects[i].quantity;
src/objects_utils.c:						env->weapons[j].ammo = (env->weapons[j].ammo > env->weapons[j].max_ammo) ? 
src/objects_utils.c:							env->weapons[j].max_ammo : env->weapons[j].ammo;
src/objects_utils.c:						env->objects[i].exists = 0;
src/objects_utils.c:			if (env->objects[i].type == ARMOR && env->player.armor < 100)
src/objects_utils.c:				env->player.armor += env->objects[i].quantity;
src/objects_utils.c:				env->objects[i].exists = 0;
src/objects_utils.c:				env->player.armor = (env->player.armor > 100) ? 100 : env->player.armor;
src/objects_utils.c:			if (env->objects[i].type == WEAPON)
src/objects_utils.c:				if (!env->weapons[env->objects[i].weapon].possessed)
src/objects_utils.c:					env->weapons[env->objects[i].weapon].possessed = 1;
src/objects_utils.c:					env->objects[i].exists = 0;
src/objects_utils.c:						if (env->weapons[j].ammo_type == env->objects[i].ammo_type && env->weapons[j].possessed && env->weapons[j].ammo < env->weapons[j].max_ammo)
src/objects_utils.c:							env->weapons[j].ammo += env->objects[i].quantity;
src/objects_utils.c:							env->weapons[j].ammo = (env->weapons[j].ammo > env->weapons[j].max_ammo) ? 
src/objects_utils.c:								env->weapons[j].max_ammo : env->weapons[j].ammo;
src/objects_utils.c:							env->objects[i].exists = 0;
src/physics.c:	new_time = env->time.milli_s;
src/physics.c:	env->time.milli_s = SDL_GetTicks();
src/physics.c:	env->player.rotation_speed = ((env->time.milli_s - new_time) / 1000.0) * 0.2;
src/physics.c:	env->time.tenth_s = env->time.milli_s / 100.0;
src/physics.c:	pos.x = env->player.pos.x;
src/physics.c:	pos.y = env->player.pos.y;
src/physics.c:	slope = get_floor_at_pos(env->sectors[env->player.highest_sect], pos, env);
src/physics.c:	if (!env->player.state.climb)
src/physics.c:		env->player.state.climb = 1;
src/physics.c:		env->time.last_climb = SDL_GetTicks() / 100.0;
src/physics.c:		env->player.velocity = 0.4;
src/physics.c:	if (env->player.state.climb)
src/physics.c:		env->time.d_time = time - env->time.last_climb;
src/physics.c:		env->player.pos.z += env->time.d_time * env->player.velocity;
src/physics.c:	if (env->player.pos.z >= slope)
src/physics.c:		env->player.pos.z = slope;
src/physics.c:		env->player.state.climb = 0;
src/physics.c:		env->player.velocity = 0;
src/physics.c:		env->time.d_time = 0;
src/physics.c:	pos.x = env->player.pos.x;
src/physics.c:	pos.y = env->player.pos.y;
src/physics.c:	slope = get_floor_at_pos(env->sectors[env->player.highest_sect], pos, env);
src/physics.c:	if (!env->player.state.drop)
src/physics.c:		env->player.state.drop = 1;
src/physics.c:		env->time.last_drop = SDL_GetTicks() / 100.0;
src/physics.c:		env->player.velocity = 0.4;
src/physics.c:	if (env->player.state.drop)
src/physics.c:		env->time.d_time = time - env->time.last_drop;
src/physics.c:		env->player.pos.z -= env->time.d_time * env->player.velocity;	
src/physics.c:	if (env->player.pos.z < slope)
src/physics.c:		env->player.pos.z = slope;
src/physics.c:		env->player.state.drop = 0;
src/physics.c:		env->player.velocity = 0;
src/physics.c:		env->time.d_time = 0;
src/physics.c:		env->player.drop_flag = 0;
src/physics.c:	if (!env->player.state.fall && !env->player.state.jump && !env->player.state.fly)
src/physics.c:		env->gravity.velocity = 25.0;
src/physics.c:		env->player.state.jump = 1;
src/physics.c:		env->player.start_pos = env->player.pos.z;
src/physics.c:		env->player.pos.z += 0.00001;
src/physics.c:	pos.x = env->player.pos.x;
src/physics.c:	pos.y = env->player.pos.y;
src/physics.c:	if (!env->player.state.crouch)
src/physics.c:		env->player.state.crouch = 1;
src/physics.c:		env->time.last_crouch = time;
src/physics.c:	if (env->player.state.crouch && env->inputs.ctrl)
src/physics.c:		env->time.d_time = time - env->time.last_crouch;
src/physics.c:		env->player.eyesight -= env->time.d_time * 0.3;	
src/physics.c:	if (env->player.state.crouch && !env->inputs.ctrl)
src/physics.c:		env->time.d_time = time - env->time.last_crouch;
src/physics.c:		env->player.eyesight += env->time.d_time * 0.2;	
src/physics.c:	if ((env->player.eyesight <= 3 && env->inputs.ctrl)
src/physics.c:	|| (env->player.eyesight >= 6 && !env->inputs.ctrl)
src/physics.c:	|| ((env->player.pos.z + env->player.eyesight >
src/physics.c:	get_ceiling_at_pos(env->sectors[env->player.sector], pos, env) - 1)
src/physics.c:	&& env->player.eyesight < 6))
src/physics.c:		if (env->inputs.ctrl)
src/physics.c:			env->player.eyesight = 3;
src/physics.c:			if (env->player.pos.z + env->player.eyesight >
src/physics.c:			get_ceiling_at_pos(env->sectors[env->player.sector], pos, env) - 1
src/physics.c:			&& env->player.eyesight < 6)
src/physics.c:				env->player.eyesight = get_ceiling_at_pos(env->sectors[env->player.sector], pos, env) - 1 - env->player.pos.z;
src/physics.c:			else if (env->player.eyesight > 6)
src/physics.c:				env->player.state.crouch = 0;
src/physics.c:				env->player.eyesight = 6;
src/physics.c:		env->time.d_time = 0;
src/player_keys.c:	if (env->inputs.forward || env->inputs.backward || env->inputs.left
src/player_keys.c:			|| env->inputs.right)
src/player_keys.c:		Mix_PlayChannel(-1, env->sound.footstep, 0);
src/player_keys.c:	if (!env->input_box.state && (((env->inputs.forward || env->inputs.backward || env->inputs.left
src/player_keys.c:			|| env->inputs.right || env->inputs.space || env->jump.on_going == 1
src/player_keys.c:			|| env->crouch.on_going || env->inputs.ctrl)
src/player_keys.c:			&& !env->editor.in_game && env->player.health > 0)
src/player_keys.c:			||  ((((env->selected_enemy == -1 && env->editor.tab)
src/player_keys.c:				|| (env->selected_enemy != -1 && !env->editor.tab))
src/player_keys.c:				|| (env->selected_enemy == -1 && !env->editor.tab))
src/player_keys.c:			&& (env->editor.in_game && !env->inputs.ctrl))
src/player_keys.c:			|| (env->player.state.climb || env->player.state.drop)))
src/player_selection.c:	if (env->inputs.left_click && env->editor.dragged_player == 1)
src/player_selection.c:		env->player.pos.x =	(env->sdl.mx - env->editor.center.x) / env->editor.scale;
src/player_selection.c:		env->player.pos.y =	(env->sdl.my - env->editor.center.y) / env->editor.scale;
src/player_selection.c:		env->editor.dragged_player = -1;
src/pop_events.c:	tmp = env->events;
src/pop_events.c:	tmp_values = env->queued_values;
src/pop_events.c:				env->events = tmp;
src/pop_events.c:				env->queued_values = tmp_values;
src/precompute_floor_ceiling_sprites_scales.c:	env->sectors[sector].floor_sprites_scale[sprite].x = env->
src/precompute_floor_ceiling_sprites_scales.c:	object_sprites[env->sectors[sector].floor_sprites.sprite[sprite]].size[0].x
src/precompute_floor_ceiling_sprites_scales.c:	/ env->sectors[sector].floor_sprites.scale[sprite].x;
src/precompute_floor_ceiling_sprites_scales.c:	env->sectors[sector].floor_sprites_scale[sprite].y = env->
src/precompute_floor_ceiling_sprites_scales.c:	object_sprites[env->sectors[sector].floor_sprites.sprite[sprite]].size[0].y
src/precompute_floor_ceiling_sprites_scales.c:	/ env->sectors[sector].floor_sprites.scale[sprite].y;
src/precompute_floor_ceiling_sprites_scales.c:	env->sectors[sector].ceiling_sprites_scale[sprite].x = env->
src/precompute_floor_ceiling_sprites_scales.c:	object_sprites[env->sectors[sector].ceiling_sprites.sprite[sprite]].size[0].x
src/precompute_floor_ceiling_sprites_scales.c:	/ env->sectors[sector].ceiling_sprites.scale[sprite].x;
src/precompute_floor_ceiling_sprites_scales.c:	env->sectors[sector].ceiling_sprites_scale[sprite].y = env->
src/precompute_floor_ceiling_sprites_scales.c:	object_sprites[env->sectors[sector].ceiling_sprites.sprite[sprite]].size[0].y
src/precompute_floor_ceiling_sprites_scales.c:	/ env->sectors[sector].ceiling_sprites.scale[sprite].y;
src/precompute_neighbors.c:	neighbor = env->sectors[sector->neighbors[i]];
src/precompute_neighbors.c:	/*camera->v[sector->num][i].neighbor_f1 = env->h_h + (neighbor.v[nv1].clipped_vf1
src/precompute_neighbors.c:	camera->v[sector->num][i].neighbor_f2 = env->h_h + (neighbor.v[nv2].clipped_vf2
src/precompute_neighbors.c:	camera->v[sector->num][i].neighbor_c1 = env->h_h + (neighbor.v[nv1].clipped_vc1
src/precompute_neighbors.c:	camera->v[sector->num][i].neighbor_c2 = env->h_h + (neighbor.v[nv2].clipped_vc2
src/precompute_neighbors.c:	camera->v[sector->num][i].neighbor_f1 = env->h_h + (neighbor.floors[nv1]
src/precompute_neighbors.c:	camera->v[sector->num][i].neighbor_f2 = env->h_h + (neighbor.floors[nv2]
src/precompute_neighbors.c:	camera->v[sector->num][i].neighbor_c1 = env->h_h + (neighbor.ceilings[nv1]
src/precompute_neighbors.c:	camera->v[sector->num][i].neighbor_c2 = env->h_h + (neighbor.ceilings[nv2]
src/precompute_skybox.c:	env->skybox[i].clipped_xrange = env->skybox[i].clipped_x2
src/precompute_skybox.c:		- env->skybox[i].clipped_x1;
src/precompute_skybox.c:	env->skybox[i].xrange = env->skybox[i + 1].x
src/precompute_skybox.c:		- env->skybox[i].x;
src/precompute_skybox.c:	env->skybox[i].floor_range = env->skybox[i].f2 - env->skybox[i].f1;
src/precompute_skybox.c:	env->skybox[i].ceiling_range = env->skybox[i].c2 - env->skybox[i].c1;
src/precompute_skybox.c:	if (env->skybox[i + 1].vz)
src/precompute_skybox.c:		env->skybox[i].texture_scale[0].x = env->skyboxes[2].textures[0 + i].
src/precompute_skybox.c:			surface->w / env->skybox[i + 1].vz;
src/precompute_skybox.c:		env->skybox[i].texture_scale[0].x = env->skyboxes[2].textures[0 + i].
src/precompute_skybox.c:			surface->w / env->skybox[i].clipped_vz2;
src/precompute_skybox.c:	env->skybox[i].texture_scale[0].y = env->skyboxes[2].textures[0 + i].surface->h;
src/precompute_skybox.c:	env->skybox[i].x0z1 = pos1.x * env->skybox[i + 1].vz;
src/precompute_skybox.c:	env->skybox[i].x1z0 = pos2.x * env->skybox[i].vz;
src/precompute_skybox.c:	env->skybox[i].xzrange = env->skybox[i].x1z0 - env->skybox[i].x0z1;
src/precompute_skybox.c:	env->skybox[i].y0z1 = pos1.y * env->skybox[i + 1].vz;
src/precompute_skybox.c:	env->skybox[i].y1z0 = pos2.y * env->skybox[i].vz;
src/precompute_skybox.c:	env->skybox[i].yzrange = env->skybox[i].y1z0 - env->skybox[i].y0z1;
src/precompute_skybox.c:	env->skybox[i].zrange = env->skybox[i].vz - env->skybox[i + 1].vz;
src/precompute_skybox.c:	env->skybox[i].zcomb = env->skybox[i].vz * env->skybox[i + 1].vz;
src/precompute_skybox.c:	env->skybox[i].scale1 = env->player.camera.scale / -env->skybox[i].clipped_vz1;
src/precompute_skybox.c:	env->skybox[i].scale2 = env->player.camera.scale / -env->skybox[i].clipped_vz2;
src/precompute_skybox.c:	env->skybox[i].angle_z1 = env->skybox[i].clipped_vz1
src/precompute_skybox.c:		* env->player.camera.angle_z;
src/precompute_skybox.c:	env->skybox[i].angle_z2 = env->skybox[i].clipped_vz2
src/precompute_skybox.c:		* env->player.camera.angle_z;
src/precompute_skybox.c:	env->skybox[i].f1 = env->h_h + (-5 + env->skybox[i].angle_z1)
src/precompute_skybox.c:		* env->skybox[i].scale1;
src/precompute_skybox.c:	env->skybox[i].f2 = env->h_h + (-5 + env->skybox[i].angle_z2)
src/precompute_skybox.c:		* env->skybox[i].scale2;
src/precompute_skybox.c:	env->skybox[i].c1 = env->h_h + (5 + env->skybox[i].angle_z1)
src/precompute_skybox.c:		* env->skybox[i].scale1;
src/precompute_skybox.c:	env->skybox[i].c2 = env->h_h + (5 + env->skybox[i].angle_z2)
src/precompute_skybox.c:		* env->skybox[i].scale2;
src/precompute_skybox.c:	env->skybox[i].clipped_x1 = env->h_w + env->skybox[i].clipped_vx1
src/precompute_skybox.c:		* env->skybox[i].scale1;
src/precompute_skybox.c:	env->skybox[i].clipped_x2 = env->h_w + env->skybox[i].clipped_vx2
src/precompute_skybox.c:		* env->skybox[i].scale2;
src/precompute_skybox.c:	env->skybox[i].clipped_x1 = ceil(env->skybox[i].clipped_x1);
src/precompute_skybox.c:	env->skybox[i].x = env->h_w + env->skybox[i].vx * env->player.camera.scale
src/precompute_skybox.c:		/ -env->skybox[i].vz;
src/precompute_skybox.c:			new_v2(env->skybox[i].vx, env->skybox[i].vz),
src/precompute_skybox.c:			new_v2(env->skybox[i + 1].vx, env->skybox[i + 1].vz),
src/precompute_skybox.c:			new_v2(env->player.camera.near_left, env->player.camera.near_z),
src/precompute_skybox.c:			new_v2(env->player.camera.near_right, env->player.camera.near_z));
src/precompute_skybox.c:	if (env->skybox[i].vz < env->player.camera.near_z)
src/precompute_skybox.c:		env->skybox[i].clipped_vx1 = inter.x;
src/precompute_skybox.c:		env->skybox[i].clipped_vz1 = inter.y;
src/precompute_skybox.c:		env->skybox[i].clipped_vx1 = env->skybox[i].vx;
src/precompute_skybox.c:		env->skybox[i].clipped_vz1 = env->skybox[i].vz;
src/precompute_skybox.c:	if (env->skybox[i + 1].vz < env->player.camera.near_z)
src/precompute_skybox.c:		env->skybox[i].clipped_vx2 = inter.x;
src/precompute_skybox.c:		env->skybox[i].clipped_vz2 = inter.y;
src/precompute_skybox.c:		env->skybox[i].clipped_vx2 = env->skybox[i + 1].vx;
src/precompute_skybox.c:		env->skybox[i].clipped_vz2 = env->skybox[i + 1].vz;
src/precompute_skybox.c:	if ((env->skybox[i].vz < env->player.camera.near_z
src/precompute_skybox.c:				&& env->skybox[i + 1].vz < env->player.camera.near_z)
src/precompute_skybox.c:			|| (env->skybox[i].vz > env->player.camera.far_z
src/precompute_skybox.c:				&& env->skybox[i + 1].vz > env->player.camera.far_z)
src/precompute_skybox.c:			|| (env->skybox[i].vx < env->player.camera.far_left
src/precompute_skybox.c:				&& env->skybox[i + 1].vx < env->player.camera.far_left)
src/precompute_skybox.c:			|| (env->skybox[i].vx > env->player.camera.far_right
src/precompute_skybox.c:				&& env->skybox[i + 1].vx > env->player.camera.far_right))
src/precompute_skybox.c:		env->skybox[i].draw = 0;
src/precompute_skybox.c:		env->skybox[i].draw = 1;
src/precompute_skybox.c:	env->skybox[i].vx = (pos.x - 5) * env->player.camera.angle_sin
src/precompute_skybox.c:		- (pos.y - 5) * env->player.camera.angle_cos;
src/precompute_skybox.c:	env->skybox[i].vz = (pos.x - 5) * env->player.camera.angle_cos
src/precompute_skybox.c:		+ (pos.y - 5) * env->player.camera.angle_sin;
src/precompute_skybox.c:	env->skybox_computed++;
src/precompute_skybox.c:	env->skybox[4] = env->skybox[0];
src/precompute_skybox.c:	env->skybox[4] = env->skybox[0];
src/precompute_skybox.c:	env->skybox[4] = env->skybox[0];
src/precompute_skybox.c:		if (env->skybox[i].draw)
src/precompute_skybox.c:	env->skybox[4] = env->skybox[0];
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_condition_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_condition_target_functions2.c:		font = env->sdl.fonts.lato20;
src/print_condition_target_functions2.c:		font = env->sdl.fonts.lato15;
src/print_condition_target_functions2.c:		font = env->sdl.fonts.lato20;
src/print_condition_target_functions2.c:		font = env->sdl.fonts.lato15;
src/print_condition_target_functions2.c:		font = env->sdl.fonts.lato20;
src/print_condition_target_functions2.c:		font = env->sdl.fonts.lato15;
src/print_condition_target_functions2.c:		font = env->sdl.fonts.lato20;
src/print_condition_target_functions2.c:		font = env->sdl.fonts.lato15;
src/print_debug.c:	h = env->h;
src/print_debug.c:	player_sector = ft_sitoa(env->player.sector);
src/print_debug.c:	print_text(new_point(h - 150, 5), new_printable_text("Player sector = ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/print_debug.c:	print_text(new_point(h - 150, 215), new_printable_text(player_sector, env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/print_debug.c:	print_text(new_point(0, 1300), new_printable_text("Test", env->sdl.fonts.alice30, 0xFFFFFFFF, 20), env);
src/print_debug.c:	print_text(new_point(h - 200, 5), new_printable_text("Clipping :", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/print_debug.c:	if (env->options.clipping)
src/print_debug.c:		print_text(new_point(h - 200, 145), new_printable_text("ON", env->sdl.fonts.alice30, 0x00FF00FF, 30), env);
src/print_debug.c:		print_text(new_point(h - 200, 145), new_printable_text("OFF", env->sdl.fonts.alice30, 0xFF0000FF, 30), env);
src/print_event.c:		env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:		TTF_SizeText(env->sdl.fonts.lato20, "Go to",
src/print_event.c:		env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:		TTF_SizeText(env->sdl.fonts.lato20, ft_sitoa((int)event->goal),
src/print_event.c:		env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:		TTF_SizeText(env->sdl.fonts.lato20, "Add",
src/print_event.c:		env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:		TTF_SizeText(env->sdl.fonts.lato20, ft_sitoa((int)event->start_incr),
src/print_event.c:		env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:		TTF_SizeText(env->sdl.fonts.lato20, "Func",
src/print_event.c:		env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:		TTF_SizeText(env->sdl.fonts.lato20, "Speed:",
src/print_event.c:			env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:			env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	TTF_SizeText(env->sdl.fonts.lato20, "Delay:", &text_size.x, &text_size.y);
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	TTF_SizeText(env->sdl.fonts.lato20, ft_sitoa(event->delay),
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	TTF_SizeText(env->sdl.fonts.lato20, "Max uses:",
src/print_event.c:		env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:		env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	ft_sitoa((int)env->editor.selected_launch_condition),
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	&event->launch_conditions[env->editor.selected_launch_condition]);
src/print_event.c:	draw_button(env, env->editor.next_launch_condition);
src/print_event.c:	draw_button(env, env->editor.previous_launch_condition);
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	ft_sitoa((int)env->editor.selected_exec_condition),
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	&event->exec_conditions[env->editor.selected_exec_condition]);
src/print_event.c:	draw_button(env, env->editor.next_exec_condition);
src/print_event.c:	draw_button(env, env->editor.previous_exec_condition);
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	TTF_SizeText(env->sdl.fonts.lato20, "Target:", &pos.x, &pos.y);
src/print_event.c:	pos.x = env->print_target_data[event->target_index](env, event,
src/print_event.c:	print_text(new_point(540, pos.x), new_printable_text(env->
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 30), env);
src/print_event_condition.c:	pos = env->print_link_target_data[condition->target_type](env, condition,
src/print_event_condition.c:	env->event_links_types[condition->target_type],
src/print_event_condition.c:	env->sdl.fonts.lato15, 0xFFFFFFFF, 0b0101), env);
src/print_event_condition.c:	TTF_SizeText(env->sdl.fonts.lato15,
src/print_event_condition.c:	env->event_links_types[condition->target_type], &text_size.x, &text_size.y);
src/print_event_condition.c:	env->sdl.fonts.lato15, 0xFFFFFFFF, 0b0101), env);
src/print_event_condition.c:	TTF_SizeText(env->sdl.fonts.lato15, ft_sitoa(condition->target_index),
src/print_event_condition.c:		new_printable_text("ended", env->sdl.fonts.lato15, 0xFFFFFFFF, 0), env);
src/print_event_condition.c:		new_printable_text("ended (starter)", env->sdl.fonts.lato15, 0xFFFFFFFF,
src/print_event_condition.c:		pos = env->print_condition_target_data[condition->target_index](env,
src/print_event_condition.c:		env->event_types[condition->target_index],
src/print_event_condition.c:		env->sdl.fonts.lato15, 0xFFFFFFFF, 0b0101), env);
src/print_event_condition.c:		TTF_SizeText(env->sdl.fonts.lato15,
src/print_event_condition.c:		env->event_types[condition->target_index], &text_size.x, &text_size.y);
src/print_event_condition.c:		env->sdl.fonts.lato15, 0xFFFFFFFF, 30), env);
src/print_event_condition.c:		TTF_SizeText(env->sdl.fonts.lato15, get_condition_type_str(condition),
src/print_event_condition.c:		env->sdl.fonts.lato15, 0xFFFFFFFF, 30), env);
src/print_event_condition.c:	pos = env->print_condition_target_data[condition->target_index](env,
src/print_event_condition.c:	env->event_types[condition->target_index],
src/print_event_condition.c:	env->sdl.fonts.lato15, 0xFFFFFFFF, 30), env);
src/print_event_condition.c:	TTF_SizeText(env->sdl.fonts.lato15,
src/print_event_condition.c:	env->event_types[condition->target_index], &text_size.x, &text_size.y);
src/print_event_condition.c:	env->sdl.fonts.lato15, 0xFFFFFFFF, 30), env);
src/print_event_condition.c:	TTF_SizeText(env->sdl.fonts.lato15, get_condition_type_str(condition),
src/print_event_condition.c:	env->sdl.fonts.lato15, 0xFFFFFFFF, 30), env);
src/print_events_tabs.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 0), env);
src/print_events_tabs.c:	print_text(new_point(500, 230), new_printable_text(ft_sitoa((int)env->
src/print_events_tabs.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 0), env);
src/print_events_tabs.c:		draw_button(env, env->editor.next_event);
src/print_events_tabs.c:		draw_button(env, env->editor.previous_event);
src/print_events_tabs.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 0), env);
src/print_events_tabs.c:	if (env->nb_global_events > 0)
src/print_events_tabs.c:		print_event_selection(env, env->nb_global_events);
src/print_events_tabs.c:		print_event(env, &env->global_events[env->editor.selected_event]);
src/print_events_tabs.c:	if (env->selected_floor != -1)
src/print_events_tabs.c:		sector = env->sectors[env->selected_floor];
src/print_events_tabs.c:	else if (env->editor.selected_sector != -1)
src/print_events_tabs.c:		sector = env->sectors[env->editor.selected_sector];
src/print_events_tabs.c:	if (env->editor.selected_events == 0
src/print_events_tabs.c:	else if (env->editor.selected_events == 1
src/print_events_tabs.c:	if (env->editor.selected_events == 2
src/print_events_tabs.c:	if (env->editor.selected_events == 0
src/print_events_tabs.c:		&& env->sectors[env->editor.selected_sector].wall_sprites[env->
src/print_events_tabs.c:		selected_wall_sprite_wall].nb_press_events[env->
src/print_events_tabs.c:		env->sectors[env->editor.selected_sector].wall_sprites[env->
src/print_events_tabs.c:		selected_wall_sprite_wall].nb_press_events[env->
src/print_events_tabs.c:	else if (env->editor.selected_events == 1
src/print_events_tabs.c:		&& env->sectors[env->editor.selected_sector].wall_sprites[env->
src/print_events_tabs.c:		selected_wall_sprite_wall].nb_shoot_events[env->
src/print_events_tabs.c:		env->sectors[env->editor.selected_sector].wall_sprites[env->
src/print_events_tabs.c:		selected_wall_sprite_wall].nb_shoot_events[env->
src/print_events_tabs.c:	if (env->selected_floor != -1)
src/print_events_tabs.c:		sector = env->sectors[env->selected_floor];
src/print_events_tabs.c:	else if (env->editor.selected_sector != -1)
src/print_events_tabs.c:		sector = env->sectors[env->editor.selected_sector];
src/print_events_tabs.c:	/*if (env->editor.selected_sector != -1)
src/print_events_tabs.c:		env->selected_floor = env->editor.selected_sector;
src/print_events_tabs.c:	else if (env->selected_floor != -1)
src/print_events_tabs.c:		env->editor.selected_sector = env->selected_floor;*/
src/print_events_tabs.c:	if (env->editor.selected_events == 0)
src/print_events_tabs.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 0), env);
src/print_events_tabs.c:	else if (env->editor.selected_events == 1)
src/print_events_tabs.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 0), env);
src/print_events_tabs.c:	else if (env->editor.selected_events == 2)
src/print_events_tabs.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 0), env);
src/print_events_tabs.c:	draw_button(env, env->editor.next_events);
src/print_events_tabs.c:	draw_button(env, env->editor.previous_events);
src/print_events_tabs.c:	if (env->editor.selected_events == 0 && sector.nb_stand_events > 0)
src/print_events_tabs.c:		print_event(env, &sector.stand_events[env->editor.selected_event]);
src/print_events_tabs.c:	else if (env->editor.selected_events == 1 && sector.nb_walk_in_events > 0)
src/print_events_tabs.c:		print_event(env, &sector.walk_in_events[env->editor.selected_event]);
src/print_events_tabs.c:	else if (env->editor.selected_events == 2 && sector.nb_walk_out_events > 0)
src/print_events_tabs.c:		print_event(env, &sector.walk_out_events[env->editor.selected_event]);
src/print_events_tabs.c:	if (env->editor.selected_events == 0)
src/print_events_tabs.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 0), env);
src/print_events_tabs.c:	else if (env->editor.selected_events == 1)
src/print_events_tabs.c:	env->sdl.fonts.lato20, 0xFFFFFFFF, 0), env);
src/print_events_tabs.c:	draw_button(env, env->editor.next_events);
src/print_events_tabs.c:	draw_button(env, env->editor.previous_events);
src/print_events_tabs.c:	if (env->editor.selected_events == 0
src/print_events_tabs.c:		&& env->sectors[env->editor.selected_sector]
src/print_events_tabs.c:		.wall_sprites[env->selected_wall_sprite_wall]
src/print_events_tabs.c:		.nb_press_events[env->selected_wall_sprite_sprite] > 0)
src/print_events_tabs.c:		print_event(env, &env->sectors[env->editor.selected_sector]
src/print_events_tabs.c:		.wall_sprites[env->selected_wall_sprite_wall]
src/print_events_tabs.c:		.press_events[env->selected_wall_sprite_sprite]
src/print_events_tabs.c:		[env->editor.selected_event]);
src/print_events_tabs.c:	else if (env->editor.selected_events == 1
src/print_events_tabs.c:		&& env->sectors[env->editor.selected_sector]
src/print_events_tabs.c:		.wall_sprites[env->selected_wall_sprite_wall]
src/print_events_tabs.c:		.nb_shoot_events[env->selected_wall_sprite_sprite] > 0)
src/print_events_tabs.c:		print_event(env, &env->sectors[env->editor.selected_sector]
src/print_events_tabs.c:		.wall_sprites[env->selected_wall_sprite_wall]
src/print_events_tabs.c:		.shoot_events[env->selected_wall_sprite_sprite]
src/print_events_tabs.c:		[env->editor.selected_event]);
src/print_link_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_link_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_link_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_link_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_link_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_link_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_link_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_link_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_press_text.c:	print_text(new_point(env->h - 200, env->h_w),
src/print_press_text.c:	new_printable_text("Press E", env->sdl.fonts.lato50, 0xFFFFFFFF, 30), env);
src/print_results.c:	accuracy = ft_sitoa(env->player.accuracy);
src/print_results.c:	print_text(new_point(200, 320), new_printable_text("Score :", env->sdl.fonts.amazdoom50, 0xFFFFFFFF, 50), env);
src/print_results.c:	print_text(new_point(280, 220), new_printable_text("Enemies Killed: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/print_results.c:	print_text(new_point(280, 450), new_printable_text(ft_sitoa(env->player.killed), env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/print_results.c:	print_text(new_point(360, 220), new_printable_text("Accuracy: ", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/print_results.c:	print_text(new_point(360, 450), new_printable_text(ft_sitoa(env->player.accuracy), env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/print_results.c:	print_text(new_point(360, 450 + length * 17), new_printable_text("%", env->sdl.fonts.alice30, 0xFFFFFFFF, 30), env);
src/print_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_target_functions.c:		font = env->sdl.fonts.lato20;
src/print_target_functions.c:		font = env->sdl.fonts.lato15;
src/print_target_functions2.c:		font = env->sdl.fonts.lato20;
src/print_target_functions2.c:		font = env->sdl.fonts.lato15;
src/print_target_functions2.c:		font = env->sdl.fonts.lato20;
src/print_target_functions2.c:		font = env->sdl.fonts.lato15;
src/print_target_functions2.c:		font = env->sdl.fonts.lato20;
src/print_target_functions2.c:		font = env->sdl.fonts.lato15;
src/print_target_functions2.c:		font = env->sdl.fonts.lato20;
src/print_target_functions2.c:		font = env->sdl.fonts.lato15;
src/project_wall.c:	camera->v[sector->num][i].f1 = env->h_h + (camera->v[sector->num][i].clipped_vf1 - camera->pos.z
src/project_wall.c:	camera->v[sector->num][i].f2 = env->h_h + (camera->v[sector->num][i].clipped_vf2 - camera->pos.z
src/project_wall.c:	camera->v[sector->num][i].c1 = env->h_h + (camera->v[sector->num][i].clipped_vc1 - camera->pos.z
src/project_wall.c:	camera->v[sector->num][i].c2 = env->h_h + (camera->v[sector->num][i].clipped_vc2 - camera->pos.z
src/project_wall.c:	camera->v[sector->num][i].clipped_x1 = env->h_w + camera->v[sector->num][i].clipped_vx1
src/project_wall.c:	camera->v[sector->num][i].clipped_x2 = env->h_w + camera->v[sector->num][i].clipped_vx2
src/project_wall.c:	camera->v[sector->num][i].no_slope_f1 = env->h_h + (sector->floor - camera->pos.z
src/project_wall.c:	camera->v[sector->num][i].no_slope_f2 = env->h_h + (sector->floor - camera->pos.z
src/project_wall.c:	camera->v[sector->num][i].no_slope_c1 = env->h_h + (sector->ceiling - camera->pos.z
src/project_wall.c:	camera->v[sector->num][i].no_slope_c2 = env->h_h + (sector->ceiling - camera->pos.z
src/project_wall.c:	camera->v[sector->num][i].x = env->h_w + camera->v[sector->num][i].vx
src/project_wall.c:	camera->v[sector->num][i].floor_horizon = env->h_h + (sector->floor_slope
src/project_wall.c:	camera->v[sector->num][i].ceiling_horizon = env->h_h + (sector->ceiling_slope
src/projectile.c:	if (!(new = ft_lstnew(&env->projectile, sizeof(t_projectile))))
src/projectile.c:	ft_lstpushback(&env->projectiles, new);
src/projectile.c:	if (env->projectiles)
src/projectile.c:		tmp = env->projectiles;
src/projectile.c:				env->enemies[nb].health -= projectile->damage;
src/projectile.c:				env->enemies[nb].hit = 1;
src/projectile.c:				create_explosion(env, new_explosion_data(projectile->pos, 7, projectile->damage, env->object_sprites[projectile->sprite].death_counterpart), 1);
src/projectile.c:				env->nb_explosions++;
src/projectile.c:				tmp = ft_lstdelnode(&env->projectiles, tmp);
src/projectile.c:			if (nb >= 0 && env->objects[nb].solid)
src/projectile.c:				create_explosion(env, new_explosion_data(projectile->pos, 7, projectile->damage, env->object_sprites[projectile->sprite].death_counterpart), 1);
src/projectile.c:				env->nb_explosions++;
src/projectile.c:				tmp = ft_lstdelnode(&env->projectiles, tmp);
src/projectile.c:				env->player.hit = 1;
src/projectile.c:				env->player.health -= ft_clamp(projectile->damage - env->player.armor, 0, projectile->damage);
src/projectile.c:				env->player.armor -= ft_clamp(projectile->damage, 0, env->player.armor);
src/projectile.c:				tmp = ft_lstdelnode(&env->projectiles, tmp);
src/projectile.c:					= env->sectors[projectile->sector].brightness;
src/projectile.c:					= env->sectors[projectile->sector].intensity;
src/projectile.c:					= env->sectors[projectile->sector].light_color;
src/projectile.c:				if (collision == -2 && env->sectors[projectile->sector].ceiling_texture >= 0)
src/projectile.c:					create_explosion(env, new_explosion_data(projectile->pos, 7, projectile->damage, env->object_sprites[projectile->sprite].death_counterpart), 1);
src/projectile.c:					env->nb_explosions++;
src/projectile.c:					if (env->sectors[projectile->sector].ceiling_sprites.nb_sprites
src/projectile.c:						< env->options.max_floor_sprites)
src/projectile.c:							&env->sectors[projectile->sector], projectile,
src/projectile.c:						&env->sectors[projectile->sector], projectile,
src/projectile.c:				else if (collision == -3 && env->sectors[projectile->sector].floor_texture >= 0)
src/projectile.c:					create_explosion(env, new_explosion_data(projectile->pos, 7, projectile->damage, env->object_sprites[projectile->sprite].death_counterpart), 1);
src/projectile.c:					env->nb_explosions++;
src/projectile.c:					if (env->sectors[projectile->sector].floor_sprites.nb_sprites
src/projectile.c:						< env->options.max_floor_sprites)
src/projectile.c:							&env->sectors[projectile->sector], projectile,
src/projectile.c:						&env->sectors[projectile->sector], projectile,
src/projectile.c:				else if (collision >= 0 && env->sectors[projectile->sector].textures[collision] >= 0)
src/projectile.c:					create_explosion(env, new_explosion_data(projectile->pos, 7, projectile->damage, env->object_sprites[projectile->sprite].death_counterpart), 1);
src/projectile.c:					env->nb_explosions++;
src/projectile.c:					if (env->sectors[projectile->sector]
src/projectile.c:						< env->options.max_wall_sprites)
src/projectile.c:							&env->sectors[projectile->sector],
src/projectile.c:						&env->sectors[projectile->sector], projectile,
src/projectile.c:				tmp = ft_lstdelnode(&env->projectiles, tmp);
src/projectiles_collisions.c:    if (pos.z > get_ceiling_at_pos(env->sectors[sector_dest], pos,env) - 1)
src/projectiles_collisions.c:    floor = get_floor_at_pos(env->sectors[sector_dest], pos, env);
src/projectiles_collisions.c:    env->sector_list[wall.sector_dest] = 1;
src/projectiles_collisions.c:    while (i < env->sectors[wall.sector_dest].nb_vertices)
src/projectiles_collisions.c:    while (i < env->sectors[wall.sector_dest].nb_vertices)
src/projectiles_collisions.c:            env->sector_list[RNEIGHBOR] == 0)
src/projectiles_collisions.c:    while (i < env->sectors[motion.sector].nb_vertices)
src/projectiles_collisions.c:    while (i < env->sectors[motion.sector].nb_vertices)
src/projectiles_collisions.c:	if (env->player.health > 0 && distance_two_points_2d(env->player.pos.x, env->player.pos.y, pos.x, pos.y) < env->player.size_2d + radius
src/projectiles_collisions.c:		&& pos.z <= env->player.head_z && pos.z >= env->player.pos.z)
src/projectiles_collisions.c:	if (env->player.health > 0 && hitbox_collision(new_v2(pos.x, pos.y), new_v2(dest.x, dest.y),
src/projectiles_collisions.c:			new_v2(env->player.pos.x, env->player.pos.y), radius + env->player.size_2d)
src/projectiles_collisions.c:			&& pos.z <= env->player.head_z && pos.z >= env->player.pos.z)
src/projectiles_collisions.c:	while (i < env->nb_objects)
src/projectiles_collisions.c:		if (env->objects[i].health > 0 && distance_two_points_2d(env->objects[i].pos.x, env->objects[i].pos.y, pos.x, pos.y) < env->objects[i].size_2d + radius && env->objects[i].exists
src/projectiles_collisions.c:			&& env->objects[i].solid && pos.z <= env->objects[i].height + env->objects[i].pos.z && pos.z >= env->objects[i].pos.z)
src/projectiles_collisions.c:			distance = distance_two_points_2d(env->objects[i].pos.x, env->objects[i].pos.y, pos.x, pos.y);
src/projectiles_collisions.c:			new_v2(env->objects[i].pos.x, env->objects[i].pos.y), radius + env->objects[i].size_2d) && env->objects[i].exists
src/projectiles_collisions.c:			&& env->objects[i].solid && pos.z <= env->objects[i].height + env->objects[i].pos.z && pos.z >= env->objects[i].pos.z)
src/projectiles_collisions.c:			distance = distance_two_points_2d(env->objects[i].pos.x, env->objects[i].pos.y, pos.x, pos.y);
src/projectiles_maths.c:	tmp = env->projectiles;
src/projectiles_maths.c:	prender->screen_pos.y = env->h_h
src/projectiles_maths.c:	prender->screen_pos.x = env->h_w
src/render.c:	vx = env->vertices[sector->vertices[i]].x - camera->pos.x;
src/render.c:	vz = env->vertices[sector->vertices[i]].y - camera->pos.y;
src/render.c:	if (env->selected_wall1 == sector->vertices[i]
src/render.c:			&& env->selected_wall2 == sector->vertices[i + 1])
src/render.c:	camera->v[sector->num][i].x0z1 = env->vertices[sector->vertices[i]].x
src/render.c:	camera->v[sector->num][i].x1z0 = env->vertices[sector->vertices[i + 1]].x
src/render.c:	camera->v[sector->num][i].y0z1 = env->vertices[sector->vertices[i]].y
src/render.c:	camera->v[sector->num][i].y1z0 = env->vertices[sector->vertices[i + 1]].y
src/render.c:		while (k < env->wall_textures[sector->textures[i]].nb_maps)
src/render.c:			camera->v[sector->num][i].texture_scale[k].x = ((env->wall_textures[sector->textures[i]].maps[k]->w / sector->scale[i].x) * sector->wall_width[i] / camera->v[sector->num][i + 1].vz);
src/render.c:				(env->object_sprites[sector->wall_sprites[i].sprite[j]].size[0].x
src/render.c:				env->object_sprites[BULLET_HOLE].size[0].x
src/render.c:		while (k < env->wall_textures[sector->textures[i]].nb_maps)
src/render.c:			camera->v[sector->num][i].texture_scale[k].x = ((env->wall_textures[sector->textures[i]].maps[k]->w / sector->scale[i].x) * sector->wall_width[i] / camera->v[sector->num][i].clipped_vz2);
src/render.c:		(env->object_sprites[sector->wall_sprites[i].sprite[j]].size[0].x
src/render.c:				env->object_sprites[BULLET_HOLE].size[0].x
src/render.c:	while (k < env->wall_textures[sector->textures[i]].nb_maps)
src/render.c:		camera->v[sector->num][i].texture_scale[k].y = (env->wall_textures[sector->textures[i]].maps[k]->h / sector->scale[i].y) * (sector->ceiling - sector->floor);
src/render.c:			* env->wall_textures[sector->textures[i]].maps[k]->w) / 10.0;
src/render.c:			* env->wall_textures[sector->textures[i]].maps[k]->h) / 10.0;
src/render.c:		env->object_sprites[sector->wall_sprites[i].sprite[j]].size[0].y
src/render.c:			env->object_sprites[BULLET_HOLE].size[0].x
src/render.c:			env->visible_sectors++;
src/render.c:			get_rendered_neighbors(camera, env->sectors[sector.neighbors[i]], env);
src/render.c:		sector = env->sectors[camera->screen_sectors[i]];
src/render.c:			env->visible_sectors++;
src/render.c:	camera->feet_y[sector->num] = env->h_h + (get_floor_at_pos(*sector,
src/render.c:	camera->head_y[sector->num] = env->h_h + (get_ceiling_at_pos(*sector,
src/render.c:				&& !env->skybox_computed)
src/render.c:	if (env->contains_skybox && !env->skybox_computed)
src/render.c:		precompute_sector(camera, &env->sectors[i], env);
src/render.c:		pt[i].start = env->nb_sectors / (double)THREADS * i;
src/render.c:		pt[i].end = env->nb_sectors / (double)THREADS * (i + 1);
src/render.c:	env->visible_sectors = 0;
src/render.c:		render.yend = env->h - 1;
src/render_sector.c:				env->ymin[x], env->ymax[x]);
src/render_sector.c:				env->ymin[x], env->ymax[x]);
src/render_sector.c:		if (render.current_ceiling > env->ymin[x]
src/render_sector.c:				|| render.current_floor < env->ymax[x])
src/render_sector.c:		if (render.current_ceiling > env->ymin[x])
src/render_sector.c:		if (render.current_floor < env->ymax[x])
src/render_sector.c:					render.neighbor_max_ceiling, env->ymin[x], env->ymax[x]);
src/render_sector.c:					render.neighbor_max_floor, env->ymin[x], env->ymax[x]);
src/render_sector.c:			env->ymin[x] = ft_clamp(ft_max(render.neighbor_current_ceiling,
src/render_sector.c:						render.current_ceiling), env->ymin[x], env->ymax[x]);
src/render_sector.c:			env->ymax[x] = ft_clamp(ft_min(render.neighbor_current_floor,
src/render_sector.c:						render.current_floor), env->ymin[x], env->ymax[x]);
src/render_sector.c:	sector = env->sectors[render.sector];
src/render_sector.c:	while (++j < env->w)
src/render_sector.c:		tmp_max[j] = env->ymax[j];
src/render_sector.c:		tmp_min[j] = env->ymin[j];
src/render_sector.c:			render.texture_w = env->skyboxes[0].textures[0].surface->w;
src/render_sector.c:			render.texture_h = env->skyboxes[0].textures[0].surface->h;
src/render_sector.c:			render.map_lvl = env->skyboxes[0].textures[0].nb_maps - 1;
src/render_sector.c:			render.texture_w = env->wall_textures[render.texture].surface->w;
src/render_sector.c:			render.texture_h = env->wall_textures[render.texture].surface->h;
src/render_sector.c:			render.map_lvl = env->wall_textures[render.texture].nb_maps - 1;
src/render_sector.c:			while (++j < env->w)
src/render_sector.c:				env->ymax[j] = tmp_max[j];
src/render_sector.c:				env->ymin[j] = tmp_min[j];
src/render_utils.c:	while (i < env->nb_sectors)
src/render_utils.c:		max = env->sectors[i].nb_vertices;
src/render_utils.c:			env->sectors[i].clipped_floors1[j] = env->sectors[i].floors[j];
src/render_utils.c:			env->sectors[i].clipped_ceilings1[j] = env->sectors[i].ceilings[j];
src/render_utils.c:			env->sectors[i].clipped_floors2[j] = env->sectors[i].floors[j];
src/render_utils.c:			env->sectors[i].clipped_ceilings2[j] = env->sectors[i].ceilings[j];
src/render_utils.c:	max = env->screen_sectors_size;
src/render_utils.c:	ymin = ft_max(env->h_h + camera->y1 * env->player.camera.scale, 0);
src/render_utils.c:	ymax = ft_min(env->h_h + camera->y2 * env->player.camera.scale,
src/render_utils.c:			env->h - 1);
src/render_utils.c:	env->skybox_computed = 0;
src/render_utils.c:	while (i < env->w)
src/render_utils.c:		env->ymin[i] = ymin;
src/render_utils.c:		env->ymax[i] = ymax;
src/reset_selection.c:	env->editor.selected_sector = -1;
src/reset_selection.c:	env->selected_wall1 = -1;
src/reset_selection.c:	env->selected_wall2 = -1;
src/reset_selection.c:	env->selected_floor = -1;
src/reset_selection.c:	env->selected_ceiling = -1;
src/reset_selection.c:	env->selected_object = -1;
src/reset_selection.c:	env->selected_enemy = -1;
src/reset_selection.c:	env->editor.selected_vertex = -1;
src/reset_selection.c:	env->editor.selected_sector = -1;
src/reset_selection.c:	env->editor.selected_player = -1;
src/reset_selection.c:	env->editor.selected_object = -1;
src/reset_selection.c:	env->editor.selected_wall = -1;
src/reset_selection.c:	env->selected_wall_sprite_sprite = -1;
src/reset_selection.c:	env->selected_wall_sprite_wall = -1;
src/reset_selection.c:	env->selected_floor_sprite = -1;
src/reset_selection.c:	env->selected_ceiling_sprite = -1;
src/reset_selection.c:	env->editor.selected_events = 0;
src/reset_selection.c:	env->editor.selected_event = 0;
src/reset_selection.c:	env->editor.selected_launch_condition = 0;
src/reset_selection.c:	env->editor.selected_exec_condition = 0;
src/restrict_portals.c:				env->sectors[sector.neighbors[render->i]].xmax[render->y] = render->ceiling_xstart;
src/restrict_portals.c:				env->sectors[sector.neighbors[render->i]].xmax[render->y] = render->neighbor_current_ceiling;
src/restrict_portals.c:				//env->sectors[sector.neighbors[render->i]].xmin[render->y] = render->ceiling_xend;
src/restrict_portals.c:				//env->sectors[sector.neighbors[render->i]].xmax[render->y] = render->neighbor_current_ceiling;
src/restrict_portals.c:				env->sectors[sector.neighbors[render->i]].xmin[render->y] = render->ceiling_xend;
src/restrict_portals.c:				env->sectors[sector.neighbors[render->i]].xmin[render->y] = render->neighbor_current_ceiling;
src/restrict_portals.c:				env->sectors[sector.neighbors[render->i]].xmin[render->y] = render->floor_xend;
src/restrict_portals.c:				env->sectors[sector.neighbors[render->i]].xmin[render->y] = render->neighbor_current_floor;
src/restrict_portals.c:				env->sectors[sector.neighbors[render->i]].xmin[render->y] = render->floor_xend;
src/restrict_portals.c:				env->sectors[sector.neighbors[render->i]].xmax[render->y] = render->floor_xstart;
src/restrict_portals.c:				env->sectors[sector.neighbors[render->i]].xmax[render->y] = render->neighbor_current_floor;
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmax[render->y] = ft_min(render->floor_xstart, render->wall_xstart);
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmax[render->y] = render->floor_xstart;
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmax[render->y] = render->neighbor_current_floor;
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmax[render->y] = render->xstart;
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmin[render->y] = ft_max(render->current_floor, render->neighbor_current_floor);
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmin[render->y] = render->current_floor;
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmin[render->y] = render->xstart;
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmin[render->y] = render->xstart;
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmin[render->y] = ft_max(render->current_floor, render->neighbor_current_floor);
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmax[render->y] = ft_min(render->current_floor, render->neighbor_current_floor);
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmin[render->y] = ft_max(render->current_floor, render->neighbor_current_floor);
src/restrict_portals.c:			env->sectors[sector.neighbors[render->i]].xmax[render->y] = ft_min(render->current_floor, render->neighbor_current_floor);
src/restrict_portals.c:	env->sectors[sector.neighbors[render->i]].xmin[render->y] = ft_min(render->current_floor, render->neighbor_current_floor);*/
src/save_map.c:	env->saving = 0;
src/save_map.c:	ft_printf("Saving map in \"%s\"...\n", env->save_file);
src/save_map.c:	if ((fd = open(env->save_file, O_WRONLY | O_CREAT | O_TRUNC, 0000700)) < 0)
src/save_map.c:		return (ft_printf("Could not open %s\n", env->save_file));
src/save_map.c:	if (env->editor.in_game)
src/save_map.c:	SDL_GetRelativeMouseState(&env->sdl.mouse_x, &env->sdl.mouse_y);
src/screen_utils.c:	if (SDL_UpdateTexture(env->sdl.texture, NULL, env->sdl.texture_pixels, env->w * sizeof(Uint32)))
src/screen_utils.c:	SDL_RenderCopy(env->sdl.renderer, env->sdl.texture, NULL, NULL);
src/screen_utils.c:	SDL_RenderPresent(env->sdl.renderer);
src/screen_utils.c:	max = env->w * env->h;
src/screen_utils.c:		if (env->zbuffer[i] > max_z)
src/screen_utils.c:			max_z = env->zbuffer[i];
src/screen_utils.c:		if (env->zbuffer[i] < min_z)
src/screen_utils.c:			min_z = env->zbuffer[i];
src/screen_utils.c:	while (y < env->h)
src/screen_utils.c:		while (x < env->w)
src/screen_utils.c:			if ((y <= 300 && x < env->w - 300) || y > 300 || env->editor.in_game || !env->options.show_minimap)
src/screen_utils.c:				alpha = 1 - env->zbuffer[x + env->w * y] / max_z;
src/screen_utils.c:				if (env->zbuffer[x + env->w * y] >= 0 && alpha >= 0 && alpha <= 1)
src/screen_utils.c:					env->sdl.texture_pixels[x + env->w * y] = (int)(alpha * 0xFF) << 24
src/screen_utils.c:				else if (env->zbuffer[x + env->w * y] == 100000000)
src/screen_utils.c:					env->sdl.texture_pixels[x + env->w * y] = 0xFFAA0000;
src/screen_utils.c:					env->sdl.texture_pixels[x + env->w * y] = 0;
src/screen_utils.c:	if (SDL_UpdateTexture(env->sdl.texture, NULL, env->sdl.texture_pixels, env->w * sizeof(Uint32)))
src/screen_utils.c:	SDL_RenderCopy(env->sdl.renderer, env->sdl.texture, NULL, NULL);
src/screen_utils.c:	SDL_RenderPresent(env->sdl.renderer);
src/screen_utils.c:	texture_pixels = env->sdl.texture_pixels;
src/screen_utils.c:			//if (surface == env->ui_textures[0].surface)
src/screen_utils.c:					&&*/ /*if (pos.y + x >= 0 && pos.y + x < env->w && pos.x + y >= 0 && pos.x + y < env->h)
src/screen_utils.c:			texture_pixels[pos.y + x + env->w * (pos.x + y)] =
src/screen_utils.c:			if (pos.y + x >= 0 && pos.y + x < env->w && pos.x + y >= 0 && pos.x + y < env->h
src/screen_utils.c:				texture_pixels[pos.y + x + env->w * (pos.x + y)] = blend_alpha(texture_pixels[pos.y + x + env->w * (pos.x + y)], pixel, (Uint8)(((pixel & fmt->Amask) >> fmt->Ashift) << fmt->Aloss));
src/screen_utils.c:	pixels = env->sdl.texture_pixels;
src/screen_utils.c:	max = env->h;
src/screen_utils.c:		pixels[i * env->w + env->h_w] = 0xFFFFFFFF;
src/screen_utils.c:	max = env->w;
src/screen_utils.c:		pixels[env->h_h * env->w + i] = 0xFFFFFFFF;
src/screen_utils.c:	pixels = env->sdl.texture_pixels;
src/screen_utils.c:	x = env->h_w;
src/screen_utils.c:	y = env->h_h - 10;
src/screen_utils.c:	max = env->h_h - 2;
src/screen_utils.c:		pixels[x + y * env->w] = 0xFFFFFFFF;
src/screen_utils.c:	y = env->h_h + 10;
src/screen_utils.c:	max = env->h_h + 2;
src/screen_utils.c:		pixels[x + y * env->w] = 0xFFFFFFFF;
src/screen_utils.c:	y = env->h_h;
src/screen_utils.c:	x = env->h_w - 10;
src/screen_utils.c:	max = env->h_w - 2;
src/screen_utils.c:		pixels[x + y * env->w] = 0xFFFFFFFF;
src/screen_utils.c:	x = env->h_w + 10;
src/screen_utils.c:	max = env->h_w + 2;
src/screen_utils.c:		pixels[x + y * env->w] = 0xFFFFFFFF;
src/sector_parser.c:		|| eparser->current_sector >= env->nb_sectors)
src/select_line.c:		coord = vline.x + env->w * vline.start;
src/select_line.c:		env->sdl.texture_pixels[coord] =
src/select_line.c:		blend_alpha(env->sdl.texture_pixels[coord], 0x1ABC9C, 128);
src/selected_information.c:	if (env->selected_stat == 0 && time - env->time.tick2 > 300)
src/selected_information.c:		env->time.tick2 = time;
src/selected_information.c:		if (env->inputs.left && env->enemies[env->selected_enemy].map_hp > 5)
src/selected_information.c:			env->enemies[env->selected_enemy].map_hp -= 5;
src/selected_information.c:		if (env->inputs.right)
src/selected_information.c:			env->enemies[env->selected_enemy].map_hp += 5;
src/selected_information.c:	else if (env->selected_stat == 1 && time - env->time.tick2 > 300)
src/selected_information.c:		env->time.tick2 = time;
src/selected_information.c:		if (env->inputs.left && env->enemies[env->selected_enemy].speed > 0)
src/selected_information.c:			env->enemies[env->selected_enemy].speed -= 5;
src/selected_information.c:		if (env->inputs.right && env->enemies[env->selected_enemy].speed < 100)
src/selected_information.c:			env->enemies[env->selected_enemy].speed += 5;
src/selected_information.c:	else if (env->selected_stat == 2 && time - env->time.tick2 > 300)
src/selected_information.c:		env->time.tick2 = time;
src/selected_information.c:		if (env->inputs.left && env->enemies[env->selected_enemy].damage > 5)
src/selected_information.c:			env->enemies[env->selected_enemy].damage -= 5;
src/selected_information.c:		if (env->inputs.right && env->enemies[env->selected_enemy].damage < 100)
src/selected_information.c:			env->enemies[env->selected_enemy].damage += 5;
src/selected_information.c:	else if (env->selected_stat == 3 && time - env->time.tick2 > 300)
src/selected_information.c:		env->time.tick2 = time;
src/selected_information.c:		if (env->inputs.left && env->enemies[env->selected_enemy].sprite == CYBER_DEMON)
src/selected_information.c:			env->enemies[env->selected_enemy].sprite = LOST_SOUL;
src/selected_information.c:			env->enemies[env->selected_enemy].pos.z = get_floor_at_pos(env->sectors[env->enemies[env->selected_enemy].sector],
src/selected_information.c:			new_v3(env->enemies[env->selected_enemy].pos.x, env->enemies[env->selected_enemy].pos.y, 0), env) + 5;
src/selected_information.c:		if (env->inputs.right && env->enemies[env->selected_enemy].sprite == LOST_SOUL)
src/selected_information.c:			env->enemies[env->selected_enemy].sprite = CYBER_DEMON;
src/selected_information.c:			env->enemies[env->selected_enemy].pos.z = get_floor_at_pos(env->sectors[env->enemies[env->selected_enemy].sector],
src/selected_information.c:			new_v3(env->enemies[env->selected_enemy].pos.x, env->enemies[env->selected_enemy].pos.y, 0), env);
src/selected_information.c:	if ((env->inputs.left || env->inputs.right) && env->selected_stat == 0 && time - env->time.tick2 > 250)
src/selected_information.c:		env->time.tick2 = time;
src/selected_information.c:		if (env->inputs.left)
src/selected_information.c:			if (env->inputs.shift)
src/selected_information.c:				env->sectors[env->editor.selected_sector].floor -= 10;
src/selected_information.c:				env->sectors[env->editor.selected_sector].floor -= 2;
src/selected_information.c:		if (env->inputs.right)
src/selected_information.c:			if (env->inputs.shift)
src/selected_information.c:				env->sectors[env->editor.selected_sector].floor += 10;
src/selected_information.c:				env->sectors[env->editor.selected_sector].floor += 2;
src/selected_information.c:	if ((env->inputs.left || env->inputs.right) && env->selected_stat == 1 && time - env->time.tick2 > 250)
src/selected_information.c:		env->time.tick2 = time;
src/selected_information.c:		if (env->inputs.left)
src/selected_information.c:			env->sectors[env->editor.selected_sector].ceiling -= 2;
src/selected_information.c:		if (env->inputs.right)
src/selected_information.c:			env->sectors[env->editor.selected_sector].ceiling += 2;
src/selected_information.c:	if ((env->inputs.left || env->inputs.right) && env->selected_stat == 2 && time - env->time.tick2 > 250)
src/selected_information.c:		env->time.tick2 = time;
src/selected_information.c:		texture = env->sectors[env->editor.selected_sector].floor_texture;
src/selected_information.c:		if (env->inputs.left && texture > 0)
src/selected_information.c:			&env->sectors[env->editor.selected_sector], env))
src/selected_information.c:		if (env->inputs.right && texture < MAX_WALL_TEXTURE - 1)
src/selected_information.c:			&env->sectors[env->editor.selected_sector], env))
src/selected_information.c:	if ((env->inputs.left || env->inputs.right) && env->selected_stat == 3 && time - env->time.tick2 > 250)
src/selected_information.c:		env->time.tick2 = time;
src/selected_information.c:		if (env->inputs.left
src/selected_information.c:				&& env->sectors[env->editor.selected_sector].brightness > -254)
src/selected_information.c:			env->sectors[env->editor.selected_sector].brightness -= 2;
src/selected_information.c:		if (env->inputs.right
src/selected_information.c:				&& env->sectors[env->editor.selected_sector].brightness < 254)
src/selected_information.c:			env->sectors[env->editor.selected_sector].brightness += 2;
src/selected_information.c:	update_sector_slope(env, &env->sectors[env->editor.selected_sector]);
src/selection_tab.c:		draw_button(env, env->editor.textures[i]);
src/selection_tab.c:		draw_button(env, env->editor.skyboxes[i]);
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].ceiling);
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].ceiling_slope);
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].floor);
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].floor_slope);
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].floor_texture);
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target2.c:		return (&env->objects[eparser->condition_object].sprite);
src/set_condition_target2.c:		return (&env->objects[eparser->condition_object].scale);
src/set_condition_target2.c:		return (&env->objects[eparser->condition_object].damage);
src/set_condition_target2.c:		return (&env->objects[eparser->condition_object].health);
src/set_condition_target2.c:		return (&env->objects[eparser->condition_object].pos.x);
src/set_condition_target2.c:		return (&env->objects[eparser->condition_object].pos.y);
src/set_condition_target2.c:		return (&env->objects[eparser->condition_object].pos.z);
src/set_condition_target2.c:		return (&env->weapons[eparser->condition_weapon].damage);
src/set_condition_target2.c:		return (&env->weapons[eparser->condition_weapon].range);
src/set_condition_target2.c:		return (&env->enemies[eparser->condition_enemy].
src/set_condition_target2.c:		return (&env->enemies[eparser->condition_enemy].scale);
src/set_condition_target2.c:		return (&env->enemies[eparser->condition_enemy].damage);
src/set_condition_target2.c:		return (&env->enemies[eparser->condition_enemy].health);
src/set_condition_target2.c:		return (&env->enemies[eparser->condition_enemy].pos.x);
src/set_condition_target2.c:		return (&env->enemies[eparser->condition_enemy].pos.y);
src/set_condition_target2.c:		return (&env->enemies[eparser->condition_enemy].pos.z);
src/set_condition_target2.c:		return (&env->player.pos.x);
src/set_condition_target2.c:		return (&env->player.pos.y);
src/set_condition_target2.c:		return (&env->player.pos.z);
src/set_condition_target2.c:		return (&env->player.speed);
src/set_condition_target2.c:		return (&env->player.health);
src/set_condition_target2.c:		return (&env->player.armor);
src/set_condition_target2.c:		return (&env->player.invincible);
src/set_condition_target2.c:		return (&env->player.infinite_ammo);
src/set_condition_target2.c:		return (&env->player.sector);
src/set_condition_target2.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target2.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target2.c:		return (&env->sectors[eparser->condition_sector].intensity);
src/set_condition_target2.c:		return (&env->sectors[eparser->condition_sector].gravity);
src/set_condition_target2.c:		return (&env->vertices[eparser->condition_vertex].x);
src/set_condition_target2.c:		return (&env->vertices[eparser->condition_vertex].y);
src/set_condition_target2.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target2.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target2.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target2.c:		return (&env->sectors[eparser->condition_sector].
src/set_condition_target2.c:		return (&env->sectors[eparser->condition_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].ceiling);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].ceiling_slope);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].ceiling_texture);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].ceiling_map_align.x);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].ceiling_map_align.y);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].ceiling_map_scale.x);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].ceiling_map_scale.y);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].floor);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].floor_slope);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].floor_texture);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].floor_map_align.x);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].floor_map_align.y);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].floor_map_scale.x);
src/set_event_target.c:		return (&env->sectors[eparser->target_sector].floor_map_scale.y);
src/set_event_target2.c:		return (&env->objects[eparser->target_object].sprite);
src/set_event_target2.c:		return (&env->objects[eparser->target_object].scale);
src/set_event_target2.c:		return (&env->objects[eparser->target_object].damage);
src/set_event_target2.c:		return (&env->objects[eparser->target_object].health);
src/set_event_target2.c:		return (&env->objects[eparser->target_object].pos.x);
src/set_event_target2.c:		return (&env->objects[eparser->target_object].pos.y);
src/set_event_target2.c:		return (&env->objects[eparser->target_object].pos.z);
src/set_event_target2.c:		return (&env->weapons[eparser->target_weapon].damage);
src/set_event_target2.c:		return (&env->weapons[eparser->target_weapon].range);
src/set_event_target2.c:		return (&env->enemies[eparser->target_enemy].
src/set_event_target2.c:		return (&env->enemies[eparser->target_enemy].scale);
src/set_event_target2.c:		return (&env->enemies[eparser->target_enemy].damage);
src/set_event_target2.c:		return (&env->enemies[eparser->target_enemy].health);
src/set_event_target2.c:		return (&env->enemies[eparser->target_enemy].pos.x);
src/set_event_target2.c:		return (&env->enemies[eparser->target_enemy].pos.y);
src/set_event_target2.c:		return (&env->enemies[eparser->target_enemy].pos.z);
src/set_event_target2.c:		return (&env->player.pos.x);
src/set_event_target2.c:		return (&env->player.pos.y);
src/set_event_target2.c:		return (&env->player.pos.z);
src/set_event_target2.c:		return (&env->player.speed);
src/set_event_target2.c:		return (&env->player.health);
src/set_event_target2.c:		return (&env->player.armor);
src/set_event_target2.c:		return (&env->player.invincible);
src/set_event_target2.c:		return (&env->player.infinite_ammo);
src/set_event_target2.c:		return (&env->player.sector);
src/set_event_target2.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target2.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target2.c:		return (&env->sectors[eparser->target_sector].intensity);
src/set_event_target2.c:		return (&env->sectors[eparser->target_sector].gravity);
src/set_event_target2.c:		return (&env->vertices[eparser->target_vertex].x);
src/set_event_target2.c:		return (&env->vertices[eparser->target_vertex].y);
src/set_event_target2.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target2.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target2.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target2.c:		return (&env->sectors[eparser->target_sector].
src/set_event_target2.c:		return (&env->sectors[eparser->target_sector].
src/shift_bullet_hole_events.c:	while (i < env->nb_ceiling_bullet_holes_events)
src/shift_bullet_hole_events.c:		curr = (t_floor_sprite_remover*)env->ceiling_bullet_holes_events[i]
src/shift_bullet_hole_events.c:	while (i < env->nb_floor_bullet_holes_events)
src/shift_bullet_hole_events.c:		curr = (t_floor_sprite_remover*)env->floor_bullet_holes_events[i]
src/shift_bullet_hole_events.c:	while (i < env->nb_wall_bullet_holes_events)
src/shift_bullet_hole_events.c:		curr = (t_wall_sprite_remover*)env->wall_bullet_holes_events[i]
src/skybox_draw_functions.c:		texture = env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[render.texture];
src/skybox_draw_functions.c:		texture = env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[render.texture];
src/skybox_draw_functions.c:		texture = env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[render.texture];
src/skybox_draw_functions.c:	pixels = env->sdl.texture_pixels;
src/skybox_draw_functions.c:	zbuffer = env->zbuffer;
src/skybox_draw_functions.c:		coord = vline.x + env->w * i;
src/skybox_draw_functions.c:		if (vline.x == env->h_w && i == env->h_h)
src/skybox_draw_functions.c:			if (env->playing)
src/skybox_draw_functions.c:				env->hovered_wall_sprite_wall = -1;
src/skybox_draw_functions.c:				env->hovered_wall_sprite_sprite = -1;
src/skybox_draw_functions.c:				env->hovered_wall_sprite_sector = -1;
src/skybox_draw_functions.c:			if (env->editor.select)
src/skybox_draw_functions.c:					env->selected_ceiling = render.sector;
src/skybox_draw_functions.c:					env->selected_floor = render.sector;
src/skybox_draw_functions.c:					if (env->editor.in_game)
src/skybox_draw_functions.c:						env->editor.selected_sector = render.sector;
src/skybox_draw_functions.c:						env->editor.selected_wall = wall_data.i;
src/skybox_draw_functions.c:					env->selected_wall1 = env->sectors[render.sector].vertices[wall_data.i];
src/skybox_draw_functions.c:					env->selected_wall2 = env->sectors[render.sector].vertices[wall_data.i + 1];
src/skybox_draw_functions.c:		if (env->editor.in_game && render.selected && !env->editor.select
src/skybox_draw_functions.c:			&& (wall_data.mode != CEILING || env->selected_ceiling_sprite == -1)
src/skybox_draw_functions.c:			&& (wall_data.mode != FLOOR || env->selected_floor_sprite == -1))
src/skybox_draw_functions.c:	if (env->options.zbuffer || env->options.contouring)
src/skybox_draw_functions.c:			start_coord = vline.x + env->w * vline.start;
src/skybox_draw_functions.c:			end_coord = vline.x + env->w * vline.end;
src/skybox_draw_functions.c:	pixels = env->sdl.texture_pixels;
src/skybox_draw_functions.c:	zbuffer = env->zbuffer;
src/skybox_draw_functions.c:		texture_w = env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[1].surface->w;
src/skybox_draw_functions.c:		texture_h = env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[1].surface->h;
src/skybox_draw_functions.c:		texture_pixels = env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[1].str;
src/skybox_draw_functions.c:		texture_w = env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[1].surface->w;
src/skybox_draw_functions.c:		texture_h = env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[1].surface->h;
src/skybox_draw_functions.c:		texture_pixels = env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[1].str;
src/skybox_draw_functions.c:		texture_w = env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[1].surface->w;
src/skybox_draw_functions.c:		texture_h = env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[1].surface->h;
src/skybox_draw_functions.c:		texture_pixels = env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[1].str;
src/skybox_draw_functions.c:		coord = vline.x + env->w * i;
src/skybox_draw_functions.c:		if (vline.x == env->h_w && i == env->h_h)
src/skybox_draw_functions.c:			if (env->playing)
src/skybox_draw_functions.c:				env->hovered_wall_sprite_wall = -1;
src/skybox_draw_functions.c:				env->hovered_wall_sprite_sprite = -1;
src/skybox_draw_functions.c:				env->hovered_wall_sprite_sector = -1;
src/skybox_draw_functions.c:			if (env->editor.select)
src/skybox_draw_functions.c:					env->selected_ceiling = render.sector;
src/skybox_draw_functions.c:					env->selected_floor = render.sector;
src/skybox_draw_functions.c:					if (env->editor.in_game)
src/skybox_draw_functions.c:						env->editor.selected_sector = render.sector;
src/skybox_draw_functions.c:						env->editor.selected_wall = wall_data.i;
src/skybox_draw_functions.c:					env->selected_wall1 = env->sectors[render.sector].vertices[wall_data.i];
src/skybox_draw_functions.c:					env->selected_wall2 = env->sectors[render.sector].vertices[wall_data.i + 1];
src/skybox_draw_functions.c:			y *= env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[1].surface->h / 10;
src/skybox_draw_functions.c:			x *= env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[1].surface->w / 10;
src/skybox_draw_functions.c:			y *= env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[1].surface->h / 10;
src/skybox_draw_functions.c:			x *= env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[1].surface->w / 10;
src/skybox_draw_functions.c:			y *= env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[1].surface->h / 10;
src/skybox_draw_functions.c:			x *= env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[1].surface->w / 10;
src/skybox_draw_functions.c:			if (env->editor.in_game && render.selected && !env->editor.select
src/skybox_draw_functions.c:				&& (wall_data.mode != CEILING || env->selected_ceiling_sprite == -1)
src/skybox_draw_functions.c:				&& (wall_data.mode != FLOOR || env->selected_floor_sprite == -1))
src/skybox_draw_functions.c:	if (env->options.zbuffer || env->options.contouring)
src/skybox_draw_functions.c:		if (vline.start >= 0 && vline.start < env->h - 1)
src/skybox_draw_functions.c:			pixels[vline.x + env->w * vline.start] = 0xFFFF0000;
src/skybox_draw_functions.c:				&& vline.end >= 0 && vline.end < env->h)
src/skybox_draw_functions.c:			pixels[vline.x + env->w * vline.end] = 0xFFFF0000;
src/skybox_draw_functions.c:	pixels = env->sdl.texture_pixels;
src/skybox_draw_functions.c:	zbuffer = env->zbuffer;
src/skybox_draw_functions.c:	texture_pixels = env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[0].str;
src/skybox_draw_functions.c:		texture_w = env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[0].surface->w;
src/skybox_draw_functions.c:		texture_h = env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[0].surface->h;
src/skybox_draw_functions.c:		texture_pixels = env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[0].str;
src/skybox_draw_functions.c:		texture_w = env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[0].surface->w;
src/skybox_draw_functions.c:		texture_h = env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[0].surface->h;
src/skybox_draw_functions.c:		texture_pixels = env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[0].str;
src/skybox_draw_functions.c:		texture_w = env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[0].surface->w;
src/skybox_draw_functions.c:		texture_h = env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[0].surface->h;
src/skybox_draw_functions.c:		texture_pixels = env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[0].str;
src/skybox_draw_functions.c:		coord = vline.x + env->w * i;
src/skybox_draw_functions.c:		if (vline.x == env->h_w && i == env->h_h)
src/skybox_draw_functions.c:			if (env->playing)
src/skybox_draw_functions.c:				env->hovered_wall_sprite_wall = -1;
src/skybox_draw_functions.c:				env->hovered_wall_sprite_sprite = -1;
src/skybox_draw_functions.c:				env->hovered_wall_sprite_sector = -1;
src/skybox_draw_functions.c:			if (env->editor.select)
src/skybox_draw_functions.c:					env->selected_ceiling = render.sector;
src/skybox_draw_functions.c:					env->selected_floor = render.sector;
src/skybox_draw_functions.c:					if (env->editor.in_game)
src/skybox_draw_functions.c:						env->editor.selected_sector = render.sector;
src/skybox_draw_functions.c:						env->editor.selected_wall = wall_data.i;
src/skybox_draw_functions.c:					env->selected_wall1 = env->sectors[render.sector].vertices[wall_data.i];
src/skybox_draw_functions.c:					env->selected_wall2 = env->sectors[render.sector].vertices[wall_data.i + 1];
src/skybox_draw_functions.c:			y *= env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[0].surface->h / 10;
src/skybox_draw_functions.c:			x *= env->skyboxes[abs(env->sectors[render.sector].ceiling_texture) - 1].textures[0].surface->w / 10;
src/skybox_draw_functions.c:			y *= env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[0].surface->h / 10;
src/skybox_draw_functions.c:			x *= env->skyboxes[abs(env->sectors[render.sector].floor_texture) - 1].textures[0].surface->w / 10;
src/skybox_draw_functions.c:			y *= env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[0].surface->h / 10;
src/skybox_draw_functions.c:			x *= env->skyboxes[abs(env->sectors[render.sector].textures[wall_data.i]) - 1].textures[0].surface->w / 10;
src/skybox_draw_functions.c:			if (env->editor.in_game && render.selected && !env->editor.select
src/skybox_draw_functions.c:				&& (wall_data.mode != CEILING || env->selected_ceiling_sprite == -1)
src/skybox_draw_functions.c:				&& (wall_data.mode != FLOOR || env->selected_floor_sprite == -1))
src/skybox_draw_functions.c:	if (env->options.zbuffer || env->options.contouring)
src/skybox_draw_functions.c:				&& vline.start >= 0 && vline.start < env->h)
src/skybox_draw_functions.c:			pixels[vline.x + env->w * vline.start] = 0xFFFF0000;
src/skybox_draw_functions.c:		if (vline.end < env->h - 1 && vline.end >= 0)
src/skybox_draw_functions.c:			pixels[vline.x + env->w * vline.end] = 0xFFFF0000;
src/sound_utils.c:		FMOD_System_PlaySound(env->sound.system, sound, 0, 0, chan);
src/sound_utils.c:	FMOD_System_PlaySound(env->sound.system, music, 0, 0, chan);
src/sound_utils.c:	if (FMOD_System_Create(&env->sound.system) != FMOD_OK)
src/sound_utils.c:	if (FMOD_System_Init(env->sound.system, 42, FMOD_INIT_NORMAL, NULL)
src/sound_utils.c:	if (FMOD_System_CreateSound(env->sound.system, "audio/shotgun_shot.wav",
src/sound_utils.c:		FMOD_CREATESAMPLE, 0, &env->weapons[0].shot) != FMOD_OK)
src/sound_utils.c:	if (FMOD_System_CreateSound(env->sound.system, "audio/raygun_shot.wav",
src/sound_utils.c:		FMOD_CREATESAMPLE, 0, &env->weapons[1].shot) != FMOD_OK)
src/sound_utils.c:	if (FMOD_System_CreateSound(env->sound.system, "audio/at_dooms_gate.wav",
src/sound_utils.c:		&env->sound.at_dooms_gate) != FMOD_OK)
src/sound_utils.c:	if (FMOD_System_CreateSound(env->sound.system, "audio/Mt_Erebus.wav",
src/sound_utils.c:		&env->sound.mt_erebus) != FMOD_OK)
src/sound_utils.c:	FMOD_Sound_SetLoopCount(env->sound.at_dooms_gate, -1);
src/sound_utils.c:	FMOD_Sound_SetLoopCount(env->sound.mt_erebus, -1);
src/sound_utils.c:	if (FMOD_System_CreateSound(env->sound.system, "audio/footstep.wav",
src/sound_utils.c:		FMOD_CREATESAMPLE, 0, &env->sound.footstep) != FMOD_OK)
src/sound_utils.c:	env->sound.music_vol = 0.3;
src/sound_utils.c:	env->sound.ambient_vol = 0.3;
src/split_sector.c:	sector = env->sectors[i];
src/split_sector.c:	if (((j > 0 && sector.vertices[j] == env->editor.split.v1 && (sector.vertices[j - 1] == env->editor.split.v2
src/split_sector.c:		|| sector.vertices[j + 1] == env->editor.split.v2)))
src/split_sector.c:		|| (sector.vertices[j] == env->editor.split.v1 && j == 0
src/split_sector.c:		&& (sector.vertices[sector.nb_vertices - 1] == env->editor.split.v2
src/split_sector.c:		|| sector.vertices[j + 1] == env->editor.split.v2)))
src/split_sector.c:	else if (((j > 0 && sector.vertices[j] == env->editor.split.v2 && (sector.vertices[j - 1] == env->editor.split.v1
src/split_sector.c:		|| sector.vertices[j + 1] == env->editor.split.v1)))
src/split_sector.c:		|| (sector.vertices[j] == env->editor.split.v2 && j == 0
src/split_sector.c:		&& (sector.vertices[sector.nb_vertices - 1] == env->editor.split.v1
src/split_sector.c:		|| sector.vertices[j + 1] == env->editor.split.v1)))
src/split_sector.c:	while (i < env->nb_sectors)
src/split_sector.c:		while (j < env->sectors[i].nb_vertices)
src/split_sector.c:			if ((env->sectors[i].vertices[j] == env->editor.split.v1
src/split_sector.c:			|| env->sectors[i].vertices[j] == env->editor.split.v2) && !first)
src/split_sector.c:			else if (first && (env->sectors[i].vertices[j] == env->editor.split.v1
src/split_sector.c:			|| env->sectors[i].vertices[j] == env->editor.split.v2))
src/split_sector.c:				env->editor.split.sector = i;
src/split_sector.c:	tmp = env->editor.current_vertices;
src/split_sector.c:	env->editor.split.v1 = ((t_vertex*)tmp->content)->num;
src/split_sector.c:	tmp = env->editor.current_vertices->next;
src/split_sector.c:	env->editor.split.v2 = ((t_vertex*)tmp->content)->num;
src/split_sector.c:		update_int_tab(i, (int)sector->nb_vertices + 1, &env->sectors[sector->num].vertices);
src/split_sector.c:		update_int_tab(i, (int)sector->nb_vertices + 1, &env->sectors[sector->num].textures);
src/split_sector.c:		update_double_tab(i, sector->nb_vertices + 1, &env->sectors[sector->num].floors);
src/split_sector.c:		update_double_tab(i, sector->nb_vertices + 1, &env->sectors[sector->num].ceilings);
src/split_sector.c:		update_double_tab(i, sector->nb_vertices + 1, &env->sectors[sector->num].clipped_floors1);
src/split_sector.c:		update_double_tab(i, sector->nb_vertices + 1, &env->sectors[sector->num].clipped_floors2);
src/split_sector.c:		update_double_tab(i, sector->nb_vertices + 1, &env->sectors[sector->num].clipped_ceilings1);
src/split_sector.c:		update_double_tab(i, sector->nb_vertices + 1, &env->sectors[sector->num].clipped_ceilings2);
src/split_sector.c:		update_double_tab(i, sector->nb_vertices + 1, &env->sectors[sector->num].wall_width);
src/split_sector.c:	while (i < env->nb_sectors)
src/split_sector.c:		create_portals(env, env->sectors[i]);
src/split_sector.c:	origin = env->editor.split.sector;
src/split_sector.c:	new = env->nb_sectors - 1;
src/split_sector.c:	while (i < env->sectors[new].nb_vertices)
src/split_sector.c:		env->sectors[new].textures[i] = env->sectors[origin].textures[0];
src/split_sector.c:	env->sectors[new].ceiling_texture = env->sectors[origin].ceiling_texture;
src/split_sector.c:	env->sectors[new].floor_texture = env->sectors[origin].floor_texture;
src/split_sector.c:	env->sectors[new].floor = env->sectors[origin].floor;
src/split_sector.c:	env->sectors[new].floor_slope = env->sectors[origin].floor_slope;
src/split_sector.c:	env->sectors[new].ceiling = env->sectors[origin].ceiling;
src/split_sector.c:	env->sectors[new].ceiling_slope = env->sectors[origin].ceiling_slope;
src/split_sector.c:	env->editor.reverted = get_clockwise_order(env) ? 0 : 1;
src/split_sector.c:	env->editor.start_vertex = -1;
src/split_sector.c:	sector = &env->sectors[env->editor.split.sector];
src/split_sector.c:		if (start == -1 && (sector->vertices[i] == env->editor.split.v1
src/split_sector.c:		|| sector->vertices[i] == env->editor.split.v2))
src/split_sector.c:		else if (start != -1 && (sector->vertices[i] == env->editor.split.v1
src/split_sector.c:		|| sector->vertices[i] == env->editor.split.v2))
src/split_sector.c:	sector = &env->sectors[env->editor.split.sector];
src/split_sector.c:	env->editor.split.sector = -1;
src/split_sector.c:	env->editor.split.v1 = -1;
src/split_sector.c:	env->editor.split.v2 = -1;
src/split_sector.c:	env->editor.divide_sector = 0;
src/split_sector_utils.c:				while(j < env->sectors[sector->neighbors[index]].nb_vertices)
src/split_sector_utils.c:					if (env->sectors[sector->neighbors[index]].neighbors[j] == num)
src/split_sector_utils.c:						env->sectors[sector->neighbors[index]].neighbors[j] = env->nb_sectors - 1;
src/sprite_maths_enemies.c:		get_translated_enemy_pos(camera, &env->enemies[i]);
src/sprite_maths_enemies.c:		get_rotated_enemy_pos(camera, &env->enemies[i]);
src/sprite_maths_enemies.c:	erender->screen_pos.y = env->h_h
src/sprite_maths_enemies.c:	erender->screen_pos.x = env->h_w
src/sprite_selection.c:		draw_button(env, env->editor.sprite_selection[i]);
src/sprites_maths.c:		get_translated_object_pos(camera, &env->objects[i]);
src/sprites_maths.c:		get_rotated_object_pos(camera, &env->objects[i]);
src/sprites_maths.c:	orender->screen_pos.y = env->h_h
src/sprites_maths.c:	orender->screen_pos.x = env->h_w
src/start_event.c:					|| !is_queued(env->queued_values, (*events)[i].target))
src/start_event.c:			ft_lstpushback(&env->events, new);
src/start_event.c:			ft_lstpushback(&env->queued_values, new_value);
src/start_event.c:			ft_lstpushback(&env->events, new);
src/start_event.c:			ft_lstpushback(&env->queued_values, new_value);
src/update_player_z.c:	env->player.state.walk = 1;
src/update_player_z.c:	sector = env->sectors[env->player.highest_sect];
src/update_player_z.c:	v0 = env->vertices[sector.vertices[0]];
src/update_player_z.c:	env->player.pos.z =
src/update_player_z.c:		(sector.normal.x * (env->player.pos.x - v0.x)
src/update_player_z.c:		 - sector.normal.y * (env->player.pos.y - v0.y)) * sector.floor_slope;
src/update_player_z.c:	env->player.head_z = env->player.pos.z + env->player.eyesight;
src/update_player_z.c:	env->player.camera.pos.z = env->player.head_z;
src/update_player_z.c:	if (env->enemies[i].sector != -1)
src/update_player_z.c:		sector = env->sectors[env->enemies[i].sector];
src/update_player_z.c:		v0 = env->vertices[sector.vertices[0]];
src/update_player_z.c:		env->enemies[i].pos.z =
src/update_player_z.c:			(sector.normal.x * (env->enemies[i].pos.x - v0.x)
src/update_player_z.c:			- sector.normal.y * (env->enemies[i].pos.y - v0.y)) * sector.floor_slope;
src/update_player_z.c:	sector = env->sectors[env->player.highest_sect];
src/update_player_z.c:	v0 = env->vertices[sector.vertices[0]];
src/update_player_z.c:		(sector.normal.x * (env->player.pos.x - v0.x)
src/update_player_z.c:		 - sector.normal.y * (env->player.pos.y - v0.y)) * sector.floor_slope;
src/update_player_z.c:	env->gravity.floor = player_feet;
src/update_sprites_state.c:	while (i < env->nb_sectors)
src/update_sprites_state.c:		sector = env->sectors[i];
src/update_sprites_state.c:			diff = env->time.milli_s - sector.sprite_time;
src/update_sprites_state.c:					env->sectors[i].sprite_time = env->time.milli_s;
src/update_sprites_state.c:					env->sectors[i].wall_sprites[j].sprite[k] = env->object_sprites[env->sectors[i].wall_sprites[j].sprite[k]].rest_sprite;
src/update_textures_buttons.c:	if (env->sectors[env->editor.selected_sector].
src/update_textures_buttons.c:		textures[env->editor.selected_wall] < 0)
src/update_textures_buttons.c:		env->contains_skybox = 1;
src/update_textures_buttons.c:	if (set_sector_wall_map_array(&env->sectors[env->editor.selected_sector],
src/update_textures_buttons.c:		env->wall_textures[env->sectors[env->editor.selected_sector].
src/update_textures_buttons.c:		textures[env->editor.selected_wall]], env->editor.selected_wall, env))
src/update_textures_buttons.c:	if (set_camera_map_array(&env->player.camera, env->editor.selected_sector,
src/update_textures_buttons.c:		env->editor.selected_wall, env))
src/update_textures_buttons.c:	if (env->sectors[env->selected_ceiling].ceiling_texture < 0)
src/update_textures_buttons.c:		env->contains_skybox = 1;
src/update_textures_buttons.c:	if (set_sector_ceiling_map_array(&env->sectors[env->selected_ceiling],
src/update_textures_buttons.c:		env->wall_textures[env->sectors[env->selected_ceiling].
src/update_textures_buttons.c:	if (env->sectors[env->selected_floor].floor_texture < 0)
src/update_textures_buttons.c:		env->contains_skybox = 1;
src/update_textures_buttons.c:	if (set_sector_floor_map_array(&env->sectors[env->selected_floor],
src/update_textures_buttons.c:		env->wall_textures[env->sectors[env->selected_floor].
src/valid_map.c:	while (i < env->nb_sectors)
src/valid_map.c:		while (j < env->sectors[i].nb_vertices)
src/valid_map.c:			if (vertex.x == env->vertices[env->sectors[i].vertices[j]].x &&
src/valid_map.c:				vertex.y == env->vertices[env->sectors[i].vertices[j]].y)
src/valid_map.c:			new_v2(env->vertices[sector.vertices[i]].x,
src/valid_map.c:			env->vertices[sector.vertices[i]].y)) != 1)
src/valid_map.c:	vertex = env->vertices[0];
src/valid_map.c:		vertex = env->vertices[sector.vertices[i]];
src/valid_map.c:	env->player.sector = get_sector_no_z(env, env->player.pos);
src/valid_map.c:	if (!env->nb_sectors)
src/valid_map.c:	if (!env->editor.player_exist)
src/valid_map.c:	if (env->player.sector == -1)
src/valid_map.c:	while (i < env->nb_sectors)
src/valid_map.c:		if (check_sector(env->sectors[i], env))
src/valid_map.c:	while (i < env->nb_vertices)
src/validate_input.c:		update_confirmation_box(&env->confirmation_box, box->error_message,
src/validate_input.c:		env->saving = 1;
src/vertex_parser.c:		|| eparser->current_vertex >= env->nb_vertices)
src/vertices_selection.c:	while (i < env->nb_sectors)
src/vertices_selection.c:		while (j < env->sectors[i].nb_vertices)
src/vertices_selection.c:			if (env->editor.dragged_vertex == env->sectors[i].vertices[j])
src/vertices_selection.c:				env->editor.reverted = get_clockwise_order_sector(env, i) ? 0 : 1;
src/vertices_selection.c:				if (env->editor.reverted)
src/vertices_selection.c:				revert_sector(&env->sectors[i], env);
src/vertices_selection.c:	if (!env->inputs.left_click && env->editor.dragged_vertex != -1
src/vertices_selection.c:		&& env->sdl.mx >= 400)
src/vertices_selection.c:			|| (!(is_new_dragged_vertex_valid(env, env->editor.selected_vertex))
src/vertices_selection.c:			&& (click_vertex != env->vertices[env->editor.selected_vertex].num)))
src/vertices_selection.c:			env->vertices[env->editor.selected_vertex].x = env->editor.start_pos.x;
src/vertices_selection.c:			env->vertices[env->editor.selected_vertex].y = env->editor.start_pos.y;
src/vertices_selection.c:			env->vertices[env->editor.selected_vertex].x = round((env->sdl.mx -
src/vertices_selection.c:			env->editor.center.x) / env->editor.scale);
src/vertices_selection.c:			env->vertices[env->editor.selected_vertex].y = round((env->sdl.my -
src/vertices_selection.c:			env->editor.center.y) / env->editor.scale);
src/vertices_selection.c:			while (i < env->nb_sectors)
src/vertices_selection.c:				create_portals(env, env->sectors[i]);
src/vertices_selection.c:		env->editor.dragged_vertex = -1;
src/vertices_utils.c:	while (i < env->nb_sectors)
src/vertices_utils.c:		while (j < env->sectors[i].nb_vertices)
src/vertices_utils.c:			if (env->sectors[i].vertices[j] == index)
src/vertices_utils.c:	while (i < env->nb_sectors)
src/vertices_utils.c:			while (j < env->sectors[i].nb_vertices)
src/vertices_utils.c:				if (env->sectors[i].vertices[j] == vertex)
src/vertices_utils.c:	while (i < env->nb_sectors)
src/vertices_utils.c:		while (j < env->sectors[i].nb_vertices)
src/vertices_utils.c:			if (env->sectors[i].vertices[j] == vertex)
src/vertices_utils.c:	tmp = env->editor.current_vertices;
src/view.c:	env->player.camera.angle += env->sdl.mouse_x * env->player.rotation_speed;
src/view.c:	env->player.camera.angle *= CONVERT_DEGREES;
src/view.c:	while (env->player.camera.angle > 360)
src/view.c:		env->player.camera.angle -= 360;
src/view.c:	while (env->player.camera.angle < 0)
src/view.c:		env->player.camera.angle += 360;
src/view.c:	env->player.camera.angle *= CONVERT_RADIANS;
src/view.c:	env->player.camera.angle_cos = cos(env->player.camera.angle);
src/view.c:	env->player.camera.angle_sin = sin(env->player.camera.angle);
src/view.c:	env->player.camera.perp_cos = cos(env->player.camera.angle - M_PI / 2);
src/view.c:	env->player.camera.perp_sin = sin(env->player.camera.angle - M_PI / 2);
src/view.c:	update_camera_position(&env->player.camera);
src/view.c:	env->player.camera.angle_z = ft_fclamp(env->player.camera.angle_z + env->sdl.mouse_y * 0.005, -1, 1.5);
src/view.c:	env->player.camera.angle_z_cos = cos(env->player.camera.angle_z);
src/view.c:	env->player.camera.angle_z_sin = sin(env->player.camera.angle_z);
src/view.c:	env->player.camera.horizon = env->h_h - env->player.camera.angle_z * env->player.camera.scale;
src/wall_parser.c:		|| eparser->current_sector >= env->nb_sectors)
src/wall_parser.c:		env->sectors[eparser->current_sector].nb_vertices)
src/wall_sprite_parser.c:		|| eparser->current_sector >= env->nb_sectors)
src/wall_sprite_parser.c:		|| eparser->current_wall >= env->sectors[eparser->current_sector].nb_vertices)
src/wall_sprite_parser.c:		|| eparser->current_sprite >= env->sectors[eparser->current_sector]
src/wall_sprites_keys.c:	if (env->inputs.comma)
src/wall_sprites_keys.c:		if (env->inputs.shift && !env->inputs.ctrl)
src/wall_sprites_keys.c:		else if (env->inputs.ctrl)
src/wall_sprites_keys.c:	if (env->inputs.period)
src/wall_sprites_keys.c:		if (env->inputs.shift && !env->inputs.ctrl)
src/wall_sprites_keys.c:		else if (env->inputs.ctrl)
src/wall_sprites_keys.c:	if (env->inputs.equals)
src/wall_sprites_keys.c:		if (env->inputs.shift && !env->inputs.ctrl)
src/wall_sprites_keys.c:		else if (env->inputs.ctrl)
src/wall_sprites_keys.c:	if (env->inputs.minus1)
src/wall_sprites_keys.c:		if (env->inputs.shift && !env->inputs.ctrl)
src/wall_sprites_keys.c:		else if (env->inputs.ctrl)
src/weapons.c:	if (env->enemies[i].exists && env->enemies[i].seen)
src/weapons.c:		if ((env->enemies[i].left - env->enemies[i].left) * (env->h / 2 - env->enemies[i].bottom) - (env->w / 2 - env->enemies[i].left) * (env->enemies[i].top - env->enemies[i].bottom) < 0)
src/weapons.c:		if ((env->enemies[i].right - env->enemies[i].left) * (env->h / 2 - env->enemies[i].top) - (env->w / 2 - env->enemies[i].left) * (env->enemies[i].top - env->enemies[i].top) < 0)
src/weapons.c:		if ((env->enemies[i].right - env->enemies[i].right) * (env->h / 2 - env->enemies[i].top) - (env->w / 2 - env->enemies[i].right) * (env->enemies[i].bottom - env->enemies[i].top) < 0)
src/weapons.c:		if ((env->enemies[i].left - env->enemies[i].right) * (env->h / 2 - env->enemies[i].bottom) - (env->w / 2 - env->enemies[i].right) * (env->enemies[i].bottom - env->enemies[i].bottom) < 0)
src/weapons.c:		if (env->enemies[i].rotated_pos.z > env->weapons[env->player.curr_weapon].range || env->enemies[i].rotated_pos.z < 0)
src/weapons.c:	if (env->objects[i].exists && env->objects[i].seen)
src/weapons.c:		if ((env->objects[i].left - env->objects[i].left) * (env->h / 2 - env->objects[i].bottom) - (env->w / 2 - env->objects[i].left) * (env->objects[i].top - env->objects[i].bottom) < 0)
src/weapons.c:		if ((env->objects[i].right - env->objects[i].left) * (env->h / 2 - env->objects[i].top) - (env->w / 2 - env->objects[i].left) * (env->objects[i].top - env->objects[i].top) < 0)
src/weapons.c:		if ((env->objects[i].right - env->objects[i].right) * (env->h / 2 - env->objects[i].top) - (env->w / 2 - env->objects[i].right) * (env->objects[i].bottom - env->objects[i].top) < 0)
src/weapons.c:		if ((env->objects[i].left - env->objects[i].right) * (env->h / 2 - env->objects[i].bottom) - (env->w / 2 - env->objects[i].right) * (env->objects[i].bottom - env->objects[i].bottom) < 0)
src/weapons.c:		if (env->objects[i].rotated_pos.z > env->weapons[env->player.curr_weapon].range || env->objects[i].rotated_pos.z < 0)
src/weapons.c:	if (env->weapons[env->player.curr_weapon].ammo_type == ROCKET)
src/weapons.c:		create_projectile(env, new_projectile_data(env->player.pos, env->player.camera.angle, 1, 1),
src/weapons.c:			new_projectile_stats(0.5, env->weapons[env->player.curr_weapon].damage, 0.8, env->player.eyesight - 0.4),
src/weapons.c:			env->player.camera.angle_z);
src/weapons.c:		while (i < env->nb_enemies)
src/weapons.c:				env->enemies[i].health -= damage_done(*env, env->enemies[i].rotated_pos.z);
src/weapons.c:				if (env->enemies[i].health <= 0)
src/weapons.c:					env->player.killed++;
src/weapons.c:				env->enemies[i].hit = 1;
src/weapons.c:		while (i < env->nb_objects)
src/weapons.c:			if (env->objects[i].destructible && env->objects[i].exists)
src/weapons.c:					env->objects[i].health -= damage_done(*env, env->objects[i].rotated_pos.z);
src/weapons.c:					if (env->objects[i].explodes && env->objects[i].health <= 0)
src/weapons.c:							new_explosion_data(env->objects[i].pos, env->objects[i].explosion_size, env->objects[i].damage, env->object_sprites[env->objects[i].sprite].death_counterpart), 0);
src/weapons.c:						env->nb_explosions++;
src/weapons.c:						env->objects[i].exists = 0;
src/weapons.c:		env->player.touched += 1;
src/weapons.c:	env->player.nb_shots += 1;
src/weapons.c:	pixels = env->sdl.texture_pixels;
src/weapons.c:	texture_pixels = env->sprite_textures[sprite].str;
src/weapons.c:	texture_w = env->sprite_textures[sprite].surface->w;
src/weapons.c:	texture_h = env->sprite_textures[sprite].surface->h;
src/weapons.c:	window_w = (int)(env->w - texture_w) / 1.5;
src/weapons.c:	window_h = (env->h - texture_h) + env->weapons[0].weapon_switch;
src/weapons.c:	sector = env->sectors[env->player.sector];
src/weapons.c:		while (x < texture_w  && (window_h + y) < env->h)
src/weapons.c:				if (!env->options.lighting
src/weapons.c:					pixels[(window_w + x) + env->w * (window_h + y)] = 
src/weapons.c:					pixels[(window_w + x) + env->w * (window_h + y)] = 
src/weapons.c:					pixels[(window_w + x) + env->w * (window_h + y)] = 
src/weapons.c:					pixels[(window_w + x) + env->w * (window_h + y)] = 
src/weapons.c:	if (env->shot.start == 0)
src/weapons.c:		env->shot.on_going = 1;
src/weapons.c:		env->shot.start = SDL_GetTicks();
src/weapons.c:		if (env->weapons[nb].ammo > 0)
src/weapons.c:			play_sound(env, &env->sound.player_shots_chan, env->weapons[nb].shot,
src/weapons.c:				env->sound.ambient_vol);
src/weapons.c:			env->weapons[nb].ammo--;
src/weapons.c:	if (env->weapons[nb].ammo)
src/weapons.c:		if (env->time.milli_s > env->shot.start + 70 && ((env->time.milli_s - env->shot.start) / 70 < env->weapons[nb].nb_sprites))
src/weapons.c:			draw_weapon(env, env->weapons[nb].first_sprite + (int)((env->time.milli_s - env->shot.start) / 70));
src/weapons.c:			draw_weapon(env, env->weapons[nb].first_sprite);
src/weapons.c:		draw_weapon(env, env->weapons[nb].first_sprite);
src/weapons.c:	if ((int)((env->time.milli_s - env->shot.start)) >= env->weapons[nb].nb_sprites * 10)
src/weapons.c:		env->shot.start = 0;
src/weapons.c:		env->shot.on_going = 0;
src/weapons.c:	if (env->weapon_change.start == 0)
src/weapons.c:		env->weapon_change.start = SDL_GetTicks();
src/weapons.c:		env->weapon_change.on_going = 1;
src/weapons.c:	time_spent = env->time.milli_s - env->weapon_change.start;
src/weapons.c:		env->weapons[0].weapon_switch  = 75 * (int)(time_spent / 70);
src/weapons.c:		env->player.curr_weapon = next_weapon;
src/weapons.c:		/*if (env->sdl.event.wheel.y > 0)
src/weapons.c:			env->player.curr_weapon = (env->player.curr_weapon >= NB_WEAPONS - 1 ? 0 : env->player.curr_weapon + 1);
src/weapons.c:		else if (env->sdl.event.wheel.y < 0)
src/weapons.c:			env->player.curr_weapon = (env->player.curr_weapon <= 0 ? NB_WEAPONS - 1 : env->player.curr_weapon - 1);*/
src/weapons.c:		env->weapons[0].weapon_switch = 0;
src/weapons.c:		env->weapon_change.start = 0;
src/weapons.c:		env->weapon_change.on_going = 0;
src/weapons.c:	str = ft_sitoa(env->weapons[env->player.curr_weapon].ammo);
src/weapons.c:	print_text(new_point(env->h - env->h / 12, env->w - env->w / 14 - 5), new_printable_text(str, env->sdl.fonts.amazdoom50, 0xA1A1A100, 0), env);
src/weapons.c:	print_text(new_point(env->h - env->h / 12, env->w - env->w / 19), new_printable_text(str, env->sdl.fonts.amazdoom50, 0xA1A1A100, 0), env);
src/weapons.c:	str = ft_sitoa(env->weapons[env->player.curr_weapon].max_ammo);
src/weapons.c:	print_text(new_point(env->h - env->h / 12, env->w - env->w / 24), new_printable_text(str, env->sdl.fonts.amazdoom50, 0xA1A1A100, 0), env);
src/weapons.c:	if (env->sdl.event.wheel.y > 0)
src/weapons.c:		i = (env->player.curr_weapon == NB_WEAPONS - 1) ? 0 : env->player.curr_weapon + 1;
src/weapons.c:		while (i != env->player.curr_weapon)
src/weapons.c:			if (env->weapons[i].possessed)
src/weapons.c:	if (env->sdl.event.wheel.y < 0)
src/weapons.c:		i = (env->player.curr_weapon == 0) ? NB_WEAPONS - 1 : env->player.curr_weapon - 1;
src/weapons.c:		while (i != env->player.curr_weapon)
src/weapons.c:			if (env->weapons[i].possessed)
src/write_enemies.c:		if (sprite == env->enemies_main_sprites[i])
src/write_enemies.c:	ft_dprintf(fd, "\nE %d\n", env->nb_enemies);
src/write_enemies.c:	while (i < env->nb_enemies)
src/write_enemies.c:		write_enemy(fd, env->enemies[i], env);
src/write_events.c:	while (i < env->nb_global_events)
src/write_events.c:		ft_dprintf(fd, "[0][%d", env->global_events[i].target_index);
src/write_events.c:		write_event(fd, env->global_events[i], writers);
src/write_events.c:	while (j < env->nb_sectors)
src/write_events.c:		write_sector_events(fd, j, env->sectors[j], writers);
src/write_events.c:		write_wall_sprites_events(fd, env->sectors[j],
src/write_events_links.c:	while (i < env->nb_global_events)
src/write_events_links.c:		write_event_links(fd, env->global_events[i]);
src/write_events_links.c:	while (j < env->nb_sectors)
src/write_events_links.c:		write_sector_links(fd, env->sectors[i]);
src/write_objects.c:		if (sprite == env->objects_main_sprites[i])
src/write_objects.c:	ft_dprintf(fd, "\nO %d\n", env->nb_objects);
src/write_objects.c:	while (i < env->nb_objects)
src/write_objects.c:		write_object(fd, env->objects[i], env);
src/write_player.c:			env->player.pos.y, env->player.pos.x,
src/write_player.c:			(int)(env->player.camera.angle * CONVERT_DEGREES) % 360);
src/write_sectors.c:		if (sprite == env->objects_main_sprites[i])
src/write_sectors.c:	ft_dprintf(fd, "\nS %d\n", env->nb_sectors);
src/write_sectors.c:	while (i < env->nb_sectors)
src/write_sectors.c:		write_sector(fd, env->sectors[i], env);
src/write_vertices.c:	ft_dprintf(fd, "V %d\n", env->nb_vertices);
src/write_vertices.c:	while (i < env->nb_vertices)
src/write_vertices.c:		size = ft_max(ft_getsize(env->vertices[i].y), ft_getsize(env->vertices[i].x));
src/write_vertices.c:	while (i < env->nb_vertices)
src/write_vertices.c:		ft_dprintf(fd, "%-*.5f %.5f\n", padding, env->vertices[i].y, env->vertices[i].x);
